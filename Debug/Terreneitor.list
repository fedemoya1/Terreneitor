
Terreneitor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005d48  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003fc  08005e58  08005e58  00015e58  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006254  08006254  000201dc  2**0
                  CONTENTS
  4 .ARM          00000000  08006254  08006254  000201dc  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006254  08006254  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006254  08006254  00016254  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006258  08006258  00016258  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  0800625c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000e0  200001dc  08006438  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002bc  08006438  000202bc  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   000090cb  00000000  00000000  00020205  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000018b5  00000000  00000000  000292d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a38  00000000  00000000  0002ab88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000960  00000000  00000000  0002b5c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017f20  00000000  00000000  0002bf20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000a7f3  00000000  00000000  00043e40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00089601  00000000  00000000  0004e633  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000d7c34  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003aec  00000000  00000000  000d7c84  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001dc 	.word	0x200001dc
 800012c:	00000000 	.word	0x00000000
 8000130:	08005e40 	.word	0x08005e40

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001e0 	.word	0x200001e0
 800014c:	08005e40 	.word	0x08005e40

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2f>:
 8000a88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a8c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a90:	bf24      	itt	cs
 8000a92:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a96:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a9a:	d90d      	bls.n	8000ab8 <__aeabi_d2f+0x30>
 8000a9c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000aa0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000aa4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000aa8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aac:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ab0:	bf08      	it	eq
 8000ab2:	f020 0001 	biceq.w	r0, r0, #1
 8000ab6:	4770      	bx	lr
 8000ab8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000abc:	d121      	bne.n	8000b02 <__aeabi_d2f+0x7a>
 8000abe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000ac2:	bfbc      	itt	lt
 8000ac4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000ac8:	4770      	bxlt	lr
 8000aca:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000ace:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ad2:	f1c2 0218 	rsb	r2, r2, #24
 8000ad6:	f1c2 0c20 	rsb	ip, r2, #32
 8000ada:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ade:	fa20 f002 	lsr.w	r0, r0, r2
 8000ae2:	bf18      	it	ne
 8000ae4:	f040 0001 	orrne.w	r0, r0, #1
 8000ae8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aec:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000af0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000af4:	ea40 000c 	orr.w	r0, r0, ip
 8000af8:	fa23 f302 	lsr.w	r3, r3, r2
 8000afc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b00:	e7cc      	b.n	8000a9c <__aeabi_d2f+0x14>
 8000b02:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b06:	d107      	bne.n	8000b18 <__aeabi_d2f+0x90>
 8000b08:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b0c:	bf1e      	ittt	ne
 8000b0e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b12:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b16:	4770      	bxne	lr
 8000b18:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b1c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b20:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b24:	4770      	bx	lr
 8000b26:	bf00      	nop

08000b28 <__aeabi_frsub>:
 8000b28:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b2c:	e002      	b.n	8000b34 <__addsf3>
 8000b2e:	bf00      	nop

08000b30 <__aeabi_fsub>:
 8000b30:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b34 <__addsf3>:
 8000b34:	0042      	lsls	r2, r0, #1
 8000b36:	bf1f      	itttt	ne
 8000b38:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b3c:	ea92 0f03 	teqne	r2, r3
 8000b40:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b44:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b48:	d06a      	beq.n	8000c20 <__addsf3+0xec>
 8000b4a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b4e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b52:	bfc1      	itttt	gt
 8000b54:	18d2      	addgt	r2, r2, r3
 8000b56:	4041      	eorgt	r1, r0
 8000b58:	4048      	eorgt	r0, r1
 8000b5a:	4041      	eorgt	r1, r0
 8000b5c:	bfb8      	it	lt
 8000b5e:	425b      	neglt	r3, r3
 8000b60:	2b19      	cmp	r3, #25
 8000b62:	bf88      	it	hi
 8000b64:	4770      	bxhi	lr
 8000b66:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b6a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b6e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b72:	bf18      	it	ne
 8000b74:	4240      	negne	r0, r0
 8000b76:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b7e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b82:	bf18      	it	ne
 8000b84:	4249      	negne	r1, r1
 8000b86:	ea92 0f03 	teq	r2, r3
 8000b8a:	d03f      	beq.n	8000c0c <__addsf3+0xd8>
 8000b8c:	f1a2 0201 	sub.w	r2, r2, #1
 8000b90:	fa41 fc03 	asr.w	ip, r1, r3
 8000b94:	eb10 000c 	adds.w	r0, r0, ip
 8000b98:	f1c3 0320 	rsb	r3, r3, #32
 8000b9c:	fa01 f103 	lsl.w	r1, r1, r3
 8000ba0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000ba4:	d502      	bpl.n	8000bac <__addsf3+0x78>
 8000ba6:	4249      	negs	r1, r1
 8000ba8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bac:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000bb0:	d313      	bcc.n	8000bda <__addsf3+0xa6>
 8000bb2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bb6:	d306      	bcc.n	8000bc6 <__addsf3+0x92>
 8000bb8:	0840      	lsrs	r0, r0, #1
 8000bba:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bbe:	f102 0201 	add.w	r2, r2, #1
 8000bc2:	2afe      	cmp	r2, #254	; 0xfe
 8000bc4:	d251      	bcs.n	8000c6a <__addsf3+0x136>
 8000bc6:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000bca:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bce:	bf08      	it	eq
 8000bd0:	f020 0001 	biceq.w	r0, r0, #1
 8000bd4:	ea40 0003 	orr.w	r0, r0, r3
 8000bd8:	4770      	bx	lr
 8000bda:	0049      	lsls	r1, r1, #1
 8000bdc:	eb40 0000 	adc.w	r0, r0, r0
 8000be0:	3a01      	subs	r2, #1
 8000be2:	bf28      	it	cs
 8000be4:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000be8:	d2ed      	bcs.n	8000bc6 <__addsf3+0x92>
 8000bea:	fab0 fc80 	clz	ip, r0
 8000bee:	f1ac 0c08 	sub.w	ip, ip, #8
 8000bf2:	ebb2 020c 	subs.w	r2, r2, ip
 8000bf6:	fa00 f00c 	lsl.w	r0, r0, ip
 8000bfa:	bfaa      	itet	ge
 8000bfc:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c00:	4252      	neglt	r2, r2
 8000c02:	4318      	orrge	r0, r3
 8000c04:	bfbc      	itt	lt
 8000c06:	40d0      	lsrlt	r0, r2
 8000c08:	4318      	orrlt	r0, r3
 8000c0a:	4770      	bx	lr
 8000c0c:	f092 0f00 	teq	r2, #0
 8000c10:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c14:	bf06      	itte	eq
 8000c16:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c1a:	3201      	addeq	r2, #1
 8000c1c:	3b01      	subne	r3, #1
 8000c1e:	e7b5      	b.n	8000b8c <__addsf3+0x58>
 8000c20:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c24:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c28:	bf18      	it	ne
 8000c2a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c2e:	d021      	beq.n	8000c74 <__addsf3+0x140>
 8000c30:	ea92 0f03 	teq	r2, r3
 8000c34:	d004      	beq.n	8000c40 <__addsf3+0x10c>
 8000c36:	f092 0f00 	teq	r2, #0
 8000c3a:	bf08      	it	eq
 8000c3c:	4608      	moveq	r0, r1
 8000c3e:	4770      	bx	lr
 8000c40:	ea90 0f01 	teq	r0, r1
 8000c44:	bf1c      	itt	ne
 8000c46:	2000      	movne	r0, #0
 8000c48:	4770      	bxne	lr
 8000c4a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c4e:	d104      	bne.n	8000c5a <__addsf3+0x126>
 8000c50:	0040      	lsls	r0, r0, #1
 8000c52:	bf28      	it	cs
 8000c54:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c58:	4770      	bx	lr
 8000c5a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c5e:	bf3c      	itt	cc
 8000c60:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c64:	4770      	bxcc	lr
 8000c66:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c6a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c6e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c72:	4770      	bx	lr
 8000c74:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c78:	bf16      	itet	ne
 8000c7a:	4608      	movne	r0, r1
 8000c7c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c80:	4601      	movne	r1, r0
 8000c82:	0242      	lsls	r2, r0, #9
 8000c84:	bf06      	itte	eq
 8000c86:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c8a:	ea90 0f01 	teqeq	r0, r1
 8000c8e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000c92:	4770      	bx	lr

08000c94 <__aeabi_ui2f>:
 8000c94:	f04f 0300 	mov.w	r3, #0
 8000c98:	e004      	b.n	8000ca4 <__aeabi_i2f+0x8>
 8000c9a:	bf00      	nop

08000c9c <__aeabi_i2f>:
 8000c9c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000ca0:	bf48      	it	mi
 8000ca2:	4240      	negmi	r0, r0
 8000ca4:	ea5f 0c00 	movs.w	ip, r0
 8000ca8:	bf08      	it	eq
 8000caa:	4770      	bxeq	lr
 8000cac:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000cb0:	4601      	mov	r1, r0
 8000cb2:	f04f 0000 	mov.w	r0, #0
 8000cb6:	e01c      	b.n	8000cf2 <__aeabi_l2f+0x2a>

08000cb8 <__aeabi_ul2f>:
 8000cb8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cbc:	bf08      	it	eq
 8000cbe:	4770      	bxeq	lr
 8000cc0:	f04f 0300 	mov.w	r3, #0
 8000cc4:	e00a      	b.n	8000cdc <__aeabi_l2f+0x14>
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_l2f>:
 8000cc8:	ea50 0201 	orrs.w	r2, r0, r1
 8000ccc:	bf08      	it	eq
 8000cce:	4770      	bxeq	lr
 8000cd0:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000cd4:	d502      	bpl.n	8000cdc <__aeabi_l2f+0x14>
 8000cd6:	4240      	negs	r0, r0
 8000cd8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cdc:	ea5f 0c01 	movs.w	ip, r1
 8000ce0:	bf02      	ittt	eq
 8000ce2:	4684      	moveq	ip, r0
 8000ce4:	4601      	moveq	r1, r0
 8000ce6:	2000      	moveq	r0, #0
 8000ce8:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000cec:	bf08      	it	eq
 8000cee:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000cf2:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000cf6:	fabc f28c 	clz	r2, ip
 8000cfa:	3a08      	subs	r2, #8
 8000cfc:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d00:	db10      	blt.n	8000d24 <__aeabi_l2f+0x5c>
 8000d02:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d06:	4463      	add	r3, ip
 8000d08:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d0c:	f1c2 0220 	rsb	r2, r2, #32
 8000d10:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d14:	fa20 f202 	lsr.w	r2, r0, r2
 8000d18:	eb43 0002 	adc.w	r0, r3, r2
 8000d1c:	bf08      	it	eq
 8000d1e:	f020 0001 	biceq.w	r0, r0, #1
 8000d22:	4770      	bx	lr
 8000d24:	f102 0220 	add.w	r2, r2, #32
 8000d28:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d2c:	f1c2 0220 	rsb	r2, r2, #32
 8000d30:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d34:	fa21 f202 	lsr.w	r2, r1, r2
 8000d38:	eb43 0002 	adc.w	r0, r3, r2
 8000d3c:	bf08      	it	eq
 8000d3e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d42:	4770      	bx	lr

08000d44 <__gesf2>:
 8000d44:	f04f 3cff 	mov.w	ip, #4294967295
 8000d48:	e006      	b.n	8000d58 <__cmpsf2+0x4>
 8000d4a:	bf00      	nop

08000d4c <__lesf2>:
 8000d4c:	f04f 0c01 	mov.w	ip, #1
 8000d50:	e002      	b.n	8000d58 <__cmpsf2+0x4>
 8000d52:	bf00      	nop

08000d54 <__cmpsf2>:
 8000d54:	f04f 0c01 	mov.w	ip, #1
 8000d58:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000d5c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000d60:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000d64:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000d68:	bf18      	it	ne
 8000d6a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000d6e:	d011      	beq.n	8000d94 <__cmpsf2+0x40>
 8000d70:	b001      	add	sp, #4
 8000d72:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000d76:	bf18      	it	ne
 8000d78:	ea90 0f01 	teqne	r0, r1
 8000d7c:	bf58      	it	pl
 8000d7e:	ebb2 0003 	subspl.w	r0, r2, r3
 8000d82:	bf88      	it	hi
 8000d84:	17c8      	asrhi	r0, r1, #31
 8000d86:	bf38      	it	cc
 8000d88:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000d8c:	bf18      	it	ne
 8000d8e:	f040 0001 	orrne.w	r0, r0, #1
 8000d92:	4770      	bx	lr
 8000d94:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000d98:	d102      	bne.n	8000da0 <__cmpsf2+0x4c>
 8000d9a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000d9e:	d105      	bne.n	8000dac <__cmpsf2+0x58>
 8000da0:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000da4:	d1e4      	bne.n	8000d70 <__cmpsf2+0x1c>
 8000da6:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000daa:	d0e1      	beq.n	8000d70 <__cmpsf2+0x1c>
 8000dac:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000db0:	4770      	bx	lr
 8000db2:	bf00      	nop

08000db4 <__aeabi_cfrcmple>:
 8000db4:	4684      	mov	ip, r0
 8000db6:	4608      	mov	r0, r1
 8000db8:	4661      	mov	r1, ip
 8000dba:	e7ff      	b.n	8000dbc <__aeabi_cfcmpeq>

08000dbc <__aeabi_cfcmpeq>:
 8000dbc:	b50f      	push	{r0, r1, r2, r3, lr}
 8000dbe:	f7ff ffc9 	bl	8000d54 <__cmpsf2>
 8000dc2:	2800      	cmp	r0, #0
 8000dc4:	bf48      	it	mi
 8000dc6:	f110 0f00 	cmnmi.w	r0, #0
 8000dca:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000dcc <__aeabi_fcmpeq>:
 8000dcc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000dd0:	f7ff fff4 	bl	8000dbc <__aeabi_cfcmpeq>
 8000dd4:	bf0c      	ite	eq
 8000dd6:	2001      	moveq	r0, #1
 8000dd8:	2000      	movne	r0, #0
 8000dda:	f85d fb08 	ldr.w	pc, [sp], #8
 8000dde:	bf00      	nop

08000de0 <__aeabi_fcmplt>:
 8000de0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000de4:	f7ff ffea 	bl	8000dbc <__aeabi_cfcmpeq>
 8000de8:	bf34      	ite	cc
 8000dea:	2001      	movcc	r0, #1
 8000dec:	2000      	movcs	r0, #0
 8000dee:	f85d fb08 	ldr.w	pc, [sp], #8
 8000df2:	bf00      	nop

08000df4 <__aeabi_fcmple>:
 8000df4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000df8:	f7ff ffe0 	bl	8000dbc <__aeabi_cfcmpeq>
 8000dfc:	bf94      	ite	ls
 8000dfe:	2001      	movls	r0, #1
 8000e00:	2000      	movhi	r0, #0
 8000e02:	f85d fb08 	ldr.w	pc, [sp], #8
 8000e06:	bf00      	nop

08000e08 <__aeabi_fcmpge>:
 8000e08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000e0c:	f7ff ffd2 	bl	8000db4 <__aeabi_cfrcmple>
 8000e10:	bf94      	ite	ls
 8000e12:	2001      	movls	r0, #1
 8000e14:	2000      	movhi	r0, #0
 8000e16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000e1a:	bf00      	nop

08000e1c <__aeabi_fcmpgt>:
 8000e1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000e20:	f7ff ffc8 	bl	8000db4 <__aeabi_cfrcmple>
 8000e24:	bf34      	ite	cc
 8000e26:	2001      	movcc	r0, #1
 8000e28:	2000      	movcs	r0, #0
 8000e2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000e2e:	bf00      	nop

08000e30 <DWT_Delay_us>:
uint32_t DWT_Delay_Init(void);


// This Function Provides Delay In Microseconds Using DWT
__STATIC_INLINE void DWT_Delay_us(volatile uint32_t au32_microseconds)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	b084      	sub	sp, #16
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	6078      	str	r0, [r7, #4]
  uint32_t au32_initial_ticks = DWT->CYCCNT;
 8000e38:	4b0f      	ldr	r3, [pc, #60]	; (8000e78 <DWT_Delay_us+0x48>)
 8000e3a:	685b      	ldr	r3, [r3, #4]
 8000e3c:	60fb      	str	r3, [r7, #12]
  uint32_t au32_ticks = (HAL_RCC_GetHCLKFreq() / 1000000);
 8000e3e:	f001 fb2b 	bl	8002498 <HAL_RCC_GetHCLKFreq>
 8000e42:	4603      	mov	r3, r0
 8000e44:	4a0d      	ldr	r2, [pc, #52]	; (8000e7c <DWT_Delay_us+0x4c>)
 8000e46:	fba2 2303 	umull	r2, r3, r2, r3
 8000e4a:	0c9b      	lsrs	r3, r3, #18
 8000e4c:	60bb      	str	r3, [r7, #8]
  au32_microseconds *= au32_ticks;
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	68ba      	ldr	r2, [r7, #8]
 8000e52:	fb02 f303 	mul.w	r3, r2, r3
 8000e56:	607b      	str	r3, [r7, #4]
  while ((DWT->CYCCNT - au32_initial_ticks) < au32_microseconds-au32_ticks);
 8000e58:	bf00      	nop
 8000e5a:	4b07      	ldr	r3, [pc, #28]	; (8000e78 <DWT_Delay_us+0x48>)
 8000e5c:	685a      	ldr	r2, [r3, #4]
 8000e5e:	68fb      	ldr	r3, [r7, #12]
 8000e60:	1ad2      	subs	r2, r2, r3
 8000e62:	6879      	ldr	r1, [r7, #4]
 8000e64:	68bb      	ldr	r3, [r7, #8]
 8000e66:	1acb      	subs	r3, r1, r3
 8000e68:	429a      	cmp	r2, r3
 8000e6a:	d3f6      	bcc.n	8000e5a <DWT_Delay_us+0x2a>
}
 8000e6c:	bf00      	nop
 8000e6e:	bf00      	nop
 8000e70:	3710      	adds	r7, #16
 8000e72:	46bd      	mov	sp, r7
 8000e74:	bd80      	pop	{r7, pc}
 8000e76:	bf00      	nop
 8000e78:	e0001000 	.word	0xe0001000
 8000e7c:	431bde83 	.word	0x431bde83

08000e80 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e84:	f000 fc3c 	bl	8001700 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e88:	f000 f832 	bl	8000ef0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e8c:	f000 f934 	bl	80010f8 <MX_GPIO_Init>
  MX_TIM2_Init();
 8000e90:	f000 f874 	bl	8000f7c <MX_TIM2_Init>
  MX_TIM3_Init();
 8000e94:	f000 f8e2 	bl	800105c <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  DWT_Delay_Init();
 8000e98:	f000 fbdc 	bl	8001654 <DWT_Delay_Init>
  HAL_TIM_Base_Start_IT(&htim2);
 8000e9c:	480f      	ldr	r0, [pc, #60]	; (8000edc <main+0x5c>)
 8000e9e:	f001 fb73 	bl	8002588 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim3);
 8000ea2:	480f      	ldr	r0, [pc, #60]	; (8000ee0 <main+0x60>)
 8000ea4:	f001 fb70 	bl	8002588 <HAL_TIM_Base_Start_IT>
  HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_3);
 8000ea8:	2108      	movs	r1, #8
 8000eaa:	480c      	ldr	r0, [pc, #48]	; (8000edc <main+0x5c>)
 8000eac:	f001 fc16 	bl	80026dc <HAL_TIM_IC_Start_IT>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	if(distance >= 5){
 8000eb0:	4b0c      	ldr	r3, [pc, #48]	; (8000ee4 <main+0x64>)
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	490c      	ldr	r1, [pc, #48]	; (8000ee8 <main+0x68>)
 8000eb6:	4618      	mov	r0, r3
 8000eb8:	f7ff ffa6 	bl	8000e08 <__aeabi_fcmpge>
 8000ebc:	4603      	mov	r3, r0
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	d005      	beq.n	8000ece <main+0x4e>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, 1);
 8000ec2:	2201      	movs	r2, #1
 8000ec4:	2102      	movs	r1, #2
 8000ec6:	4809      	ldr	r0, [pc, #36]	; (8000eec <main+0x6c>)
 8000ec8:	f000 ff0e 	bl	8001ce8 <HAL_GPIO_WritePin>
 8000ecc:	e7f0      	b.n	8000eb0 <main+0x30>
	}
	else{
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, 0);
 8000ece:	2200      	movs	r2, #0
 8000ed0:	2102      	movs	r1, #2
 8000ed2:	4806      	ldr	r0, [pc, #24]	; (8000eec <main+0x6c>)
 8000ed4:	f000 ff08 	bl	8001ce8 <HAL_GPIO_WritePin>
	if(distance >= 5){
 8000ed8:	e7ea      	b.n	8000eb0 <main+0x30>
 8000eda:	bf00      	nop
 8000edc:	20000214 	.word	0x20000214
 8000ee0:	2000025c 	.word	0x2000025c
 8000ee4:	200001fc 	.word	0x200001fc
 8000ee8:	40a00000 	.word	0x40a00000
 8000eec:	40010800 	.word	0x40010800

08000ef0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	b090      	sub	sp, #64	; 0x40
 8000ef4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ef6:	f107 0318 	add.w	r3, r7, #24
 8000efa:	2228      	movs	r2, #40	; 0x28
 8000efc:	2100      	movs	r1, #0
 8000efe:	4618      	mov	r0, r3
 8000f00:	f002 fa88 	bl	8003414 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f04:	1d3b      	adds	r3, r7, #4
 8000f06:	2200      	movs	r2, #0
 8000f08:	601a      	str	r2, [r3, #0]
 8000f0a:	605a      	str	r2, [r3, #4]
 8000f0c:	609a      	str	r2, [r3, #8]
 8000f0e:	60da      	str	r2, [r3, #12]
 8000f10:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000f12:	2301      	movs	r3, #1
 8000f14:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000f16:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000f1a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000f1c:	2300      	movs	r3, #0
 8000f1e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000f20:	2301      	movs	r3, #1
 8000f22:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f24:	2302      	movs	r3, #2
 8000f26:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000f28:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000f2c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000f2e:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000f32:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f34:	f107 0318 	add.w	r3, r7, #24
 8000f38:	4618      	mov	r0, r3
 8000f3a:	f000 feed 	bl	8001d18 <HAL_RCC_OscConfig>
 8000f3e:	4603      	mov	r3, r0
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	d001      	beq.n	8000f48 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000f44:	f000 f9ec 	bl	8001320 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f48:	230f      	movs	r3, #15
 8000f4a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f4c:	2302      	movs	r3, #2
 8000f4e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f50:	2300      	movs	r3, #0
 8000f52:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000f54:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000f58:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000f5e:	1d3b      	adds	r3, r7, #4
 8000f60:	2102      	movs	r1, #2
 8000f62:	4618      	mov	r0, r3
 8000f64:	f001 f95a 	bl	800221c <HAL_RCC_ClockConfig>
 8000f68:	4603      	mov	r3, r0
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d001      	beq.n	8000f72 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000f6e:	f000 f9d7 	bl	8001320 <Error_Handler>
  }
}
 8000f72:	bf00      	nop
 8000f74:	3740      	adds	r7, #64	; 0x40
 8000f76:	46bd      	mov	sp, r7
 8000f78:	bd80      	pop	{r7, pc}
	...

08000f7c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b08a      	sub	sp, #40	; 0x28
 8000f80:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000f82:	f107 0318 	add.w	r3, r7, #24
 8000f86:	2200      	movs	r2, #0
 8000f88:	601a      	str	r2, [r3, #0]
 8000f8a:	605a      	str	r2, [r3, #4]
 8000f8c:	609a      	str	r2, [r3, #8]
 8000f8e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f90:	f107 0310 	add.w	r3, r7, #16
 8000f94:	2200      	movs	r2, #0
 8000f96:	601a      	str	r2, [r3, #0]
 8000f98:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000f9a:	463b      	mov	r3, r7
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	601a      	str	r2, [r3, #0]
 8000fa0:	605a      	str	r2, [r3, #4]
 8000fa2:	609a      	str	r2, [r3, #8]
 8000fa4:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000fa6:	4b2c      	ldr	r3, [pc, #176]	; (8001058 <MX_TIM2_Init+0xdc>)
 8000fa8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000fac:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000fae:	4b2a      	ldr	r3, [pc, #168]	; (8001058 <MX_TIM2_Init+0xdc>)
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000fb4:	4b28      	ldr	r3, [pc, #160]	; (8001058 <MX_TIM2_Init+0xdc>)
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8000fba:	4b27      	ldr	r3, [pc, #156]	; (8001058 <MX_TIM2_Init+0xdc>)
 8000fbc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000fc0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000fc2:	4b25      	ldr	r3, [pc, #148]	; (8001058 <MX_TIM2_Init+0xdc>)
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000fc8:	4b23      	ldr	r3, [pc, #140]	; (8001058 <MX_TIM2_Init+0xdc>)
 8000fca:	2280      	movs	r2, #128	; 0x80
 8000fcc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000fce:	4822      	ldr	r0, [pc, #136]	; (8001058 <MX_TIM2_Init+0xdc>)
 8000fd0:	f001 fa8a 	bl	80024e8 <HAL_TIM_Base_Init>
 8000fd4:	4603      	mov	r3, r0
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d001      	beq.n	8000fde <MX_TIM2_Init+0x62>
  {
    Error_Handler();
 8000fda:	f000 f9a1 	bl	8001320 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000fde:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000fe2:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000fe4:	f107 0318 	add.w	r3, r7, #24
 8000fe8:	4619      	mov	r1, r3
 8000fea:	481b      	ldr	r0, [pc, #108]	; (8001058 <MX_TIM2_Init+0xdc>)
 8000fec:	f001 fe26 	bl	8002c3c <HAL_TIM_ConfigClockSource>
 8000ff0:	4603      	mov	r3, r0
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d001      	beq.n	8000ffa <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8000ff6:	f000 f993 	bl	8001320 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8000ffa:	4817      	ldr	r0, [pc, #92]	; (8001058 <MX_TIM2_Init+0xdc>)
 8000ffc:	f001 fb16 	bl	800262c <HAL_TIM_IC_Init>
 8001000:	4603      	mov	r3, r0
 8001002:	2b00      	cmp	r3, #0
 8001004:	d001      	beq.n	800100a <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8001006:	f000 f98b 	bl	8001320 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800100a:	2300      	movs	r3, #0
 800100c:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800100e:	2300      	movs	r3, #0
 8001010:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001012:	f107 0310 	add.w	r3, r7, #16
 8001016:	4619      	mov	r1, r3
 8001018:	480f      	ldr	r0, [pc, #60]	; (8001058 <MX_TIM2_Init+0xdc>)
 800101a:	f002 f961 	bl	80032e0 <HAL_TIMEx_MasterConfigSynchronization>
 800101e:	4603      	mov	r3, r0
 8001020:	2b00      	cmp	r3, #0
 8001022:	d001      	beq.n	8001028 <MX_TIM2_Init+0xac>
  {
    Error_Handler();
 8001024:	f000 f97c 	bl	8001320 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001028:	2300      	movs	r3, #0
 800102a:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800102c:	2301      	movs	r3, #1
 800102e:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001030:	2300      	movs	r3, #0
 8001032:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8001034:	2300      	movs	r3, #0
 8001036:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 8001038:	463b      	mov	r3, r7
 800103a:	2208      	movs	r2, #8
 800103c:	4619      	mov	r1, r3
 800103e:	4806      	ldr	r0, [pc, #24]	; (8001058 <MX_TIM2_Init+0xdc>)
 8001040:	f001 fd60 	bl	8002b04 <HAL_TIM_IC_ConfigChannel>
 8001044:	4603      	mov	r3, r0
 8001046:	2b00      	cmp	r3, #0
 8001048:	d001      	beq.n	800104e <MX_TIM2_Init+0xd2>
  {
    Error_Handler();
 800104a:	f000 f969 	bl	8001320 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800104e:	bf00      	nop
 8001050:	3728      	adds	r7, #40	; 0x28
 8001052:	46bd      	mov	sp, r7
 8001054:	bd80      	pop	{r7, pc}
 8001056:	bf00      	nop
 8001058:	20000214 	.word	0x20000214

0800105c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	b086      	sub	sp, #24
 8001060:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001062:	f107 0308 	add.w	r3, r7, #8
 8001066:	2200      	movs	r2, #0
 8001068:	601a      	str	r2, [r3, #0]
 800106a:	605a      	str	r2, [r3, #4]
 800106c:	609a      	str	r2, [r3, #8]
 800106e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001070:	463b      	mov	r3, r7
 8001072:	2200      	movs	r2, #0
 8001074:	601a      	str	r2, [r3, #0]
 8001076:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001078:	4b1d      	ldr	r3, [pc, #116]	; (80010f0 <MX_TIM3_Init+0x94>)
 800107a:	4a1e      	ldr	r2, [pc, #120]	; (80010f4 <MX_TIM3_Init+0x98>)
 800107c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 9;
 800107e:	4b1c      	ldr	r3, [pc, #112]	; (80010f0 <MX_TIM3_Init+0x94>)
 8001080:	2209      	movs	r2, #9
 8001082:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001084:	4b1a      	ldr	r3, [pc, #104]	; (80010f0 <MX_TIM3_Init+0x94>)
 8001086:	2200      	movs	r2, #0
 8001088:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 7199;
 800108a:	4b19      	ldr	r3, [pc, #100]	; (80010f0 <MX_TIM3_Init+0x94>)
 800108c:	f641 421f 	movw	r2, #7199	; 0x1c1f
 8001090:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001092:	4b17      	ldr	r3, [pc, #92]	; (80010f0 <MX_TIM3_Init+0x94>)
 8001094:	2200      	movs	r2, #0
 8001096:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001098:	4b15      	ldr	r3, [pc, #84]	; (80010f0 <MX_TIM3_Init+0x94>)
 800109a:	2280      	movs	r2, #128	; 0x80
 800109c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800109e:	4814      	ldr	r0, [pc, #80]	; (80010f0 <MX_TIM3_Init+0x94>)
 80010a0:	f001 fa22 	bl	80024e8 <HAL_TIM_Base_Init>
 80010a4:	4603      	mov	r3, r0
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d001      	beq.n	80010ae <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 80010aa:	f000 f939 	bl	8001320 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80010ae:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80010b2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80010b4:	f107 0308 	add.w	r3, r7, #8
 80010b8:	4619      	mov	r1, r3
 80010ba:	480d      	ldr	r0, [pc, #52]	; (80010f0 <MX_TIM3_Init+0x94>)
 80010bc:	f001 fdbe 	bl	8002c3c <HAL_TIM_ConfigClockSource>
 80010c0:	4603      	mov	r3, r0
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d001      	beq.n	80010ca <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 80010c6:	f000 f92b 	bl	8001320 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80010ca:	2300      	movs	r3, #0
 80010cc:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80010ce:	2300      	movs	r3, #0
 80010d0:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80010d2:	463b      	mov	r3, r7
 80010d4:	4619      	mov	r1, r3
 80010d6:	4806      	ldr	r0, [pc, #24]	; (80010f0 <MX_TIM3_Init+0x94>)
 80010d8:	f002 f902 	bl	80032e0 <HAL_TIMEx_MasterConfigSynchronization>
 80010dc:	4603      	mov	r3, r0
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d001      	beq.n	80010e6 <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 80010e2:	f000 f91d 	bl	8001320 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80010e6:	bf00      	nop
 80010e8:	3718      	adds	r7, #24
 80010ea:	46bd      	mov	sp, r7
 80010ec:	bd80      	pop	{r7, pc}
 80010ee:	bf00      	nop
 80010f0:	2000025c 	.word	0x2000025c
 80010f4:	40000400 	.word	0x40000400

080010f8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b086      	sub	sp, #24
 80010fc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010fe:	f107 0308 	add.w	r3, r7, #8
 8001102:	2200      	movs	r2, #0
 8001104:	601a      	str	r2, [r3, #0]
 8001106:	605a      	str	r2, [r3, #4]
 8001108:	609a      	str	r2, [r3, #8]
 800110a:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800110c:	4b17      	ldr	r3, [pc, #92]	; (800116c <MX_GPIO_Init+0x74>)
 800110e:	699b      	ldr	r3, [r3, #24]
 8001110:	4a16      	ldr	r2, [pc, #88]	; (800116c <MX_GPIO_Init+0x74>)
 8001112:	f043 0320 	orr.w	r3, r3, #32
 8001116:	6193      	str	r3, [r2, #24]
 8001118:	4b14      	ldr	r3, [pc, #80]	; (800116c <MX_GPIO_Init+0x74>)
 800111a:	699b      	ldr	r3, [r3, #24]
 800111c:	f003 0320 	and.w	r3, r3, #32
 8001120:	607b      	str	r3, [r7, #4]
 8001122:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001124:	4b11      	ldr	r3, [pc, #68]	; (800116c <MX_GPIO_Init+0x74>)
 8001126:	699b      	ldr	r3, [r3, #24]
 8001128:	4a10      	ldr	r2, [pc, #64]	; (800116c <MX_GPIO_Init+0x74>)
 800112a:	f043 0304 	orr.w	r3, r3, #4
 800112e:	6193      	str	r3, [r2, #24]
 8001130:	4b0e      	ldr	r3, [pc, #56]	; (800116c <MX_GPIO_Init+0x74>)
 8001132:	699b      	ldr	r3, [r3, #24]
 8001134:	f003 0304 	and.w	r3, r3, #4
 8001138:	603b      	str	r3, [r7, #0]
 800113a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1|GPIO_PIN_3, GPIO_PIN_RESET);
 800113c:	2200      	movs	r2, #0
 800113e:	210a      	movs	r1, #10
 8001140:	480b      	ldr	r0, [pc, #44]	; (8001170 <MX_GPIO_Init+0x78>)
 8001142:	f000 fdd1 	bl	8001ce8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA1 PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_3;
 8001146:	230a      	movs	r3, #10
 8001148:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800114a:	2301      	movs	r3, #1
 800114c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800114e:	2300      	movs	r3, #0
 8001150:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001152:	2302      	movs	r3, #2
 8001154:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001156:	f107 0308 	add.w	r3, r7, #8
 800115a:	4619      	mov	r1, r3
 800115c:	4804      	ldr	r0, [pc, #16]	; (8001170 <MX_GPIO_Init+0x78>)
 800115e:	f000 fc3f 	bl	80019e0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001162:	bf00      	nop
 8001164:	3718      	adds	r7, #24
 8001166:	46bd      	mov	sp, r7
 8001168:	bd80      	pop	{r7, pc}
 800116a:	bf00      	nop
 800116c:	40021000 	.word	0x40021000
 8001170:	40010800 	.word	0x40010800

08001174 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	b082      	sub	sp, #8
 8001178:	af00      	add	r7, sp, #0
 800117a:	6078      	str	r0, [r7, #4]

	   if(htim->Instance == TIM3){
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	4a16      	ldr	r2, [pc, #88]	; (80011dc <HAL_TIM_PeriodElapsedCallback+0x68>)
 8001182:	4293      	cmp	r3, r2
 8001184:	d11a      	bne.n	80011bc <HAL_TIM_PeriodElapsedCallback+0x48>
		   SysTicks++;
 8001186:	4b16      	ldr	r3, [pc, #88]	; (80011e0 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 8001188:	881b      	ldrh	r3, [r3, #0]
 800118a:	3301      	adds	r3, #1
 800118c:	b29a      	uxth	r2, r3
 800118e:	4b14      	ldr	r3, [pc, #80]	; (80011e0 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 8001190:	801a      	strh	r2, [r3, #0]
		   if(SysTicks == 15){
 8001192:	4b13      	ldr	r3, [pc, #76]	; (80011e0 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 8001194:	881b      	ldrh	r3, [r3, #0]
 8001196:	2b0f      	cmp	r3, #15
 8001198:	d11b      	bne.n	80011d2 <HAL_TIM_PeriodElapsedCallback+0x5e>
			   HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, 1);
 800119a:	2201      	movs	r2, #1
 800119c:	2108      	movs	r1, #8
 800119e:	4811      	ldr	r0, [pc, #68]	; (80011e4 <HAL_TIM_PeriodElapsedCallback+0x70>)
 80011a0:	f000 fda2 	bl	8001ce8 <HAL_GPIO_WritePin>
			   DWT_Delay_us(2);
 80011a4:	2002      	movs	r0, #2
 80011a6:	f7ff fe43 	bl	8000e30 <DWT_Delay_us>
			   HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, 0);
 80011aa:	2200      	movs	r2, #0
 80011ac:	2108      	movs	r1, #8
 80011ae:	480d      	ldr	r0, [pc, #52]	; (80011e4 <HAL_TIM_PeriodElapsedCallback+0x70>)
 80011b0:	f000 fd9a 	bl	8001ce8 <HAL_GPIO_WritePin>
		       //HCSR04_Trigger();
		       SysTicks = 0;
 80011b4:	4b0a      	ldr	r3, [pc, #40]	; (80011e0 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 80011b6:	2200      	movs	r2, #0
 80011b8:	801a      	strh	r2, [r3, #0]
	   }
	   else if(htim->Instance == TIM2){
		   //HCSR04_TMR_OVF_ISR();
		   overFlow++;
	   }
}
 80011ba:	e00a      	b.n	80011d2 <HAL_TIM_PeriodElapsedCallback+0x5e>
	   else if(htim->Instance == TIM2){
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80011c4:	d105      	bne.n	80011d2 <HAL_TIM_PeriodElapsedCallback+0x5e>
		   overFlow++;
 80011c6:	4b08      	ldr	r3, [pc, #32]	; (80011e8 <HAL_TIM_PeriodElapsedCallback+0x74>)
 80011c8:	881b      	ldrh	r3, [r3, #0]
 80011ca:	3301      	adds	r3, #1
 80011cc:	b29a      	uxth	r2, r3
 80011ce:	4b06      	ldr	r3, [pc, #24]	; (80011e8 <HAL_TIM_PeriodElapsedCallback+0x74>)
 80011d0:	801a      	strh	r2, [r3, #0]
}
 80011d2:	bf00      	nop
 80011d4:	3708      	adds	r7, #8
 80011d6:	46bd      	mov	sp, r7
 80011d8:	bd80      	pop	{r7, pc}
 80011da:	bf00      	nop
 80011dc:	40000400 	.word	0x40000400
 80011e0:	200001f8 	.word	0x200001f8
 80011e4:	40010800 	.word	0x40010800
 80011e8:	20000200 	.word	0x20000200
 80011ec:	00000000 	.word	0x00000000

080011f0 <HAL_TIM_IC_CaptureCallback>:

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim){
 80011f0:	b5b0      	push	{r4, r5, r7, lr}
 80011f2:	b084      	sub	sp, #16
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	6078      	str	r0, [r7, #4]
	  //HCSR04_IC_ISR(htim);
	uint32_t PS = 0;
 80011f8:	2300      	movs	r3, #0
 80011fa:	60fb      	str	r3, [r7, #12]
		if(EDGE_STATE == 0){
 80011fc:	4b42      	ldr	r3, [pc, #264]	; (8001308 <HAL_TIM_IC_CaptureCallback+0x118>)
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	2b00      	cmp	r3, #0
 8001202:	d11d      	bne.n	8001240 <HAL_TIM_IC_CaptureCallback+0x50>
			//Obtenemos el TS1
			TS1 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_3);
 8001204:	2108      	movs	r1, #8
 8001206:	6878      	ldr	r0, [r7, #4]
 8001208:	f001 fde0 	bl	8002dcc <HAL_TIM_ReadCapturedValue>
 800120c:	4603      	mov	r3, r0
 800120e:	4a3f      	ldr	r2, [pc, #252]	; (800130c <HAL_TIM_IC_CaptureCallback+0x11c>)
 8001210:	6013      	str	r3, [r2, #0]
			//Cambiamos la polaridad del IC
			EDGE_STATE = 1;
 8001212:	4b3d      	ldr	r3, [pc, #244]	; (8001308 <HAL_TIM_IC_CaptureCallback+0x118>)
 8001214:	2201      	movs	r2, #1
 8001216:	601a      	str	r2, [r3, #0]
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_3, TIM_INPUTCHANNELPOLARITY_FALLING);
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	6a1a      	ldr	r2, [r3, #32]
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001226:	621a      	str	r2, [r3, #32]
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	6a1a      	ldr	r2, [r3, #32]
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001236:	621a      	str	r2, [r3, #32]
			//Seteamos Overflow a 0, esto nos ayuda a contar cuantos OVF tuvimos para luego calcular TS2
			overFlow = 0;
 8001238:	4b35      	ldr	r3, [pc, #212]	; (8001310 <HAL_TIM_IC_CaptureCallback+0x120>)
 800123a:	2200      	movs	r2, #0
 800123c:	801a      	strh	r2, [r3, #0]
			distance = (difference * 0.017)/(72/(PS+1));
			//Cambiamos la polaridad del IC preparándolo para la captura de una nueva onda
			EDGE_STATE = 0;
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_3, TIM_INPUTCHANNELPOLARITY_RISING);
		}
}
 800123e:	e059      	b.n	80012f4 <HAL_TIM_IC_CaptureCallback+0x104>
			PS = htim->Instance->PSC;
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001246:	60fb      	str	r3, [r7, #12]
			TS2 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_3);
 8001248:	2108      	movs	r1, #8
 800124a:	6878      	ldr	r0, [r7, #4]
 800124c:	f001 fdbe 	bl	8002dcc <HAL_TIM_ReadCapturedValue>
 8001250:	4603      	mov	r3, r0
 8001252:	4a30      	ldr	r2, [pc, #192]	; (8001314 <HAL_TIM_IC_CaptureCallback+0x124>)
 8001254:	6013      	str	r3, [r2, #0]
			TS2 += (overFlow * (htim->Instance->ARR + 1));
 8001256:	4b2e      	ldr	r3, [pc, #184]	; (8001310 <HAL_TIM_IC_CaptureCallback+0x120>)
 8001258:	881b      	ldrh	r3, [r3, #0]
 800125a:	461a      	mov	r2, r3
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001262:	3301      	adds	r3, #1
 8001264:	fb03 f202 	mul.w	r2, r3, r2
 8001268:	4b2a      	ldr	r3, [pc, #168]	; (8001314 <HAL_TIM_IC_CaptureCallback+0x124>)
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	4413      	add	r3, r2
 800126e:	4a29      	ldr	r2, [pc, #164]	; (8001314 <HAL_TIM_IC_CaptureCallback+0x124>)
 8001270:	6013      	str	r3, [r2, #0]
			difference = TS2 - TS1;
 8001272:	4b28      	ldr	r3, [pc, #160]	; (8001314 <HAL_TIM_IC_CaptureCallback+0x124>)
 8001274:	681a      	ldr	r2, [r3, #0]
 8001276:	4b25      	ldr	r3, [pc, #148]	; (800130c <HAL_TIM_IC_CaptureCallback+0x11c>)
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	1ad3      	subs	r3, r2, r3
 800127c:	4618      	mov	r0, r3
 800127e:	f7ff fd09 	bl	8000c94 <__aeabi_ui2f>
 8001282:	4603      	mov	r3, r0
 8001284:	4a24      	ldr	r2, [pc, #144]	; (8001318 <HAL_TIM_IC_CaptureCallback+0x128>)
 8001286:	6013      	str	r3, [r2, #0]
			distance = (difference * 0.017)/(72/(PS+1));
 8001288:	4b23      	ldr	r3, [pc, #140]	; (8001318 <HAL_TIM_IC_CaptureCallback+0x128>)
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	4618      	mov	r0, r3
 800128e:	f7ff f8cb 	bl	8000428 <__aeabi_f2d>
 8001292:	a31b      	add	r3, pc, #108	; (adr r3, 8001300 <HAL_TIM_IC_CaptureCallback+0x110>)
 8001294:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001298:	f7ff f91e 	bl	80004d8 <__aeabi_dmul>
 800129c:	4602      	mov	r2, r0
 800129e:	460b      	mov	r3, r1
 80012a0:	4614      	mov	r4, r2
 80012a2:	461d      	mov	r5, r3
 80012a4:	68fb      	ldr	r3, [r7, #12]
 80012a6:	3301      	adds	r3, #1
 80012a8:	2248      	movs	r2, #72	; 0x48
 80012aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80012ae:	4618      	mov	r0, r3
 80012b0:	f7ff f898 	bl	80003e4 <__aeabi_ui2d>
 80012b4:	4602      	mov	r2, r0
 80012b6:	460b      	mov	r3, r1
 80012b8:	4620      	mov	r0, r4
 80012ba:	4629      	mov	r1, r5
 80012bc:	f7ff fa36 	bl	800072c <__aeabi_ddiv>
 80012c0:	4602      	mov	r2, r0
 80012c2:	460b      	mov	r3, r1
 80012c4:	4610      	mov	r0, r2
 80012c6:	4619      	mov	r1, r3
 80012c8:	f7ff fbde 	bl	8000a88 <__aeabi_d2f>
 80012cc:	4603      	mov	r3, r0
 80012ce:	4a13      	ldr	r2, [pc, #76]	; (800131c <HAL_TIM_IC_CaptureCallback+0x12c>)
 80012d0:	6013      	str	r3, [r2, #0]
			EDGE_STATE = 0;
 80012d2:	4b0d      	ldr	r3, [pc, #52]	; (8001308 <HAL_TIM_IC_CaptureCallback+0x118>)
 80012d4:	2200      	movs	r2, #0
 80012d6:	601a      	str	r2, [r3, #0]
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_3, TIM_INPUTCHANNELPOLARITY_RISING);
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	6a1a      	ldr	r2, [r3, #32]
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80012e6:	621a      	str	r2, [r3, #32]
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	681a      	ldr	r2, [r3, #0]
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	6a12      	ldr	r2, [r2, #32]
 80012f2:	621a      	str	r2, [r3, #32]
}
 80012f4:	bf00      	nop
 80012f6:	3710      	adds	r7, #16
 80012f8:	46bd      	mov	sp, r7
 80012fa:	bdb0      	pop	{r4, r5, r7, pc}
 80012fc:	f3af 8000 	nop.w
 8001300:	b020c49c 	.word	0xb020c49c
 8001304:	3f916872 	.word	0x3f916872
 8001308:	20000204 	.word	0x20000204
 800130c:	20000208 	.word	0x20000208
 8001310:	20000200 	.word	0x20000200
 8001314:	20000210 	.word	0x20000210
 8001318:	2000020c 	.word	0x2000020c
 800131c:	200001fc 	.word	0x200001fc

08001320 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001320:	b480      	push	{r7}
 8001322:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001324:	b672      	cpsid	i
}
 8001326:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001328:	e7fe      	b.n	8001328 <Error_Handler+0x8>
	...

0800132c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800132c:	b480      	push	{r7}
 800132e:	b085      	sub	sp, #20
 8001330:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001332:	4b15      	ldr	r3, [pc, #84]	; (8001388 <HAL_MspInit+0x5c>)
 8001334:	699b      	ldr	r3, [r3, #24]
 8001336:	4a14      	ldr	r2, [pc, #80]	; (8001388 <HAL_MspInit+0x5c>)
 8001338:	f043 0301 	orr.w	r3, r3, #1
 800133c:	6193      	str	r3, [r2, #24]
 800133e:	4b12      	ldr	r3, [pc, #72]	; (8001388 <HAL_MspInit+0x5c>)
 8001340:	699b      	ldr	r3, [r3, #24]
 8001342:	f003 0301 	and.w	r3, r3, #1
 8001346:	60bb      	str	r3, [r7, #8]
 8001348:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800134a:	4b0f      	ldr	r3, [pc, #60]	; (8001388 <HAL_MspInit+0x5c>)
 800134c:	69db      	ldr	r3, [r3, #28]
 800134e:	4a0e      	ldr	r2, [pc, #56]	; (8001388 <HAL_MspInit+0x5c>)
 8001350:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001354:	61d3      	str	r3, [r2, #28]
 8001356:	4b0c      	ldr	r3, [pc, #48]	; (8001388 <HAL_MspInit+0x5c>)
 8001358:	69db      	ldr	r3, [r3, #28]
 800135a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800135e:	607b      	str	r3, [r7, #4]
 8001360:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001362:	4b0a      	ldr	r3, [pc, #40]	; (800138c <HAL_MspInit+0x60>)
 8001364:	685b      	ldr	r3, [r3, #4]
 8001366:	60fb      	str	r3, [r7, #12]
 8001368:	68fb      	ldr	r3, [r7, #12]
 800136a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800136e:	60fb      	str	r3, [r7, #12]
 8001370:	68fb      	ldr	r3, [r7, #12]
 8001372:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001376:	60fb      	str	r3, [r7, #12]
 8001378:	4a04      	ldr	r2, [pc, #16]	; (800138c <HAL_MspInit+0x60>)
 800137a:	68fb      	ldr	r3, [r7, #12]
 800137c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800137e:	bf00      	nop
 8001380:	3714      	adds	r7, #20
 8001382:	46bd      	mov	sp, r7
 8001384:	bc80      	pop	{r7}
 8001386:	4770      	bx	lr
 8001388:	40021000 	.word	0x40021000
 800138c:	40010000 	.word	0x40010000

08001390 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	b08a      	sub	sp, #40	; 0x28
 8001394:	af00      	add	r7, sp, #0
 8001396:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001398:	f107 0318 	add.w	r3, r7, #24
 800139c:	2200      	movs	r2, #0
 800139e:	601a      	str	r2, [r3, #0]
 80013a0:	605a      	str	r2, [r3, #4]
 80013a2:	609a      	str	r2, [r3, #8]
 80013a4:	60da      	str	r2, [r3, #12]
  if(htim_base->Instance==TIM2)
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80013ae:	d12c      	bne.n	800140a <HAL_TIM_Base_MspInit+0x7a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80013b0:	4b24      	ldr	r3, [pc, #144]	; (8001444 <HAL_TIM_Base_MspInit+0xb4>)
 80013b2:	69db      	ldr	r3, [r3, #28]
 80013b4:	4a23      	ldr	r2, [pc, #140]	; (8001444 <HAL_TIM_Base_MspInit+0xb4>)
 80013b6:	f043 0301 	orr.w	r3, r3, #1
 80013ba:	61d3      	str	r3, [r2, #28]
 80013bc:	4b21      	ldr	r3, [pc, #132]	; (8001444 <HAL_TIM_Base_MspInit+0xb4>)
 80013be:	69db      	ldr	r3, [r3, #28]
 80013c0:	f003 0301 	and.w	r3, r3, #1
 80013c4:	617b      	str	r3, [r7, #20]
 80013c6:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013c8:	4b1e      	ldr	r3, [pc, #120]	; (8001444 <HAL_TIM_Base_MspInit+0xb4>)
 80013ca:	699b      	ldr	r3, [r3, #24]
 80013cc:	4a1d      	ldr	r2, [pc, #116]	; (8001444 <HAL_TIM_Base_MspInit+0xb4>)
 80013ce:	f043 0304 	orr.w	r3, r3, #4
 80013d2:	6193      	str	r3, [r2, #24]
 80013d4:	4b1b      	ldr	r3, [pc, #108]	; (8001444 <HAL_TIM_Base_MspInit+0xb4>)
 80013d6:	699b      	ldr	r3, [r3, #24]
 80013d8:	f003 0304 	and.w	r3, r3, #4
 80013dc:	613b      	str	r3, [r7, #16]
 80013de:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA2     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80013e0:	2304      	movs	r3, #4
 80013e2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80013e4:	2300      	movs	r3, #0
 80013e6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013e8:	2300      	movs	r3, #0
 80013ea:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013ec:	f107 0318 	add.w	r3, r7, #24
 80013f0:	4619      	mov	r1, r3
 80013f2:	4815      	ldr	r0, [pc, #84]	; (8001448 <HAL_TIM_Base_MspInit+0xb8>)
 80013f4:	f000 faf4 	bl	80019e0 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80013f8:	2200      	movs	r2, #0
 80013fa:	2100      	movs	r1, #0
 80013fc:	201c      	movs	r0, #28
 80013fe:	f000 fab8 	bl	8001972 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001402:	201c      	movs	r0, #28
 8001404:	f000 fad1 	bl	80019aa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001408:	e018      	b.n	800143c <HAL_TIM_Base_MspInit+0xac>
  else if(htim_base->Instance==TIM3)
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	4a0f      	ldr	r2, [pc, #60]	; (800144c <HAL_TIM_Base_MspInit+0xbc>)
 8001410:	4293      	cmp	r3, r2
 8001412:	d113      	bne.n	800143c <HAL_TIM_Base_MspInit+0xac>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001414:	4b0b      	ldr	r3, [pc, #44]	; (8001444 <HAL_TIM_Base_MspInit+0xb4>)
 8001416:	69db      	ldr	r3, [r3, #28]
 8001418:	4a0a      	ldr	r2, [pc, #40]	; (8001444 <HAL_TIM_Base_MspInit+0xb4>)
 800141a:	f043 0302 	orr.w	r3, r3, #2
 800141e:	61d3      	str	r3, [r2, #28]
 8001420:	4b08      	ldr	r3, [pc, #32]	; (8001444 <HAL_TIM_Base_MspInit+0xb4>)
 8001422:	69db      	ldr	r3, [r3, #28]
 8001424:	f003 0302 	and.w	r3, r3, #2
 8001428:	60fb      	str	r3, [r7, #12]
 800142a:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800142c:	2200      	movs	r2, #0
 800142e:	2100      	movs	r1, #0
 8001430:	201d      	movs	r0, #29
 8001432:	f000 fa9e 	bl	8001972 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001436:	201d      	movs	r0, #29
 8001438:	f000 fab7 	bl	80019aa <HAL_NVIC_EnableIRQ>
}
 800143c:	bf00      	nop
 800143e:	3728      	adds	r7, #40	; 0x28
 8001440:	46bd      	mov	sp, r7
 8001442:	bd80      	pop	{r7, pc}
 8001444:	40021000 	.word	0x40021000
 8001448:	40010800 	.word	0x40010800
 800144c:	40000400 	.word	0x40000400

08001450 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001450:	b480      	push	{r7}
 8001452:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001454:	e7fe      	b.n	8001454 <NMI_Handler+0x4>

08001456 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001456:	b480      	push	{r7}
 8001458:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800145a:	e7fe      	b.n	800145a <HardFault_Handler+0x4>

0800145c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800145c:	b480      	push	{r7}
 800145e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001460:	e7fe      	b.n	8001460 <MemManage_Handler+0x4>

08001462 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001462:	b480      	push	{r7}
 8001464:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001466:	e7fe      	b.n	8001466 <BusFault_Handler+0x4>

08001468 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001468:	b480      	push	{r7}
 800146a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800146c:	e7fe      	b.n	800146c <UsageFault_Handler+0x4>

0800146e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800146e:	b480      	push	{r7}
 8001470:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001472:	bf00      	nop
 8001474:	46bd      	mov	sp, r7
 8001476:	bc80      	pop	{r7}
 8001478:	4770      	bx	lr

0800147a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800147a:	b480      	push	{r7}
 800147c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800147e:	bf00      	nop
 8001480:	46bd      	mov	sp, r7
 8001482:	bc80      	pop	{r7}
 8001484:	4770      	bx	lr

08001486 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001486:	b480      	push	{r7}
 8001488:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800148a:	bf00      	nop
 800148c:	46bd      	mov	sp, r7
 800148e:	bc80      	pop	{r7}
 8001490:	4770      	bx	lr

08001492 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001492:	b580      	push	{r7, lr}
 8001494:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001496:	f000 f979 	bl	800178c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800149a:	bf00      	nop
 800149c:	bd80      	pop	{r7, pc}
	...

080014a0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80014a4:	4802      	ldr	r0, [pc, #8]	; (80014b0 <TIM2_IRQHandler+0x10>)
 80014a6:	f001 fa25 	bl	80028f4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80014aa:	bf00      	nop
 80014ac:	bd80      	pop	{r7, pc}
 80014ae:	bf00      	nop
 80014b0:	20000214 	.word	0x20000214

080014b4 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80014b8:	4802      	ldr	r0, [pc, #8]	; (80014c4 <TIM3_IRQHandler+0x10>)
 80014ba:	f001 fa1b 	bl	80028f4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80014be:	bf00      	nop
 80014c0:	bd80      	pop	{r7, pc}
 80014c2:	bf00      	nop
 80014c4:	2000025c 	.word	0x2000025c

080014c8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80014c8:	b480      	push	{r7}
 80014ca:	af00      	add	r7, sp, #0
  return 1;
 80014cc:	2301      	movs	r3, #1
}
 80014ce:	4618      	mov	r0, r3
 80014d0:	46bd      	mov	sp, r7
 80014d2:	bc80      	pop	{r7}
 80014d4:	4770      	bx	lr

080014d6 <_kill>:

int _kill(int pid, int sig)
{
 80014d6:	b580      	push	{r7, lr}
 80014d8:	b082      	sub	sp, #8
 80014da:	af00      	add	r7, sp, #0
 80014dc:	6078      	str	r0, [r7, #4]
 80014de:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80014e0:	f001 ff6e 	bl	80033c0 <__errno>
 80014e4:	4603      	mov	r3, r0
 80014e6:	2216      	movs	r2, #22
 80014e8:	601a      	str	r2, [r3, #0]
  return -1;
 80014ea:	f04f 33ff 	mov.w	r3, #4294967295
}
 80014ee:	4618      	mov	r0, r3
 80014f0:	3708      	adds	r7, #8
 80014f2:	46bd      	mov	sp, r7
 80014f4:	bd80      	pop	{r7, pc}

080014f6 <_exit>:

void _exit (int status)
{
 80014f6:	b580      	push	{r7, lr}
 80014f8:	b082      	sub	sp, #8
 80014fa:	af00      	add	r7, sp, #0
 80014fc:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80014fe:	f04f 31ff 	mov.w	r1, #4294967295
 8001502:	6878      	ldr	r0, [r7, #4]
 8001504:	f7ff ffe7 	bl	80014d6 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001508:	e7fe      	b.n	8001508 <_exit+0x12>

0800150a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800150a:	b580      	push	{r7, lr}
 800150c:	b086      	sub	sp, #24
 800150e:	af00      	add	r7, sp, #0
 8001510:	60f8      	str	r0, [r7, #12]
 8001512:	60b9      	str	r1, [r7, #8]
 8001514:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001516:	2300      	movs	r3, #0
 8001518:	617b      	str	r3, [r7, #20]
 800151a:	e00a      	b.n	8001532 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800151c:	f3af 8000 	nop.w
 8001520:	4601      	mov	r1, r0
 8001522:	68bb      	ldr	r3, [r7, #8]
 8001524:	1c5a      	adds	r2, r3, #1
 8001526:	60ba      	str	r2, [r7, #8]
 8001528:	b2ca      	uxtb	r2, r1
 800152a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800152c:	697b      	ldr	r3, [r7, #20]
 800152e:	3301      	adds	r3, #1
 8001530:	617b      	str	r3, [r7, #20]
 8001532:	697a      	ldr	r2, [r7, #20]
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	429a      	cmp	r2, r3
 8001538:	dbf0      	blt.n	800151c <_read+0x12>
  }

  return len;
 800153a:	687b      	ldr	r3, [r7, #4]
}
 800153c:	4618      	mov	r0, r3
 800153e:	3718      	adds	r7, #24
 8001540:	46bd      	mov	sp, r7
 8001542:	bd80      	pop	{r7, pc}

08001544 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001544:	b580      	push	{r7, lr}
 8001546:	b086      	sub	sp, #24
 8001548:	af00      	add	r7, sp, #0
 800154a:	60f8      	str	r0, [r7, #12]
 800154c:	60b9      	str	r1, [r7, #8]
 800154e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001550:	2300      	movs	r3, #0
 8001552:	617b      	str	r3, [r7, #20]
 8001554:	e009      	b.n	800156a <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001556:	68bb      	ldr	r3, [r7, #8]
 8001558:	1c5a      	adds	r2, r3, #1
 800155a:	60ba      	str	r2, [r7, #8]
 800155c:	781b      	ldrb	r3, [r3, #0]
 800155e:	4618      	mov	r0, r3
 8001560:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001564:	697b      	ldr	r3, [r7, #20]
 8001566:	3301      	adds	r3, #1
 8001568:	617b      	str	r3, [r7, #20]
 800156a:	697a      	ldr	r2, [r7, #20]
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	429a      	cmp	r2, r3
 8001570:	dbf1      	blt.n	8001556 <_write+0x12>
  }
  return len;
 8001572:	687b      	ldr	r3, [r7, #4]
}
 8001574:	4618      	mov	r0, r3
 8001576:	3718      	adds	r7, #24
 8001578:	46bd      	mov	sp, r7
 800157a:	bd80      	pop	{r7, pc}

0800157c <_close>:

int _close(int file)
{
 800157c:	b480      	push	{r7}
 800157e:	b083      	sub	sp, #12
 8001580:	af00      	add	r7, sp, #0
 8001582:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001584:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001588:	4618      	mov	r0, r3
 800158a:	370c      	adds	r7, #12
 800158c:	46bd      	mov	sp, r7
 800158e:	bc80      	pop	{r7}
 8001590:	4770      	bx	lr

08001592 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001592:	b480      	push	{r7}
 8001594:	b083      	sub	sp, #12
 8001596:	af00      	add	r7, sp, #0
 8001598:	6078      	str	r0, [r7, #4]
 800159a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800159c:	683b      	ldr	r3, [r7, #0]
 800159e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80015a2:	605a      	str	r2, [r3, #4]
  return 0;
 80015a4:	2300      	movs	r3, #0
}
 80015a6:	4618      	mov	r0, r3
 80015a8:	370c      	adds	r7, #12
 80015aa:	46bd      	mov	sp, r7
 80015ac:	bc80      	pop	{r7}
 80015ae:	4770      	bx	lr

080015b0 <_isatty>:

int _isatty(int file)
{
 80015b0:	b480      	push	{r7}
 80015b2:	b083      	sub	sp, #12
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80015b8:	2301      	movs	r3, #1
}
 80015ba:	4618      	mov	r0, r3
 80015bc:	370c      	adds	r7, #12
 80015be:	46bd      	mov	sp, r7
 80015c0:	bc80      	pop	{r7}
 80015c2:	4770      	bx	lr

080015c4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80015c4:	b480      	push	{r7}
 80015c6:	b085      	sub	sp, #20
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	60f8      	str	r0, [r7, #12]
 80015cc:	60b9      	str	r1, [r7, #8]
 80015ce:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80015d0:	2300      	movs	r3, #0
}
 80015d2:	4618      	mov	r0, r3
 80015d4:	3714      	adds	r7, #20
 80015d6:	46bd      	mov	sp, r7
 80015d8:	bc80      	pop	{r7}
 80015da:	4770      	bx	lr

080015dc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	b086      	sub	sp, #24
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80015e4:	4a14      	ldr	r2, [pc, #80]	; (8001638 <_sbrk+0x5c>)
 80015e6:	4b15      	ldr	r3, [pc, #84]	; (800163c <_sbrk+0x60>)
 80015e8:	1ad3      	subs	r3, r2, r3
 80015ea:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80015ec:	697b      	ldr	r3, [r7, #20]
 80015ee:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80015f0:	4b13      	ldr	r3, [pc, #76]	; (8001640 <_sbrk+0x64>)
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d102      	bne.n	80015fe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80015f8:	4b11      	ldr	r3, [pc, #68]	; (8001640 <_sbrk+0x64>)
 80015fa:	4a12      	ldr	r2, [pc, #72]	; (8001644 <_sbrk+0x68>)
 80015fc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80015fe:	4b10      	ldr	r3, [pc, #64]	; (8001640 <_sbrk+0x64>)
 8001600:	681a      	ldr	r2, [r3, #0]
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	4413      	add	r3, r2
 8001606:	693a      	ldr	r2, [r7, #16]
 8001608:	429a      	cmp	r2, r3
 800160a:	d207      	bcs.n	800161c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800160c:	f001 fed8 	bl	80033c0 <__errno>
 8001610:	4603      	mov	r3, r0
 8001612:	220c      	movs	r2, #12
 8001614:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001616:	f04f 33ff 	mov.w	r3, #4294967295
 800161a:	e009      	b.n	8001630 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800161c:	4b08      	ldr	r3, [pc, #32]	; (8001640 <_sbrk+0x64>)
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001622:	4b07      	ldr	r3, [pc, #28]	; (8001640 <_sbrk+0x64>)
 8001624:	681a      	ldr	r2, [r3, #0]
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	4413      	add	r3, r2
 800162a:	4a05      	ldr	r2, [pc, #20]	; (8001640 <_sbrk+0x64>)
 800162c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800162e:	68fb      	ldr	r3, [r7, #12]
}
 8001630:	4618      	mov	r0, r3
 8001632:	3718      	adds	r7, #24
 8001634:	46bd      	mov	sp, r7
 8001636:	bd80      	pop	{r7, pc}
 8001638:	20005000 	.word	0x20005000
 800163c:	00000400 	.word	0x00000400
 8001640:	200002a4 	.word	0x200002a4
 8001644:	200002c0 	.word	0x200002c0

08001648 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001648:	b480      	push	{r7}
 800164a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800164c:	bf00      	nop
 800164e:	46bd      	mov	sp, r7
 8001650:	bc80      	pop	{r7}
 8001652:	4770      	bx	lr

08001654 <DWT_Delay_Init>:

#include "DWT_Delay.h"


uint32_t DWT_Delay_Init(void)
{
 8001654:	b480      	push	{r7}
 8001656:	af00      	add	r7, sp, #0
    /* Disable TRC */
    CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk; // ~0x01000000;
 8001658:	4b14      	ldr	r3, [pc, #80]	; (80016ac <DWT_Delay_Init+0x58>)
 800165a:	68db      	ldr	r3, [r3, #12]
 800165c:	4a13      	ldr	r2, [pc, #76]	; (80016ac <DWT_Delay_Init+0x58>)
 800165e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001662:	60d3      	str	r3, [r2, #12]
    /* Enable TRC */
    CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk; // 0x01000000;
 8001664:	4b11      	ldr	r3, [pc, #68]	; (80016ac <DWT_Delay_Init+0x58>)
 8001666:	68db      	ldr	r3, [r3, #12]
 8001668:	4a10      	ldr	r2, [pc, #64]	; (80016ac <DWT_Delay_Init+0x58>)
 800166a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800166e:	60d3      	str	r3, [r2, #12]

    /* Disable clock cycle counter */
    DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 8001670:	4b0f      	ldr	r3, [pc, #60]	; (80016b0 <DWT_Delay_Init+0x5c>)
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	4a0e      	ldr	r2, [pc, #56]	; (80016b0 <DWT_Delay_Init+0x5c>)
 8001676:	f023 0301 	bic.w	r3, r3, #1
 800167a:	6013      	str	r3, [r2, #0]
    /* Enable  clock cycle counter */
    DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 800167c:	4b0c      	ldr	r3, [pc, #48]	; (80016b0 <DWT_Delay_Init+0x5c>)
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	4a0b      	ldr	r2, [pc, #44]	; (80016b0 <DWT_Delay_Init+0x5c>)
 8001682:	f043 0301 	orr.w	r3, r3, #1
 8001686:	6013      	str	r3, [r2, #0]

    /* Reset the clock cycle counter value */
    DWT->CYCCNT = 0;
 8001688:	4b09      	ldr	r3, [pc, #36]	; (80016b0 <DWT_Delay_Init+0x5c>)
 800168a:	2200      	movs	r2, #0
 800168c:	605a      	str	r2, [r3, #4]

    /* 3 NO OPERATION instructions */
    __ASM volatile ("NOP");
 800168e:	bf00      	nop
    __ASM volatile ("NOP");
 8001690:	bf00      	nop
    __ASM volatile ("NOP");
 8001692:	bf00      	nop

    /* Check if clock cycle counter has started */
    if(DWT->CYCCNT)
 8001694:	4b06      	ldr	r3, [pc, #24]	; (80016b0 <DWT_Delay_Init+0x5c>)
 8001696:	685b      	ldr	r3, [r3, #4]
 8001698:	2b00      	cmp	r3, #0
 800169a:	d001      	beq.n	80016a0 <DWT_Delay_Init+0x4c>
    {
       return 0; /*clock cycle counter started*/
 800169c:	2300      	movs	r3, #0
 800169e:	e000      	b.n	80016a2 <DWT_Delay_Init+0x4e>
    }
    else
    {
      return 1; /*clock cycle counter not started*/
 80016a0:	2301      	movs	r3, #1
    }
}
 80016a2:	4618      	mov	r0, r3
 80016a4:	46bd      	mov	sp, r7
 80016a6:	bc80      	pop	{r7}
 80016a8:	4770      	bx	lr
 80016aa:	bf00      	nop
 80016ac:	e000edf0 	.word	0xe000edf0
 80016b0:	e0001000 	.word	0xe0001000

080016b4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80016b4:	f7ff ffc8 	bl	8001648 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80016b8:	480b      	ldr	r0, [pc, #44]	; (80016e8 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80016ba:	490c      	ldr	r1, [pc, #48]	; (80016ec <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80016bc:	4a0c      	ldr	r2, [pc, #48]	; (80016f0 <LoopFillZerobss+0x16>)
  movs r3, #0
 80016be:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80016c0:	e002      	b.n	80016c8 <LoopCopyDataInit>

080016c2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80016c2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80016c4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80016c6:	3304      	adds	r3, #4

080016c8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80016c8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80016ca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80016cc:	d3f9      	bcc.n	80016c2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80016ce:	4a09      	ldr	r2, [pc, #36]	; (80016f4 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80016d0:	4c09      	ldr	r4, [pc, #36]	; (80016f8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80016d2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80016d4:	e001      	b.n	80016da <LoopFillZerobss>

080016d6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80016d6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80016d8:	3204      	adds	r2, #4

080016da <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80016da:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80016dc:	d3fb      	bcc.n	80016d6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80016de:	f001 fe75 	bl	80033cc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80016e2:	f7ff fbcd 	bl	8000e80 <main>
  bx lr
 80016e6:	4770      	bx	lr
  ldr r0, =_sdata
 80016e8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80016ec:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 80016f0:	0800625c 	.word	0x0800625c
  ldr r2, =_sbss
 80016f4:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 80016f8:	200002bc 	.word	0x200002bc

080016fc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80016fc:	e7fe      	b.n	80016fc <ADC1_2_IRQHandler>
	...

08001700 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001700:	b580      	push	{r7, lr}
 8001702:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001704:	4b08      	ldr	r3, [pc, #32]	; (8001728 <HAL_Init+0x28>)
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	4a07      	ldr	r2, [pc, #28]	; (8001728 <HAL_Init+0x28>)
 800170a:	f043 0310 	orr.w	r3, r3, #16
 800170e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001710:	2003      	movs	r0, #3
 8001712:	f000 f923 	bl	800195c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001716:	200f      	movs	r0, #15
 8001718:	f000 f808 	bl	800172c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800171c:	f7ff fe06 	bl	800132c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001720:	2300      	movs	r3, #0
}
 8001722:	4618      	mov	r0, r3
 8001724:	bd80      	pop	{r7, pc}
 8001726:	bf00      	nop
 8001728:	40022000 	.word	0x40022000

0800172c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800172c:	b580      	push	{r7, lr}
 800172e:	b082      	sub	sp, #8
 8001730:	af00      	add	r7, sp, #0
 8001732:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001734:	4b12      	ldr	r3, [pc, #72]	; (8001780 <HAL_InitTick+0x54>)
 8001736:	681a      	ldr	r2, [r3, #0]
 8001738:	4b12      	ldr	r3, [pc, #72]	; (8001784 <HAL_InitTick+0x58>)
 800173a:	781b      	ldrb	r3, [r3, #0]
 800173c:	4619      	mov	r1, r3
 800173e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001742:	fbb3 f3f1 	udiv	r3, r3, r1
 8001746:	fbb2 f3f3 	udiv	r3, r2, r3
 800174a:	4618      	mov	r0, r3
 800174c:	f000 f93b 	bl	80019c6 <HAL_SYSTICK_Config>
 8001750:	4603      	mov	r3, r0
 8001752:	2b00      	cmp	r3, #0
 8001754:	d001      	beq.n	800175a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001756:	2301      	movs	r3, #1
 8001758:	e00e      	b.n	8001778 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	2b0f      	cmp	r3, #15
 800175e:	d80a      	bhi.n	8001776 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001760:	2200      	movs	r2, #0
 8001762:	6879      	ldr	r1, [r7, #4]
 8001764:	f04f 30ff 	mov.w	r0, #4294967295
 8001768:	f000 f903 	bl	8001972 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800176c:	4a06      	ldr	r2, [pc, #24]	; (8001788 <HAL_InitTick+0x5c>)
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001772:	2300      	movs	r3, #0
 8001774:	e000      	b.n	8001778 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001776:	2301      	movs	r3, #1
}
 8001778:	4618      	mov	r0, r3
 800177a:	3708      	adds	r7, #8
 800177c:	46bd      	mov	sp, r7
 800177e:	bd80      	pop	{r7, pc}
 8001780:	20000000 	.word	0x20000000
 8001784:	20000008 	.word	0x20000008
 8001788:	20000004 	.word	0x20000004

0800178c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800178c:	b480      	push	{r7}
 800178e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001790:	4b05      	ldr	r3, [pc, #20]	; (80017a8 <HAL_IncTick+0x1c>)
 8001792:	781b      	ldrb	r3, [r3, #0]
 8001794:	461a      	mov	r2, r3
 8001796:	4b05      	ldr	r3, [pc, #20]	; (80017ac <HAL_IncTick+0x20>)
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	4413      	add	r3, r2
 800179c:	4a03      	ldr	r2, [pc, #12]	; (80017ac <HAL_IncTick+0x20>)
 800179e:	6013      	str	r3, [r2, #0]
}
 80017a0:	bf00      	nop
 80017a2:	46bd      	mov	sp, r7
 80017a4:	bc80      	pop	{r7}
 80017a6:	4770      	bx	lr
 80017a8:	20000008 	.word	0x20000008
 80017ac:	200002a8 	.word	0x200002a8

080017b0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80017b0:	b480      	push	{r7}
 80017b2:	af00      	add	r7, sp, #0
  return uwTick;
 80017b4:	4b02      	ldr	r3, [pc, #8]	; (80017c0 <HAL_GetTick+0x10>)
 80017b6:	681b      	ldr	r3, [r3, #0]
}
 80017b8:	4618      	mov	r0, r3
 80017ba:	46bd      	mov	sp, r7
 80017bc:	bc80      	pop	{r7}
 80017be:	4770      	bx	lr
 80017c0:	200002a8 	.word	0x200002a8

080017c4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017c4:	b480      	push	{r7}
 80017c6:	b085      	sub	sp, #20
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	f003 0307 	and.w	r3, r3, #7
 80017d2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80017d4:	4b0c      	ldr	r3, [pc, #48]	; (8001808 <__NVIC_SetPriorityGrouping+0x44>)
 80017d6:	68db      	ldr	r3, [r3, #12]
 80017d8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80017da:	68ba      	ldr	r2, [r7, #8]
 80017dc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80017e0:	4013      	ands	r3, r2
 80017e2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80017e4:	68fb      	ldr	r3, [r7, #12]
 80017e6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80017e8:	68bb      	ldr	r3, [r7, #8]
 80017ea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80017ec:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80017f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80017f4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80017f6:	4a04      	ldr	r2, [pc, #16]	; (8001808 <__NVIC_SetPriorityGrouping+0x44>)
 80017f8:	68bb      	ldr	r3, [r7, #8]
 80017fa:	60d3      	str	r3, [r2, #12]
}
 80017fc:	bf00      	nop
 80017fe:	3714      	adds	r7, #20
 8001800:	46bd      	mov	sp, r7
 8001802:	bc80      	pop	{r7}
 8001804:	4770      	bx	lr
 8001806:	bf00      	nop
 8001808:	e000ed00 	.word	0xe000ed00

0800180c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800180c:	b480      	push	{r7}
 800180e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001810:	4b04      	ldr	r3, [pc, #16]	; (8001824 <__NVIC_GetPriorityGrouping+0x18>)
 8001812:	68db      	ldr	r3, [r3, #12]
 8001814:	0a1b      	lsrs	r3, r3, #8
 8001816:	f003 0307 	and.w	r3, r3, #7
}
 800181a:	4618      	mov	r0, r3
 800181c:	46bd      	mov	sp, r7
 800181e:	bc80      	pop	{r7}
 8001820:	4770      	bx	lr
 8001822:	bf00      	nop
 8001824:	e000ed00 	.word	0xe000ed00

08001828 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001828:	b480      	push	{r7}
 800182a:	b083      	sub	sp, #12
 800182c:	af00      	add	r7, sp, #0
 800182e:	4603      	mov	r3, r0
 8001830:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001832:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001836:	2b00      	cmp	r3, #0
 8001838:	db0b      	blt.n	8001852 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800183a:	79fb      	ldrb	r3, [r7, #7]
 800183c:	f003 021f 	and.w	r2, r3, #31
 8001840:	4906      	ldr	r1, [pc, #24]	; (800185c <__NVIC_EnableIRQ+0x34>)
 8001842:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001846:	095b      	lsrs	r3, r3, #5
 8001848:	2001      	movs	r0, #1
 800184a:	fa00 f202 	lsl.w	r2, r0, r2
 800184e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001852:	bf00      	nop
 8001854:	370c      	adds	r7, #12
 8001856:	46bd      	mov	sp, r7
 8001858:	bc80      	pop	{r7}
 800185a:	4770      	bx	lr
 800185c:	e000e100 	.word	0xe000e100

08001860 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001860:	b480      	push	{r7}
 8001862:	b083      	sub	sp, #12
 8001864:	af00      	add	r7, sp, #0
 8001866:	4603      	mov	r3, r0
 8001868:	6039      	str	r1, [r7, #0]
 800186a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800186c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001870:	2b00      	cmp	r3, #0
 8001872:	db0a      	blt.n	800188a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001874:	683b      	ldr	r3, [r7, #0]
 8001876:	b2da      	uxtb	r2, r3
 8001878:	490c      	ldr	r1, [pc, #48]	; (80018ac <__NVIC_SetPriority+0x4c>)
 800187a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800187e:	0112      	lsls	r2, r2, #4
 8001880:	b2d2      	uxtb	r2, r2
 8001882:	440b      	add	r3, r1
 8001884:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001888:	e00a      	b.n	80018a0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800188a:	683b      	ldr	r3, [r7, #0]
 800188c:	b2da      	uxtb	r2, r3
 800188e:	4908      	ldr	r1, [pc, #32]	; (80018b0 <__NVIC_SetPriority+0x50>)
 8001890:	79fb      	ldrb	r3, [r7, #7]
 8001892:	f003 030f 	and.w	r3, r3, #15
 8001896:	3b04      	subs	r3, #4
 8001898:	0112      	lsls	r2, r2, #4
 800189a:	b2d2      	uxtb	r2, r2
 800189c:	440b      	add	r3, r1
 800189e:	761a      	strb	r2, [r3, #24]
}
 80018a0:	bf00      	nop
 80018a2:	370c      	adds	r7, #12
 80018a4:	46bd      	mov	sp, r7
 80018a6:	bc80      	pop	{r7}
 80018a8:	4770      	bx	lr
 80018aa:	bf00      	nop
 80018ac:	e000e100 	.word	0xe000e100
 80018b0:	e000ed00 	.word	0xe000ed00

080018b4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80018b4:	b480      	push	{r7}
 80018b6:	b089      	sub	sp, #36	; 0x24
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	60f8      	str	r0, [r7, #12]
 80018bc:	60b9      	str	r1, [r7, #8]
 80018be:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	f003 0307 	and.w	r3, r3, #7
 80018c6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80018c8:	69fb      	ldr	r3, [r7, #28]
 80018ca:	f1c3 0307 	rsb	r3, r3, #7
 80018ce:	2b04      	cmp	r3, #4
 80018d0:	bf28      	it	cs
 80018d2:	2304      	movcs	r3, #4
 80018d4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80018d6:	69fb      	ldr	r3, [r7, #28]
 80018d8:	3304      	adds	r3, #4
 80018da:	2b06      	cmp	r3, #6
 80018dc:	d902      	bls.n	80018e4 <NVIC_EncodePriority+0x30>
 80018de:	69fb      	ldr	r3, [r7, #28]
 80018e0:	3b03      	subs	r3, #3
 80018e2:	e000      	b.n	80018e6 <NVIC_EncodePriority+0x32>
 80018e4:	2300      	movs	r3, #0
 80018e6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018e8:	f04f 32ff 	mov.w	r2, #4294967295
 80018ec:	69bb      	ldr	r3, [r7, #24]
 80018ee:	fa02 f303 	lsl.w	r3, r2, r3
 80018f2:	43da      	mvns	r2, r3
 80018f4:	68bb      	ldr	r3, [r7, #8]
 80018f6:	401a      	ands	r2, r3
 80018f8:	697b      	ldr	r3, [r7, #20]
 80018fa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80018fc:	f04f 31ff 	mov.w	r1, #4294967295
 8001900:	697b      	ldr	r3, [r7, #20]
 8001902:	fa01 f303 	lsl.w	r3, r1, r3
 8001906:	43d9      	mvns	r1, r3
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800190c:	4313      	orrs	r3, r2
         );
}
 800190e:	4618      	mov	r0, r3
 8001910:	3724      	adds	r7, #36	; 0x24
 8001912:	46bd      	mov	sp, r7
 8001914:	bc80      	pop	{r7}
 8001916:	4770      	bx	lr

08001918 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001918:	b580      	push	{r7, lr}
 800191a:	b082      	sub	sp, #8
 800191c:	af00      	add	r7, sp, #0
 800191e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	3b01      	subs	r3, #1
 8001924:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001928:	d301      	bcc.n	800192e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800192a:	2301      	movs	r3, #1
 800192c:	e00f      	b.n	800194e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800192e:	4a0a      	ldr	r2, [pc, #40]	; (8001958 <SysTick_Config+0x40>)
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	3b01      	subs	r3, #1
 8001934:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001936:	210f      	movs	r1, #15
 8001938:	f04f 30ff 	mov.w	r0, #4294967295
 800193c:	f7ff ff90 	bl	8001860 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001940:	4b05      	ldr	r3, [pc, #20]	; (8001958 <SysTick_Config+0x40>)
 8001942:	2200      	movs	r2, #0
 8001944:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001946:	4b04      	ldr	r3, [pc, #16]	; (8001958 <SysTick_Config+0x40>)
 8001948:	2207      	movs	r2, #7
 800194a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800194c:	2300      	movs	r3, #0
}
 800194e:	4618      	mov	r0, r3
 8001950:	3708      	adds	r7, #8
 8001952:	46bd      	mov	sp, r7
 8001954:	bd80      	pop	{r7, pc}
 8001956:	bf00      	nop
 8001958:	e000e010 	.word	0xe000e010

0800195c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800195c:	b580      	push	{r7, lr}
 800195e:	b082      	sub	sp, #8
 8001960:	af00      	add	r7, sp, #0
 8001962:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001964:	6878      	ldr	r0, [r7, #4]
 8001966:	f7ff ff2d 	bl	80017c4 <__NVIC_SetPriorityGrouping>
}
 800196a:	bf00      	nop
 800196c:	3708      	adds	r7, #8
 800196e:	46bd      	mov	sp, r7
 8001970:	bd80      	pop	{r7, pc}

08001972 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001972:	b580      	push	{r7, lr}
 8001974:	b086      	sub	sp, #24
 8001976:	af00      	add	r7, sp, #0
 8001978:	4603      	mov	r3, r0
 800197a:	60b9      	str	r1, [r7, #8]
 800197c:	607a      	str	r2, [r7, #4]
 800197e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001980:	2300      	movs	r3, #0
 8001982:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001984:	f7ff ff42 	bl	800180c <__NVIC_GetPriorityGrouping>
 8001988:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800198a:	687a      	ldr	r2, [r7, #4]
 800198c:	68b9      	ldr	r1, [r7, #8]
 800198e:	6978      	ldr	r0, [r7, #20]
 8001990:	f7ff ff90 	bl	80018b4 <NVIC_EncodePriority>
 8001994:	4602      	mov	r2, r0
 8001996:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800199a:	4611      	mov	r1, r2
 800199c:	4618      	mov	r0, r3
 800199e:	f7ff ff5f 	bl	8001860 <__NVIC_SetPriority>
}
 80019a2:	bf00      	nop
 80019a4:	3718      	adds	r7, #24
 80019a6:	46bd      	mov	sp, r7
 80019a8:	bd80      	pop	{r7, pc}

080019aa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019aa:	b580      	push	{r7, lr}
 80019ac:	b082      	sub	sp, #8
 80019ae:	af00      	add	r7, sp, #0
 80019b0:	4603      	mov	r3, r0
 80019b2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80019b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019b8:	4618      	mov	r0, r3
 80019ba:	f7ff ff35 	bl	8001828 <__NVIC_EnableIRQ>
}
 80019be:	bf00      	nop
 80019c0:	3708      	adds	r7, #8
 80019c2:	46bd      	mov	sp, r7
 80019c4:	bd80      	pop	{r7, pc}

080019c6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80019c6:	b580      	push	{r7, lr}
 80019c8:	b082      	sub	sp, #8
 80019ca:	af00      	add	r7, sp, #0
 80019cc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80019ce:	6878      	ldr	r0, [r7, #4]
 80019d0:	f7ff ffa2 	bl	8001918 <SysTick_Config>
 80019d4:	4603      	mov	r3, r0
}
 80019d6:	4618      	mov	r0, r3
 80019d8:	3708      	adds	r7, #8
 80019da:	46bd      	mov	sp, r7
 80019dc:	bd80      	pop	{r7, pc}
	...

080019e0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80019e0:	b480      	push	{r7}
 80019e2:	b08b      	sub	sp, #44	; 0x2c
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	6078      	str	r0, [r7, #4]
 80019e8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80019ea:	2300      	movs	r3, #0
 80019ec:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80019ee:	2300      	movs	r3, #0
 80019f0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80019f2:	e169      	b.n	8001cc8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80019f4:	2201      	movs	r2, #1
 80019f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019f8:	fa02 f303 	lsl.w	r3, r2, r3
 80019fc:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80019fe:	683b      	ldr	r3, [r7, #0]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	69fa      	ldr	r2, [r7, #28]
 8001a04:	4013      	ands	r3, r2
 8001a06:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001a08:	69ba      	ldr	r2, [r7, #24]
 8001a0a:	69fb      	ldr	r3, [r7, #28]
 8001a0c:	429a      	cmp	r2, r3
 8001a0e:	f040 8158 	bne.w	8001cc2 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001a12:	683b      	ldr	r3, [r7, #0]
 8001a14:	685b      	ldr	r3, [r3, #4]
 8001a16:	4a9a      	ldr	r2, [pc, #616]	; (8001c80 <HAL_GPIO_Init+0x2a0>)
 8001a18:	4293      	cmp	r3, r2
 8001a1a:	d05e      	beq.n	8001ada <HAL_GPIO_Init+0xfa>
 8001a1c:	4a98      	ldr	r2, [pc, #608]	; (8001c80 <HAL_GPIO_Init+0x2a0>)
 8001a1e:	4293      	cmp	r3, r2
 8001a20:	d875      	bhi.n	8001b0e <HAL_GPIO_Init+0x12e>
 8001a22:	4a98      	ldr	r2, [pc, #608]	; (8001c84 <HAL_GPIO_Init+0x2a4>)
 8001a24:	4293      	cmp	r3, r2
 8001a26:	d058      	beq.n	8001ada <HAL_GPIO_Init+0xfa>
 8001a28:	4a96      	ldr	r2, [pc, #600]	; (8001c84 <HAL_GPIO_Init+0x2a4>)
 8001a2a:	4293      	cmp	r3, r2
 8001a2c:	d86f      	bhi.n	8001b0e <HAL_GPIO_Init+0x12e>
 8001a2e:	4a96      	ldr	r2, [pc, #600]	; (8001c88 <HAL_GPIO_Init+0x2a8>)
 8001a30:	4293      	cmp	r3, r2
 8001a32:	d052      	beq.n	8001ada <HAL_GPIO_Init+0xfa>
 8001a34:	4a94      	ldr	r2, [pc, #592]	; (8001c88 <HAL_GPIO_Init+0x2a8>)
 8001a36:	4293      	cmp	r3, r2
 8001a38:	d869      	bhi.n	8001b0e <HAL_GPIO_Init+0x12e>
 8001a3a:	4a94      	ldr	r2, [pc, #592]	; (8001c8c <HAL_GPIO_Init+0x2ac>)
 8001a3c:	4293      	cmp	r3, r2
 8001a3e:	d04c      	beq.n	8001ada <HAL_GPIO_Init+0xfa>
 8001a40:	4a92      	ldr	r2, [pc, #584]	; (8001c8c <HAL_GPIO_Init+0x2ac>)
 8001a42:	4293      	cmp	r3, r2
 8001a44:	d863      	bhi.n	8001b0e <HAL_GPIO_Init+0x12e>
 8001a46:	4a92      	ldr	r2, [pc, #584]	; (8001c90 <HAL_GPIO_Init+0x2b0>)
 8001a48:	4293      	cmp	r3, r2
 8001a4a:	d046      	beq.n	8001ada <HAL_GPIO_Init+0xfa>
 8001a4c:	4a90      	ldr	r2, [pc, #576]	; (8001c90 <HAL_GPIO_Init+0x2b0>)
 8001a4e:	4293      	cmp	r3, r2
 8001a50:	d85d      	bhi.n	8001b0e <HAL_GPIO_Init+0x12e>
 8001a52:	2b12      	cmp	r3, #18
 8001a54:	d82a      	bhi.n	8001aac <HAL_GPIO_Init+0xcc>
 8001a56:	2b12      	cmp	r3, #18
 8001a58:	d859      	bhi.n	8001b0e <HAL_GPIO_Init+0x12e>
 8001a5a:	a201      	add	r2, pc, #4	; (adr r2, 8001a60 <HAL_GPIO_Init+0x80>)
 8001a5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a60:	08001adb 	.word	0x08001adb
 8001a64:	08001ab5 	.word	0x08001ab5
 8001a68:	08001ac7 	.word	0x08001ac7
 8001a6c:	08001b09 	.word	0x08001b09
 8001a70:	08001b0f 	.word	0x08001b0f
 8001a74:	08001b0f 	.word	0x08001b0f
 8001a78:	08001b0f 	.word	0x08001b0f
 8001a7c:	08001b0f 	.word	0x08001b0f
 8001a80:	08001b0f 	.word	0x08001b0f
 8001a84:	08001b0f 	.word	0x08001b0f
 8001a88:	08001b0f 	.word	0x08001b0f
 8001a8c:	08001b0f 	.word	0x08001b0f
 8001a90:	08001b0f 	.word	0x08001b0f
 8001a94:	08001b0f 	.word	0x08001b0f
 8001a98:	08001b0f 	.word	0x08001b0f
 8001a9c:	08001b0f 	.word	0x08001b0f
 8001aa0:	08001b0f 	.word	0x08001b0f
 8001aa4:	08001abd 	.word	0x08001abd
 8001aa8:	08001ad1 	.word	0x08001ad1
 8001aac:	4a79      	ldr	r2, [pc, #484]	; (8001c94 <HAL_GPIO_Init+0x2b4>)
 8001aae:	4293      	cmp	r3, r2
 8001ab0:	d013      	beq.n	8001ada <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001ab2:	e02c      	b.n	8001b0e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001ab4:	683b      	ldr	r3, [r7, #0]
 8001ab6:	68db      	ldr	r3, [r3, #12]
 8001ab8:	623b      	str	r3, [r7, #32]
          break;
 8001aba:	e029      	b.n	8001b10 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001abc:	683b      	ldr	r3, [r7, #0]
 8001abe:	68db      	ldr	r3, [r3, #12]
 8001ac0:	3304      	adds	r3, #4
 8001ac2:	623b      	str	r3, [r7, #32]
          break;
 8001ac4:	e024      	b.n	8001b10 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001ac6:	683b      	ldr	r3, [r7, #0]
 8001ac8:	68db      	ldr	r3, [r3, #12]
 8001aca:	3308      	adds	r3, #8
 8001acc:	623b      	str	r3, [r7, #32]
          break;
 8001ace:	e01f      	b.n	8001b10 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001ad0:	683b      	ldr	r3, [r7, #0]
 8001ad2:	68db      	ldr	r3, [r3, #12]
 8001ad4:	330c      	adds	r3, #12
 8001ad6:	623b      	str	r3, [r7, #32]
          break;
 8001ad8:	e01a      	b.n	8001b10 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001ada:	683b      	ldr	r3, [r7, #0]
 8001adc:	689b      	ldr	r3, [r3, #8]
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d102      	bne.n	8001ae8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001ae2:	2304      	movs	r3, #4
 8001ae4:	623b      	str	r3, [r7, #32]
          break;
 8001ae6:	e013      	b.n	8001b10 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001ae8:	683b      	ldr	r3, [r7, #0]
 8001aea:	689b      	ldr	r3, [r3, #8]
 8001aec:	2b01      	cmp	r3, #1
 8001aee:	d105      	bne.n	8001afc <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001af0:	2308      	movs	r3, #8
 8001af2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	69fa      	ldr	r2, [r7, #28]
 8001af8:	611a      	str	r2, [r3, #16]
          break;
 8001afa:	e009      	b.n	8001b10 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001afc:	2308      	movs	r3, #8
 8001afe:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	69fa      	ldr	r2, [r7, #28]
 8001b04:	615a      	str	r2, [r3, #20]
          break;
 8001b06:	e003      	b.n	8001b10 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001b08:	2300      	movs	r3, #0
 8001b0a:	623b      	str	r3, [r7, #32]
          break;
 8001b0c:	e000      	b.n	8001b10 <HAL_GPIO_Init+0x130>
          break;
 8001b0e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001b10:	69bb      	ldr	r3, [r7, #24]
 8001b12:	2bff      	cmp	r3, #255	; 0xff
 8001b14:	d801      	bhi.n	8001b1a <HAL_GPIO_Init+0x13a>
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	e001      	b.n	8001b1e <HAL_GPIO_Init+0x13e>
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	3304      	adds	r3, #4
 8001b1e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001b20:	69bb      	ldr	r3, [r7, #24]
 8001b22:	2bff      	cmp	r3, #255	; 0xff
 8001b24:	d802      	bhi.n	8001b2c <HAL_GPIO_Init+0x14c>
 8001b26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b28:	009b      	lsls	r3, r3, #2
 8001b2a:	e002      	b.n	8001b32 <HAL_GPIO_Init+0x152>
 8001b2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b2e:	3b08      	subs	r3, #8
 8001b30:	009b      	lsls	r3, r3, #2
 8001b32:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001b34:	697b      	ldr	r3, [r7, #20]
 8001b36:	681a      	ldr	r2, [r3, #0]
 8001b38:	210f      	movs	r1, #15
 8001b3a:	693b      	ldr	r3, [r7, #16]
 8001b3c:	fa01 f303 	lsl.w	r3, r1, r3
 8001b40:	43db      	mvns	r3, r3
 8001b42:	401a      	ands	r2, r3
 8001b44:	6a39      	ldr	r1, [r7, #32]
 8001b46:	693b      	ldr	r3, [r7, #16]
 8001b48:	fa01 f303 	lsl.w	r3, r1, r3
 8001b4c:	431a      	orrs	r2, r3
 8001b4e:	697b      	ldr	r3, [r7, #20]
 8001b50:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001b52:	683b      	ldr	r3, [r7, #0]
 8001b54:	685b      	ldr	r3, [r3, #4]
 8001b56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	f000 80b1 	beq.w	8001cc2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001b60:	4b4d      	ldr	r3, [pc, #308]	; (8001c98 <HAL_GPIO_Init+0x2b8>)
 8001b62:	699b      	ldr	r3, [r3, #24]
 8001b64:	4a4c      	ldr	r2, [pc, #304]	; (8001c98 <HAL_GPIO_Init+0x2b8>)
 8001b66:	f043 0301 	orr.w	r3, r3, #1
 8001b6a:	6193      	str	r3, [r2, #24]
 8001b6c:	4b4a      	ldr	r3, [pc, #296]	; (8001c98 <HAL_GPIO_Init+0x2b8>)
 8001b6e:	699b      	ldr	r3, [r3, #24]
 8001b70:	f003 0301 	and.w	r3, r3, #1
 8001b74:	60bb      	str	r3, [r7, #8]
 8001b76:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001b78:	4a48      	ldr	r2, [pc, #288]	; (8001c9c <HAL_GPIO_Init+0x2bc>)
 8001b7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b7c:	089b      	lsrs	r3, r3, #2
 8001b7e:	3302      	adds	r3, #2
 8001b80:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b84:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001b86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b88:	f003 0303 	and.w	r3, r3, #3
 8001b8c:	009b      	lsls	r3, r3, #2
 8001b8e:	220f      	movs	r2, #15
 8001b90:	fa02 f303 	lsl.w	r3, r2, r3
 8001b94:	43db      	mvns	r3, r3
 8001b96:	68fa      	ldr	r2, [r7, #12]
 8001b98:	4013      	ands	r3, r2
 8001b9a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	4a40      	ldr	r2, [pc, #256]	; (8001ca0 <HAL_GPIO_Init+0x2c0>)
 8001ba0:	4293      	cmp	r3, r2
 8001ba2:	d013      	beq.n	8001bcc <HAL_GPIO_Init+0x1ec>
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	4a3f      	ldr	r2, [pc, #252]	; (8001ca4 <HAL_GPIO_Init+0x2c4>)
 8001ba8:	4293      	cmp	r3, r2
 8001baa:	d00d      	beq.n	8001bc8 <HAL_GPIO_Init+0x1e8>
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	4a3e      	ldr	r2, [pc, #248]	; (8001ca8 <HAL_GPIO_Init+0x2c8>)
 8001bb0:	4293      	cmp	r3, r2
 8001bb2:	d007      	beq.n	8001bc4 <HAL_GPIO_Init+0x1e4>
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	4a3d      	ldr	r2, [pc, #244]	; (8001cac <HAL_GPIO_Init+0x2cc>)
 8001bb8:	4293      	cmp	r3, r2
 8001bba:	d101      	bne.n	8001bc0 <HAL_GPIO_Init+0x1e0>
 8001bbc:	2303      	movs	r3, #3
 8001bbe:	e006      	b.n	8001bce <HAL_GPIO_Init+0x1ee>
 8001bc0:	2304      	movs	r3, #4
 8001bc2:	e004      	b.n	8001bce <HAL_GPIO_Init+0x1ee>
 8001bc4:	2302      	movs	r3, #2
 8001bc6:	e002      	b.n	8001bce <HAL_GPIO_Init+0x1ee>
 8001bc8:	2301      	movs	r3, #1
 8001bca:	e000      	b.n	8001bce <HAL_GPIO_Init+0x1ee>
 8001bcc:	2300      	movs	r3, #0
 8001bce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001bd0:	f002 0203 	and.w	r2, r2, #3
 8001bd4:	0092      	lsls	r2, r2, #2
 8001bd6:	4093      	lsls	r3, r2
 8001bd8:	68fa      	ldr	r2, [r7, #12]
 8001bda:	4313      	orrs	r3, r2
 8001bdc:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001bde:	492f      	ldr	r1, [pc, #188]	; (8001c9c <HAL_GPIO_Init+0x2bc>)
 8001be0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001be2:	089b      	lsrs	r3, r3, #2
 8001be4:	3302      	adds	r3, #2
 8001be6:	68fa      	ldr	r2, [r7, #12]
 8001be8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001bec:	683b      	ldr	r3, [r7, #0]
 8001bee:	685b      	ldr	r3, [r3, #4]
 8001bf0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d006      	beq.n	8001c06 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001bf8:	4b2d      	ldr	r3, [pc, #180]	; (8001cb0 <HAL_GPIO_Init+0x2d0>)
 8001bfa:	689a      	ldr	r2, [r3, #8]
 8001bfc:	492c      	ldr	r1, [pc, #176]	; (8001cb0 <HAL_GPIO_Init+0x2d0>)
 8001bfe:	69bb      	ldr	r3, [r7, #24]
 8001c00:	4313      	orrs	r3, r2
 8001c02:	608b      	str	r3, [r1, #8]
 8001c04:	e006      	b.n	8001c14 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001c06:	4b2a      	ldr	r3, [pc, #168]	; (8001cb0 <HAL_GPIO_Init+0x2d0>)
 8001c08:	689a      	ldr	r2, [r3, #8]
 8001c0a:	69bb      	ldr	r3, [r7, #24]
 8001c0c:	43db      	mvns	r3, r3
 8001c0e:	4928      	ldr	r1, [pc, #160]	; (8001cb0 <HAL_GPIO_Init+0x2d0>)
 8001c10:	4013      	ands	r3, r2
 8001c12:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001c14:	683b      	ldr	r3, [r7, #0]
 8001c16:	685b      	ldr	r3, [r3, #4]
 8001c18:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d006      	beq.n	8001c2e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001c20:	4b23      	ldr	r3, [pc, #140]	; (8001cb0 <HAL_GPIO_Init+0x2d0>)
 8001c22:	68da      	ldr	r2, [r3, #12]
 8001c24:	4922      	ldr	r1, [pc, #136]	; (8001cb0 <HAL_GPIO_Init+0x2d0>)
 8001c26:	69bb      	ldr	r3, [r7, #24]
 8001c28:	4313      	orrs	r3, r2
 8001c2a:	60cb      	str	r3, [r1, #12]
 8001c2c:	e006      	b.n	8001c3c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001c2e:	4b20      	ldr	r3, [pc, #128]	; (8001cb0 <HAL_GPIO_Init+0x2d0>)
 8001c30:	68da      	ldr	r2, [r3, #12]
 8001c32:	69bb      	ldr	r3, [r7, #24]
 8001c34:	43db      	mvns	r3, r3
 8001c36:	491e      	ldr	r1, [pc, #120]	; (8001cb0 <HAL_GPIO_Init+0x2d0>)
 8001c38:	4013      	ands	r3, r2
 8001c3a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001c3c:	683b      	ldr	r3, [r7, #0]
 8001c3e:	685b      	ldr	r3, [r3, #4]
 8001c40:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d006      	beq.n	8001c56 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001c48:	4b19      	ldr	r3, [pc, #100]	; (8001cb0 <HAL_GPIO_Init+0x2d0>)
 8001c4a:	685a      	ldr	r2, [r3, #4]
 8001c4c:	4918      	ldr	r1, [pc, #96]	; (8001cb0 <HAL_GPIO_Init+0x2d0>)
 8001c4e:	69bb      	ldr	r3, [r7, #24]
 8001c50:	4313      	orrs	r3, r2
 8001c52:	604b      	str	r3, [r1, #4]
 8001c54:	e006      	b.n	8001c64 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001c56:	4b16      	ldr	r3, [pc, #88]	; (8001cb0 <HAL_GPIO_Init+0x2d0>)
 8001c58:	685a      	ldr	r2, [r3, #4]
 8001c5a:	69bb      	ldr	r3, [r7, #24]
 8001c5c:	43db      	mvns	r3, r3
 8001c5e:	4914      	ldr	r1, [pc, #80]	; (8001cb0 <HAL_GPIO_Init+0x2d0>)
 8001c60:	4013      	ands	r3, r2
 8001c62:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001c64:	683b      	ldr	r3, [r7, #0]
 8001c66:	685b      	ldr	r3, [r3, #4]
 8001c68:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d021      	beq.n	8001cb4 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001c70:	4b0f      	ldr	r3, [pc, #60]	; (8001cb0 <HAL_GPIO_Init+0x2d0>)
 8001c72:	681a      	ldr	r2, [r3, #0]
 8001c74:	490e      	ldr	r1, [pc, #56]	; (8001cb0 <HAL_GPIO_Init+0x2d0>)
 8001c76:	69bb      	ldr	r3, [r7, #24]
 8001c78:	4313      	orrs	r3, r2
 8001c7a:	600b      	str	r3, [r1, #0]
 8001c7c:	e021      	b.n	8001cc2 <HAL_GPIO_Init+0x2e2>
 8001c7e:	bf00      	nop
 8001c80:	10320000 	.word	0x10320000
 8001c84:	10310000 	.word	0x10310000
 8001c88:	10220000 	.word	0x10220000
 8001c8c:	10210000 	.word	0x10210000
 8001c90:	10120000 	.word	0x10120000
 8001c94:	10110000 	.word	0x10110000
 8001c98:	40021000 	.word	0x40021000
 8001c9c:	40010000 	.word	0x40010000
 8001ca0:	40010800 	.word	0x40010800
 8001ca4:	40010c00 	.word	0x40010c00
 8001ca8:	40011000 	.word	0x40011000
 8001cac:	40011400 	.word	0x40011400
 8001cb0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001cb4:	4b0b      	ldr	r3, [pc, #44]	; (8001ce4 <HAL_GPIO_Init+0x304>)
 8001cb6:	681a      	ldr	r2, [r3, #0]
 8001cb8:	69bb      	ldr	r3, [r7, #24]
 8001cba:	43db      	mvns	r3, r3
 8001cbc:	4909      	ldr	r1, [pc, #36]	; (8001ce4 <HAL_GPIO_Init+0x304>)
 8001cbe:	4013      	ands	r3, r2
 8001cc0:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001cc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cc4:	3301      	adds	r3, #1
 8001cc6:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001cc8:	683b      	ldr	r3, [r7, #0]
 8001cca:	681a      	ldr	r2, [r3, #0]
 8001ccc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cce:	fa22 f303 	lsr.w	r3, r2, r3
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	f47f ae8e 	bne.w	80019f4 <HAL_GPIO_Init+0x14>
  }
}
 8001cd8:	bf00      	nop
 8001cda:	bf00      	nop
 8001cdc:	372c      	adds	r7, #44	; 0x2c
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	bc80      	pop	{r7}
 8001ce2:	4770      	bx	lr
 8001ce4:	40010400 	.word	0x40010400

08001ce8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001ce8:	b480      	push	{r7}
 8001cea:	b083      	sub	sp, #12
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	6078      	str	r0, [r7, #4]
 8001cf0:	460b      	mov	r3, r1
 8001cf2:	807b      	strh	r3, [r7, #2]
 8001cf4:	4613      	mov	r3, r2
 8001cf6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001cf8:	787b      	ldrb	r3, [r7, #1]
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d003      	beq.n	8001d06 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001cfe:	887a      	ldrh	r2, [r7, #2]
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001d04:	e003      	b.n	8001d0e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001d06:	887b      	ldrh	r3, [r7, #2]
 8001d08:	041a      	lsls	r2, r3, #16
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	611a      	str	r2, [r3, #16]
}
 8001d0e:	bf00      	nop
 8001d10:	370c      	adds	r7, #12
 8001d12:	46bd      	mov	sp, r7
 8001d14:	bc80      	pop	{r7}
 8001d16:	4770      	bx	lr

08001d18 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001d18:	b580      	push	{r7, lr}
 8001d1a:	b086      	sub	sp, #24
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d101      	bne.n	8001d2a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001d26:	2301      	movs	r3, #1
 8001d28:	e272      	b.n	8002210 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	f003 0301 	and.w	r3, r3, #1
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	f000 8087 	beq.w	8001e46 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001d38:	4b92      	ldr	r3, [pc, #584]	; (8001f84 <HAL_RCC_OscConfig+0x26c>)
 8001d3a:	685b      	ldr	r3, [r3, #4]
 8001d3c:	f003 030c 	and.w	r3, r3, #12
 8001d40:	2b04      	cmp	r3, #4
 8001d42:	d00c      	beq.n	8001d5e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001d44:	4b8f      	ldr	r3, [pc, #572]	; (8001f84 <HAL_RCC_OscConfig+0x26c>)
 8001d46:	685b      	ldr	r3, [r3, #4]
 8001d48:	f003 030c 	and.w	r3, r3, #12
 8001d4c:	2b08      	cmp	r3, #8
 8001d4e:	d112      	bne.n	8001d76 <HAL_RCC_OscConfig+0x5e>
 8001d50:	4b8c      	ldr	r3, [pc, #560]	; (8001f84 <HAL_RCC_OscConfig+0x26c>)
 8001d52:	685b      	ldr	r3, [r3, #4]
 8001d54:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d58:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d5c:	d10b      	bne.n	8001d76 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d5e:	4b89      	ldr	r3, [pc, #548]	; (8001f84 <HAL_RCC_OscConfig+0x26c>)
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d06c      	beq.n	8001e44 <HAL_RCC_OscConfig+0x12c>
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	685b      	ldr	r3, [r3, #4]
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d168      	bne.n	8001e44 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001d72:	2301      	movs	r3, #1
 8001d74:	e24c      	b.n	8002210 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	685b      	ldr	r3, [r3, #4]
 8001d7a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d7e:	d106      	bne.n	8001d8e <HAL_RCC_OscConfig+0x76>
 8001d80:	4b80      	ldr	r3, [pc, #512]	; (8001f84 <HAL_RCC_OscConfig+0x26c>)
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	4a7f      	ldr	r2, [pc, #508]	; (8001f84 <HAL_RCC_OscConfig+0x26c>)
 8001d86:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d8a:	6013      	str	r3, [r2, #0]
 8001d8c:	e02e      	b.n	8001dec <HAL_RCC_OscConfig+0xd4>
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	685b      	ldr	r3, [r3, #4]
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d10c      	bne.n	8001db0 <HAL_RCC_OscConfig+0x98>
 8001d96:	4b7b      	ldr	r3, [pc, #492]	; (8001f84 <HAL_RCC_OscConfig+0x26c>)
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	4a7a      	ldr	r2, [pc, #488]	; (8001f84 <HAL_RCC_OscConfig+0x26c>)
 8001d9c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001da0:	6013      	str	r3, [r2, #0]
 8001da2:	4b78      	ldr	r3, [pc, #480]	; (8001f84 <HAL_RCC_OscConfig+0x26c>)
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	4a77      	ldr	r2, [pc, #476]	; (8001f84 <HAL_RCC_OscConfig+0x26c>)
 8001da8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001dac:	6013      	str	r3, [r2, #0]
 8001dae:	e01d      	b.n	8001dec <HAL_RCC_OscConfig+0xd4>
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	685b      	ldr	r3, [r3, #4]
 8001db4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001db8:	d10c      	bne.n	8001dd4 <HAL_RCC_OscConfig+0xbc>
 8001dba:	4b72      	ldr	r3, [pc, #456]	; (8001f84 <HAL_RCC_OscConfig+0x26c>)
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	4a71      	ldr	r2, [pc, #452]	; (8001f84 <HAL_RCC_OscConfig+0x26c>)
 8001dc0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001dc4:	6013      	str	r3, [r2, #0]
 8001dc6:	4b6f      	ldr	r3, [pc, #444]	; (8001f84 <HAL_RCC_OscConfig+0x26c>)
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	4a6e      	ldr	r2, [pc, #440]	; (8001f84 <HAL_RCC_OscConfig+0x26c>)
 8001dcc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001dd0:	6013      	str	r3, [r2, #0]
 8001dd2:	e00b      	b.n	8001dec <HAL_RCC_OscConfig+0xd4>
 8001dd4:	4b6b      	ldr	r3, [pc, #428]	; (8001f84 <HAL_RCC_OscConfig+0x26c>)
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	4a6a      	ldr	r2, [pc, #424]	; (8001f84 <HAL_RCC_OscConfig+0x26c>)
 8001dda:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001dde:	6013      	str	r3, [r2, #0]
 8001de0:	4b68      	ldr	r3, [pc, #416]	; (8001f84 <HAL_RCC_OscConfig+0x26c>)
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	4a67      	ldr	r2, [pc, #412]	; (8001f84 <HAL_RCC_OscConfig+0x26c>)
 8001de6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001dea:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	685b      	ldr	r3, [r3, #4]
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d013      	beq.n	8001e1c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001df4:	f7ff fcdc 	bl	80017b0 <HAL_GetTick>
 8001df8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001dfa:	e008      	b.n	8001e0e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001dfc:	f7ff fcd8 	bl	80017b0 <HAL_GetTick>
 8001e00:	4602      	mov	r2, r0
 8001e02:	693b      	ldr	r3, [r7, #16]
 8001e04:	1ad3      	subs	r3, r2, r3
 8001e06:	2b64      	cmp	r3, #100	; 0x64
 8001e08:	d901      	bls.n	8001e0e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001e0a:	2303      	movs	r3, #3
 8001e0c:	e200      	b.n	8002210 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e0e:	4b5d      	ldr	r3, [pc, #372]	; (8001f84 <HAL_RCC_OscConfig+0x26c>)
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d0f0      	beq.n	8001dfc <HAL_RCC_OscConfig+0xe4>
 8001e1a:	e014      	b.n	8001e46 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e1c:	f7ff fcc8 	bl	80017b0 <HAL_GetTick>
 8001e20:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e22:	e008      	b.n	8001e36 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001e24:	f7ff fcc4 	bl	80017b0 <HAL_GetTick>
 8001e28:	4602      	mov	r2, r0
 8001e2a:	693b      	ldr	r3, [r7, #16]
 8001e2c:	1ad3      	subs	r3, r2, r3
 8001e2e:	2b64      	cmp	r3, #100	; 0x64
 8001e30:	d901      	bls.n	8001e36 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001e32:	2303      	movs	r3, #3
 8001e34:	e1ec      	b.n	8002210 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e36:	4b53      	ldr	r3, [pc, #332]	; (8001f84 <HAL_RCC_OscConfig+0x26c>)
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d1f0      	bne.n	8001e24 <HAL_RCC_OscConfig+0x10c>
 8001e42:	e000      	b.n	8001e46 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e44:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	f003 0302 	and.w	r3, r3, #2
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d063      	beq.n	8001f1a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001e52:	4b4c      	ldr	r3, [pc, #304]	; (8001f84 <HAL_RCC_OscConfig+0x26c>)
 8001e54:	685b      	ldr	r3, [r3, #4]
 8001e56:	f003 030c 	and.w	r3, r3, #12
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d00b      	beq.n	8001e76 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001e5e:	4b49      	ldr	r3, [pc, #292]	; (8001f84 <HAL_RCC_OscConfig+0x26c>)
 8001e60:	685b      	ldr	r3, [r3, #4]
 8001e62:	f003 030c 	and.w	r3, r3, #12
 8001e66:	2b08      	cmp	r3, #8
 8001e68:	d11c      	bne.n	8001ea4 <HAL_RCC_OscConfig+0x18c>
 8001e6a:	4b46      	ldr	r3, [pc, #280]	; (8001f84 <HAL_RCC_OscConfig+0x26c>)
 8001e6c:	685b      	ldr	r3, [r3, #4]
 8001e6e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d116      	bne.n	8001ea4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e76:	4b43      	ldr	r3, [pc, #268]	; (8001f84 <HAL_RCC_OscConfig+0x26c>)
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	f003 0302 	and.w	r3, r3, #2
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d005      	beq.n	8001e8e <HAL_RCC_OscConfig+0x176>
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	691b      	ldr	r3, [r3, #16]
 8001e86:	2b01      	cmp	r3, #1
 8001e88:	d001      	beq.n	8001e8e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001e8a:	2301      	movs	r3, #1
 8001e8c:	e1c0      	b.n	8002210 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e8e:	4b3d      	ldr	r3, [pc, #244]	; (8001f84 <HAL_RCC_OscConfig+0x26c>)
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	695b      	ldr	r3, [r3, #20]
 8001e9a:	00db      	lsls	r3, r3, #3
 8001e9c:	4939      	ldr	r1, [pc, #228]	; (8001f84 <HAL_RCC_OscConfig+0x26c>)
 8001e9e:	4313      	orrs	r3, r2
 8001ea0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ea2:	e03a      	b.n	8001f1a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	691b      	ldr	r3, [r3, #16]
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d020      	beq.n	8001eee <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001eac:	4b36      	ldr	r3, [pc, #216]	; (8001f88 <HAL_RCC_OscConfig+0x270>)
 8001eae:	2201      	movs	r2, #1
 8001eb0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001eb2:	f7ff fc7d 	bl	80017b0 <HAL_GetTick>
 8001eb6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001eb8:	e008      	b.n	8001ecc <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001eba:	f7ff fc79 	bl	80017b0 <HAL_GetTick>
 8001ebe:	4602      	mov	r2, r0
 8001ec0:	693b      	ldr	r3, [r7, #16]
 8001ec2:	1ad3      	subs	r3, r2, r3
 8001ec4:	2b02      	cmp	r3, #2
 8001ec6:	d901      	bls.n	8001ecc <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001ec8:	2303      	movs	r3, #3
 8001eca:	e1a1      	b.n	8002210 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ecc:	4b2d      	ldr	r3, [pc, #180]	; (8001f84 <HAL_RCC_OscConfig+0x26c>)
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	f003 0302 	and.w	r3, r3, #2
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d0f0      	beq.n	8001eba <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ed8:	4b2a      	ldr	r3, [pc, #168]	; (8001f84 <HAL_RCC_OscConfig+0x26c>)
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	695b      	ldr	r3, [r3, #20]
 8001ee4:	00db      	lsls	r3, r3, #3
 8001ee6:	4927      	ldr	r1, [pc, #156]	; (8001f84 <HAL_RCC_OscConfig+0x26c>)
 8001ee8:	4313      	orrs	r3, r2
 8001eea:	600b      	str	r3, [r1, #0]
 8001eec:	e015      	b.n	8001f1a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001eee:	4b26      	ldr	r3, [pc, #152]	; (8001f88 <HAL_RCC_OscConfig+0x270>)
 8001ef0:	2200      	movs	r2, #0
 8001ef2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ef4:	f7ff fc5c 	bl	80017b0 <HAL_GetTick>
 8001ef8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001efa:	e008      	b.n	8001f0e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001efc:	f7ff fc58 	bl	80017b0 <HAL_GetTick>
 8001f00:	4602      	mov	r2, r0
 8001f02:	693b      	ldr	r3, [r7, #16]
 8001f04:	1ad3      	subs	r3, r2, r3
 8001f06:	2b02      	cmp	r3, #2
 8001f08:	d901      	bls.n	8001f0e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001f0a:	2303      	movs	r3, #3
 8001f0c:	e180      	b.n	8002210 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f0e:	4b1d      	ldr	r3, [pc, #116]	; (8001f84 <HAL_RCC_OscConfig+0x26c>)
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	f003 0302 	and.w	r3, r3, #2
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d1f0      	bne.n	8001efc <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	f003 0308 	and.w	r3, r3, #8
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d03a      	beq.n	8001f9c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	699b      	ldr	r3, [r3, #24]
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d019      	beq.n	8001f62 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001f2e:	4b17      	ldr	r3, [pc, #92]	; (8001f8c <HAL_RCC_OscConfig+0x274>)
 8001f30:	2201      	movs	r2, #1
 8001f32:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f34:	f7ff fc3c 	bl	80017b0 <HAL_GetTick>
 8001f38:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f3a:	e008      	b.n	8001f4e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f3c:	f7ff fc38 	bl	80017b0 <HAL_GetTick>
 8001f40:	4602      	mov	r2, r0
 8001f42:	693b      	ldr	r3, [r7, #16]
 8001f44:	1ad3      	subs	r3, r2, r3
 8001f46:	2b02      	cmp	r3, #2
 8001f48:	d901      	bls.n	8001f4e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001f4a:	2303      	movs	r3, #3
 8001f4c:	e160      	b.n	8002210 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f4e:	4b0d      	ldr	r3, [pc, #52]	; (8001f84 <HAL_RCC_OscConfig+0x26c>)
 8001f50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f52:	f003 0302 	and.w	r3, r3, #2
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d0f0      	beq.n	8001f3c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001f5a:	2001      	movs	r0, #1
 8001f5c:	f000 faa6 	bl	80024ac <RCC_Delay>
 8001f60:	e01c      	b.n	8001f9c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001f62:	4b0a      	ldr	r3, [pc, #40]	; (8001f8c <HAL_RCC_OscConfig+0x274>)
 8001f64:	2200      	movs	r2, #0
 8001f66:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f68:	f7ff fc22 	bl	80017b0 <HAL_GetTick>
 8001f6c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f6e:	e00f      	b.n	8001f90 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f70:	f7ff fc1e 	bl	80017b0 <HAL_GetTick>
 8001f74:	4602      	mov	r2, r0
 8001f76:	693b      	ldr	r3, [r7, #16]
 8001f78:	1ad3      	subs	r3, r2, r3
 8001f7a:	2b02      	cmp	r3, #2
 8001f7c:	d908      	bls.n	8001f90 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001f7e:	2303      	movs	r3, #3
 8001f80:	e146      	b.n	8002210 <HAL_RCC_OscConfig+0x4f8>
 8001f82:	bf00      	nop
 8001f84:	40021000 	.word	0x40021000
 8001f88:	42420000 	.word	0x42420000
 8001f8c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f90:	4b92      	ldr	r3, [pc, #584]	; (80021dc <HAL_RCC_OscConfig+0x4c4>)
 8001f92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f94:	f003 0302 	and.w	r3, r3, #2
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d1e9      	bne.n	8001f70 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	f003 0304 	and.w	r3, r3, #4
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	f000 80a6 	beq.w	80020f6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001faa:	2300      	movs	r3, #0
 8001fac:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001fae:	4b8b      	ldr	r3, [pc, #556]	; (80021dc <HAL_RCC_OscConfig+0x4c4>)
 8001fb0:	69db      	ldr	r3, [r3, #28]
 8001fb2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d10d      	bne.n	8001fd6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001fba:	4b88      	ldr	r3, [pc, #544]	; (80021dc <HAL_RCC_OscConfig+0x4c4>)
 8001fbc:	69db      	ldr	r3, [r3, #28]
 8001fbe:	4a87      	ldr	r2, [pc, #540]	; (80021dc <HAL_RCC_OscConfig+0x4c4>)
 8001fc0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001fc4:	61d3      	str	r3, [r2, #28]
 8001fc6:	4b85      	ldr	r3, [pc, #532]	; (80021dc <HAL_RCC_OscConfig+0x4c4>)
 8001fc8:	69db      	ldr	r3, [r3, #28]
 8001fca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fce:	60bb      	str	r3, [r7, #8]
 8001fd0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001fd2:	2301      	movs	r3, #1
 8001fd4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001fd6:	4b82      	ldr	r3, [pc, #520]	; (80021e0 <HAL_RCC_OscConfig+0x4c8>)
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d118      	bne.n	8002014 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001fe2:	4b7f      	ldr	r3, [pc, #508]	; (80021e0 <HAL_RCC_OscConfig+0x4c8>)
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	4a7e      	ldr	r2, [pc, #504]	; (80021e0 <HAL_RCC_OscConfig+0x4c8>)
 8001fe8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001fec:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001fee:	f7ff fbdf 	bl	80017b0 <HAL_GetTick>
 8001ff2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ff4:	e008      	b.n	8002008 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ff6:	f7ff fbdb 	bl	80017b0 <HAL_GetTick>
 8001ffa:	4602      	mov	r2, r0
 8001ffc:	693b      	ldr	r3, [r7, #16]
 8001ffe:	1ad3      	subs	r3, r2, r3
 8002000:	2b64      	cmp	r3, #100	; 0x64
 8002002:	d901      	bls.n	8002008 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002004:	2303      	movs	r3, #3
 8002006:	e103      	b.n	8002210 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002008:	4b75      	ldr	r3, [pc, #468]	; (80021e0 <HAL_RCC_OscConfig+0x4c8>)
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002010:	2b00      	cmp	r3, #0
 8002012:	d0f0      	beq.n	8001ff6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	68db      	ldr	r3, [r3, #12]
 8002018:	2b01      	cmp	r3, #1
 800201a:	d106      	bne.n	800202a <HAL_RCC_OscConfig+0x312>
 800201c:	4b6f      	ldr	r3, [pc, #444]	; (80021dc <HAL_RCC_OscConfig+0x4c4>)
 800201e:	6a1b      	ldr	r3, [r3, #32]
 8002020:	4a6e      	ldr	r2, [pc, #440]	; (80021dc <HAL_RCC_OscConfig+0x4c4>)
 8002022:	f043 0301 	orr.w	r3, r3, #1
 8002026:	6213      	str	r3, [r2, #32]
 8002028:	e02d      	b.n	8002086 <HAL_RCC_OscConfig+0x36e>
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	68db      	ldr	r3, [r3, #12]
 800202e:	2b00      	cmp	r3, #0
 8002030:	d10c      	bne.n	800204c <HAL_RCC_OscConfig+0x334>
 8002032:	4b6a      	ldr	r3, [pc, #424]	; (80021dc <HAL_RCC_OscConfig+0x4c4>)
 8002034:	6a1b      	ldr	r3, [r3, #32]
 8002036:	4a69      	ldr	r2, [pc, #420]	; (80021dc <HAL_RCC_OscConfig+0x4c4>)
 8002038:	f023 0301 	bic.w	r3, r3, #1
 800203c:	6213      	str	r3, [r2, #32]
 800203e:	4b67      	ldr	r3, [pc, #412]	; (80021dc <HAL_RCC_OscConfig+0x4c4>)
 8002040:	6a1b      	ldr	r3, [r3, #32]
 8002042:	4a66      	ldr	r2, [pc, #408]	; (80021dc <HAL_RCC_OscConfig+0x4c4>)
 8002044:	f023 0304 	bic.w	r3, r3, #4
 8002048:	6213      	str	r3, [r2, #32]
 800204a:	e01c      	b.n	8002086 <HAL_RCC_OscConfig+0x36e>
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	68db      	ldr	r3, [r3, #12]
 8002050:	2b05      	cmp	r3, #5
 8002052:	d10c      	bne.n	800206e <HAL_RCC_OscConfig+0x356>
 8002054:	4b61      	ldr	r3, [pc, #388]	; (80021dc <HAL_RCC_OscConfig+0x4c4>)
 8002056:	6a1b      	ldr	r3, [r3, #32]
 8002058:	4a60      	ldr	r2, [pc, #384]	; (80021dc <HAL_RCC_OscConfig+0x4c4>)
 800205a:	f043 0304 	orr.w	r3, r3, #4
 800205e:	6213      	str	r3, [r2, #32]
 8002060:	4b5e      	ldr	r3, [pc, #376]	; (80021dc <HAL_RCC_OscConfig+0x4c4>)
 8002062:	6a1b      	ldr	r3, [r3, #32]
 8002064:	4a5d      	ldr	r2, [pc, #372]	; (80021dc <HAL_RCC_OscConfig+0x4c4>)
 8002066:	f043 0301 	orr.w	r3, r3, #1
 800206a:	6213      	str	r3, [r2, #32]
 800206c:	e00b      	b.n	8002086 <HAL_RCC_OscConfig+0x36e>
 800206e:	4b5b      	ldr	r3, [pc, #364]	; (80021dc <HAL_RCC_OscConfig+0x4c4>)
 8002070:	6a1b      	ldr	r3, [r3, #32]
 8002072:	4a5a      	ldr	r2, [pc, #360]	; (80021dc <HAL_RCC_OscConfig+0x4c4>)
 8002074:	f023 0301 	bic.w	r3, r3, #1
 8002078:	6213      	str	r3, [r2, #32]
 800207a:	4b58      	ldr	r3, [pc, #352]	; (80021dc <HAL_RCC_OscConfig+0x4c4>)
 800207c:	6a1b      	ldr	r3, [r3, #32]
 800207e:	4a57      	ldr	r2, [pc, #348]	; (80021dc <HAL_RCC_OscConfig+0x4c4>)
 8002080:	f023 0304 	bic.w	r3, r3, #4
 8002084:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	68db      	ldr	r3, [r3, #12]
 800208a:	2b00      	cmp	r3, #0
 800208c:	d015      	beq.n	80020ba <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800208e:	f7ff fb8f 	bl	80017b0 <HAL_GetTick>
 8002092:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002094:	e00a      	b.n	80020ac <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002096:	f7ff fb8b 	bl	80017b0 <HAL_GetTick>
 800209a:	4602      	mov	r2, r0
 800209c:	693b      	ldr	r3, [r7, #16]
 800209e:	1ad3      	subs	r3, r2, r3
 80020a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80020a4:	4293      	cmp	r3, r2
 80020a6:	d901      	bls.n	80020ac <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80020a8:	2303      	movs	r3, #3
 80020aa:	e0b1      	b.n	8002210 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80020ac:	4b4b      	ldr	r3, [pc, #300]	; (80021dc <HAL_RCC_OscConfig+0x4c4>)
 80020ae:	6a1b      	ldr	r3, [r3, #32]
 80020b0:	f003 0302 	and.w	r3, r3, #2
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d0ee      	beq.n	8002096 <HAL_RCC_OscConfig+0x37e>
 80020b8:	e014      	b.n	80020e4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80020ba:	f7ff fb79 	bl	80017b0 <HAL_GetTick>
 80020be:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80020c0:	e00a      	b.n	80020d8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80020c2:	f7ff fb75 	bl	80017b0 <HAL_GetTick>
 80020c6:	4602      	mov	r2, r0
 80020c8:	693b      	ldr	r3, [r7, #16]
 80020ca:	1ad3      	subs	r3, r2, r3
 80020cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80020d0:	4293      	cmp	r3, r2
 80020d2:	d901      	bls.n	80020d8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80020d4:	2303      	movs	r3, #3
 80020d6:	e09b      	b.n	8002210 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80020d8:	4b40      	ldr	r3, [pc, #256]	; (80021dc <HAL_RCC_OscConfig+0x4c4>)
 80020da:	6a1b      	ldr	r3, [r3, #32]
 80020dc:	f003 0302 	and.w	r3, r3, #2
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d1ee      	bne.n	80020c2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80020e4:	7dfb      	ldrb	r3, [r7, #23]
 80020e6:	2b01      	cmp	r3, #1
 80020e8:	d105      	bne.n	80020f6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80020ea:	4b3c      	ldr	r3, [pc, #240]	; (80021dc <HAL_RCC_OscConfig+0x4c4>)
 80020ec:	69db      	ldr	r3, [r3, #28]
 80020ee:	4a3b      	ldr	r2, [pc, #236]	; (80021dc <HAL_RCC_OscConfig+0x4c4>)
 80020f0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80020f4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	69db      	ldr	r3, [r3, #28]
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	f000 8087 	beq.w	800220e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002100:	4b36      	ldr	r3, [pc, #216]	; (80021dc <HAL_RCC_OscConfig+0x4c4>)
 8002102:	685b      	ldr	r3, [r3, #4]
 8002104:	f003 030c 	and.w	r3, r3, #12
 8002108:	2b08      	cmp	r3, #8
 800210a:	d061      	beq.n	80021d0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	69db      	ldr	r3, [r3, #28]
 8002110:	2b02      	cmp	r3, #2
 8002112:	d146      	bne.n	80021a2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002114:	4b33      	ldr	r3, [pc, #204]	; (80021e4 <HAL_RCC_OscConfig+0x4cc>)
 8002116:	2200      	movs	r2, #0
 8002118:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800211a:	f7ff fb49 	bl	80017b0 <HAL_GetTick>
 800211e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002120:	e008      	b.n	8002134 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002122:	f7ff fb45 	bl	80017b0 <HAL_GetTick>
 8002126:	4602      	mov	r2, r0
 8002128:	693b      	ldr	r3, [r7, #16]
 800212a:	1ad3      	subs	r3, r2, r3
 800212c:	2b02      	cmp	r3, #2
 800212e:	d901      	bls.n	8002134 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002130:	2303      	movs	r3, #3
 8002132:	e06d      	b.n	8002210 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002134:	4b29      	ldr	r3, [pc, #164]	; (80021dc <HAL_RCC_OscConfig+0x4c4>)
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800213c:	2b00      	cmp	r3, #0
 800213e:	d1f0      	bne.n	8002122 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	6a1b      	ldr	r3, [r3, #32]
 8002144:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002148:	d108      	bne.n	800215c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800214a:	4b24      	ldr	r3, [pc, #144]	; (80021dc <HAL_RCC_OscConfig+0x4c4>)
 800214c:	685b      	ldr	r3, [r3, #4]
 800214e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	689b      	ldr	r3, [r3, #8]
 8002156:	4921      	ldr	r1, [pc, #132]	; (80021dc <HAL_RCC_OscConfig+0x4c4>)
 8002158:	4313      	orrs	r3, r2
 800215a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800215c:	4b1f      	ldr	r3, [pc, #124]	; (80021dc <HAL_RCC_OscConfig+0x4c4>)
 800215e:	685b      	ldr	r3, [r3, #4]
 8002160:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	6a19      	ldr	r1, [r3, #32]
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800216c:	430b      	orrs	r3, r1
 800216e:	491b      	ldr	r1, [pc, #108]	; (80021dc <HAL_RCC_OscConfig+0x4c4>)
 8002170:	4313      	orrs	r3, r2
 8002172:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002174:	4b1b      	ldr	r3, [pc, #108]	; (80021e4 <HAL_RCC_OscConfig+0x4cc>)
 8002176:	2201      	movs	r2, #1
 8002178:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800217a:	f7ff fb19 	bl	80017b0 <HAL_GetTick>
 800217e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002180:	e008      	b.n	8002194 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002182:	f7ff fb15 	bl	80017b0 <HAL_GetTick>
 8002186:	4602      	mov	r2, r0
 8002188:	693b      	ldr	r3, [r7, #16]
 800218a:	1ad3      	subs	r3, r2, r3
 800218c:	2b02      	cmp	r3, #2
 800218e:	d901      	bls.n	8002194 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002190:	2303      	movs	r3, #3
 8002192:	e03d      	b.n	8002210 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002194:	4b11      	ldr	r3, [pc, #68]	; (80021dc <HAL_RCC_OscConfig+0x4c4>)
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800219c:	2b00      	cmp	r3, #0
 800219e:	d0f0      	beq.n	8002182 <HAL_RCC_OscConfig+0x46a>
 80021a0:	e035      	b.n	800220e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80021a2:	4b10      	ldr	r3, [pc, #64]	; (80021e4 <HAL_RCC_OscConfig+0x4cc>)
 80021a4:	2200      	movs	r2, #0
 80021a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021a8:	f7ff fb02 	bl	80017b0 <HAL_GetTick>
 80021ac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80021ae:	e008      	b.n	80021c2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021b0:	f7ff fafe 	bl	80017b0 <HAL_GetTick>
 80021b4:	4602      	mov	r2, r0
 80021b6:	693b      	ldr	r3, [r7, #16]
 80021b8:	1ad3      	subs	r3, r2, r3
 80021ba:	2b02      	cmp	r3, #2
 80021bc:	d901      	bls.n	80021c2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80021be:	2303      	movs	r3, #3
 80021c0:	e026      	b.n	8002210 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80021c2:	4b06      	ldr	r3, [pc, #24]	; (80021dc <HAL_RCC_OscConfig+0x4c4>)
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d1f0      	bne.n	80021b0 <HAL_RCC_OscConfig+0x498>
 80021ce:	e01e      	b.n	800220e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	69db      	ldr	r3, [r3, #28]
 80021d4:	2b01      	cmp	r3, #1
 80021d6:	d107      	bne.n	80021e8 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80021d8:	2301      	movs	r3, #1
 80021da:	e019      	b.n	8002210 <HAL_RCC_OscConfig+0x4f8>
 80021dc:	40021000 	.word	0x40021000
 80021e0:	40007000 	.word	0x40007000
 80021e4:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80021e8:	4b0b      	ldr	r3, [pc, #44]	; (8002218 <HAL_RCC_OscConfig+0x500>)
 80021ea:	685b      	ldr	r3, [r3, #4]
 80021ec:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	6a1b      	ldr	r3, [r3, #32]
 80021f8:	429a      	cmp	r2, r3
 80021fa:	d106      	bne.n	800220a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002206:	429a      	cmp	r2, r3
 8002208:	d001      	beq.n	800220e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800220a:	2301      	movs	r3, #1
 800220c:	e000      	b.n	8002210 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800220e:	2300      	movs	r3, #0
}
 8002210:	4618      	mov	r0, r3
 8002212:	3718      	adds	r7, #24
 8002214:	46bd      	mov	sp, r7
 8002216:	bd80      	pop	{r7, pc}
 8002218:	40021000 	.word	0x40021000

0800221c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800221c:	b580      	push	{r7, lr}
 800221e:	b084      	sub	sp, #16
 8002220:	af00      	add	r7, sp, #0
 8002222:	6078      	str	r0, [r7, #4]
 8002224:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	2b00      	cmp	r3, #0
 800222a:	d101      	bne.n	8002230 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800222c:	2301      	movs	r3, #1
 800222e:	e0d0      	b.n	80023d2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002230:	4b6a      	ldr	r3, [pc, #424]	; (80023dc <HAL_RCC_ClockConfig+0x1c0>)
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	f003 0307 	and.w	r3, r3, #7
 8002238:	683a      	ldr	r2, [r7, #0]
 800223a:	429a      	cmp	r2, r3
 800223c:	d910      	bls.n	8002260 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800223e:	4b67      	ldr	r3, [pc, #412]	; (80023dc <HAL_RCC_ClockConfig+0x1c0>)
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	f023 0207 	bic.w	r2, r3, #7
 8002246:	4965      	ldr	r1, [pc, #404]	; (80023dc <HAL_RCC_ClockConfig+0x1c0>)
 8002248:	683b      	ldr	r3, [r7, #0]
 800224a:	4313      	orrs	r3, r2
 800224c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800224e:	4b63      	ldr	r3, [pc, #396]	; (80023dc <HAL_RCC_ClockConfig+0x1c0>)
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	f003 0307 	and.w	r3, r3, #7
 8002256:	683a      	ldr	r2, [r7, #0]
 8002258:	429a      	cmp	r2, r3
 800225a:	d001      	beq.n	8002260 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800225c:	2301      	movs	r3, #1
 800225e:	e0b8      	b.n	80023d2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	f003 0302 	and.w	r3, r3, #2
 8002268:	2b00      	cmp	r3, #0
 800226a:	d020      	beq.n	80022ae <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	f003 0304 	and.w	r3, r3, #4
 8002274:	2b00      	cmp	r3, #0
 8002276:	d005      	beq.n	8002284 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002278:	4b59      	ldr	r3, [pc, #356]	; (80023e0 <HAL_RCC_ClockConfig+0x1c4>)
 800227a:	685b      	ldr	r3, [r3, #4]
 800227c:	4a58      	ldr	r2, [pc, #352]	; (80023e0 <HAL_RCC_ClockConfig+0x1c4>)
 800227e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002282:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	f003 0308 	and.w	r3, r3, #8
 800228c:	2b00      	cmp	r3, #0
 800228e:	d005      	beq.n	800229c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002290:	4b53      	ldr	r3, [pc, #332]	; (80023e0 <HAL_RCC_ClockConfig+0x1c4>)
 8002292:	685b      	ldr	r3, [r3, #4]
 8002294:	4a52      	ldr	r2, [pc, #328]	; (80023e0 <HAL_RCC_ClockConfig+0x1c4>)
 8002296:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800229a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800229c:	4b50      	ldr	r3, [pc, #320]	; (80023e0 <HAL_RCC_ClockConfig+0x1c4>)
 800229e:	685b      	ldr	r3, [r3, #4]
 80022a0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	689b      	ldr	r3, [r3, #8]
 80022a8:	494d      	ldr	r1, [pc, #308]	; (80023e0 <HAL_RCC_ClockConfig+0x1c4>)
 80022aa:	4313      	orrs	r3, r2
 80022ac:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	f003 0301 	and.w	r3, r3, #1
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d040      	beq.n	800233c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	685b      	ldr	r3, [r3, #4]
 80022be:	2b01      	cmp	r3, #1
 80022c0:	d107      	bne.n	80022d2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80022c2:	4b47      	ldr	r3, [pc, #284]	; (80023e0 <HAL_RCC_ClockConfig+0x1c4>)
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d115      	bne.n	80022fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80022ce:	2301      	movs	r3, #1
 80022d0:	e07f      	b.n	80023d2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	685b      	ldr	r3, [r3, #4]
 80022d6:	2b02      	cmp	r3, #2
 80022d8:	d107      	bne.n	80022ea <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80022da:	4b41      	ldr	r3, [pc, #260]	; (80023e0 <HAL_RCC_ClockConfig+0x1c4>)
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d109      	bne.n	80022fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80022e6:	2301      	movs	r3, #1
 80022e8:	e073      	b.n	80023d2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022ea:	4b3d      	ldr	r3, [pc, #244]	; (80023e0 <HAL_RCC_ClockConfig+0x1c4>)
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	f003 0302 	and.w	r3, r3, #2
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d101      	bne.n	80022fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80022f6:	2301      	movs	r3, #1
 80022f8:	e06b      	b.n	80023d2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80022fa:	4b39      	ldr	r3, [pc, #228]	; (80023e0 <HAL_RCC_ClockConfig+0x1c4>)
 80022fc:	685b      	ldr	r3, [r3, #4]
 80022fe:	f023 0203 	bic.w	r2, r3, #3
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	685b      	ldr	r3, [r3, #4]
 8002306:	4936      	ldr	r1, [pc, #216]	; (80023e0 <HAL_RCC_ClockConfig+0x1c4>)
 8002308:	4313      	orrs	r3, r2
 800230a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800230c:	f7ff fa50 	bl	80017b0 <HAL_GetTick>
 8002310:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002312:	e00a      	b.n	800232a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002314:	f7ff fa4c 	bl	80017b0 <HAL_GetTick>
 8002318:	4602      	mov	r2, r0
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	1ad3      	subs	r3, r2, r3
 800231e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002322:	4293      	cmp	r3, r2
 8002324:	d901      	bls.n	800232a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002326:	2303      	movs	r3, #3
 8002328:	e053      	b.n	80023d2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800232a:	4b2d      	ldr	r3, [pc, #180]	; (80023e0 <HAL_RCC_ClockConfig+0x1c4>)
 800232c:	685b      	ldr	r3, [r3, #4]
 800232e:	f003 020c 	and.w	r2, r3, #12
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	685b      	ldr	r3, [r3, #4]
 8002336:	009b      	lsls	r3, r3, #2
 8002338:	429a      	cmp	r2, r3
 800233a:	d1eb      	bne.n	8002314 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800233c:	4b27      	ldr	r3, [pc, #156]	; (80023dc <HAL_RCC_ClockConfig+0x1c0>)
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	f003 0307 	and.w	r3, r3, #7
 8002344:	683a      	ldr	r2, [r7, #0]
 8002346:	429a      	cmp	r2, r3
 8002348:	d210      	bcs.n	800236c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800234a:	4b24      	ldr	r3, [pc, #144]	; (80023dc <HAL_RCC_ClockConfig+0x1c0>)
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	f023 0207 	bic.w	r2, r3, #7
 8002352:	4922      	ldr	r1, [pc, #136]	; (80023dc <HAL_RCC_ClockConfig+0x1c0>)
 8002354:	683b      	ldr	r3, [r7, #0]
 8002356:	4313      	orrs	r3, r2
 8002358:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800235a:	4b20      	ldr	r3, [pc, #128]	; (80023dc <HAL_RCC_ClockConfig+0x1c0>)
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	f003 0307 	and.w	r3, r3, #7
 8002362:	683a      	ldr	r2, [r7, #0]
 8002364:	429a      	cmp	r2, r3
 8002366:	d001      	beq.n	800236c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002368:	2301      	movs	r3, #1
 800236a:	e032      	b.n	80023d2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	f003 0304 	and.w	r3, r3, #4
 8002374:	2b00      	cmp	r3, #0
 8002376:	d008      	beq.n	800238a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002378:	4b19      	ldr	r3, [pc, #100]	; (80023e0 <HAL_RCC_ClockConfig+0x1c4>)
 800237a:	685b      	ldr	r3, [r3, #4]
 800237c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	68db      	ldr	r3, [r3, #12]
 8002384:	4916      	ldr	r1, [pc, #88]	; (80023e0 <HAL_RCC_ClockConfig+0x1c4>)
 8002386:	4313      	orrs	r3, r2
 8002388:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	f003 0308 	and.w	r3, r3, #8
 8002392:	2b00      	cmp	r3, #0
 8002394:	d009      	beq.n	80023aa <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002396:	4b12      	ldr	r3, [pc, #72]	; (80023e0 <HAL_RCC_ClockConfig+0x1c4>)
 8002398:	685b      	ldr	r3, [r3, #4]
 800239a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	691b      	ldr	r3, [r3, #16]
 80023a2:	00db      	lsls	r3, r3, #3
 80023a4:	490e      	ldr	r1, [pc, #56]	; (80023e0 <HAL_RCC_ClockConfig+0x1c4>)
 80023a6:	4313      	orrs	r3, r2
 80023a8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80023aa:	f000 f821 	bl	80023f0 <HAL_RCC_GetSysClockFreq>
 80023ae:	4602      	mov	r2, r0
 80023b0:	4b0b      	ldr	r3, [pc, #44]	; (80023e0 <HAL_RCC_ClockConfig+0x1c4>)
 80023b2:	685b      	ldr	r3, [r3, #4]
 80023b4:	091b      	lsrs	r3, r3, #4
 80023b6:	f003 030f 	and.w	r3, r3, #15
 80023ba:	490a      	ldr	r1, [pc, #40]	; (80023e4 <HAL_RCC_ClockConfig+0x1c8>)
 80023bc:	5ccb      	ldrb	r3, [r1, r3]
 80023be:	fa22 f303 	lsr.w	r3, r2, r3
 80023c2:	4a09      	ldr	r2, [pc, #36]	; (80023e8 <HAL_RCC_ClockConfig+0x1cc>)
 80023c4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80023c6:	4b09      	ldr	r3, [pc, #36]	; (80023ec <HAL_RCC_ClockConfig+0x1d0>)
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	4618      	mov	r0, r3
 80023cc:	f7ff f9ae 	bl	800172c <HAL_InitTick>

  return HAL_OK;
 80023d0:	2300      	movs	r3, #0
}
 80023d2:	4618      	mov	r0, r3
 80023d4:	3710      	adds	r7, #16
 80023d6:	46bd      	mov	sp, r7
 80023d8:	bd80      	pop	{r7, pc}
 80023da:	bf00      	nop
 80023dc:	40022000 	.word	0x40022000
 80023e0:	40021000 	.word	0x40021000
 80023e4:	08005e58 	.word	0x08005e58
 80023e8:	20000000 	.word	0x20000000
 80023ec:	20000004 	.word	0x20000004

080023f0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80023f0:	b480      	push	{r7}
 80023f2:	b087      	sub	sp, #28
 80023f4:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80023f6:	2300      	movs	r3, #0
 80023f8:	60fb      	str	r3, [r7, #12]
 80023fa:	2300      	movs	r3, #0
 80023fc:	60bb      	str	r3, [r7, #8]
 80023fe:	2300      	movs	r3, #0
 8002400:	617b      	str	r3, [r7, #20]
 8002402:	2300      	movs	r3, #0
 8002404:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002406:	2300      	movs	r3, #0
 8002408:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800240a:	4b1e      	ldr	r3, [pc, #120]	; (8002484 <HAL_RCC_GetSysClockFreq+0x94>)
 800240c:	685b      	ldr	r3, [r3, #4]
 800240e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	f003 030c 	and.w	r3, r3, #12
 8002416:	2b04      	cmp	r3, #4
 8002418:	d002      	beq.n	8002420 <HAL_RCC_GetSysClockFreq+0x30>
 800241a:	2b08      	cmp	r3, #8
 800241c:	d003      	beq.n	8002426 <HAL_RCC_GetSysClockFreq+0x36>
 800241e:	e027      	b.n	8002470 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002420:	4b19      	ldr	r3, [pc, #100]	; (8002488 <HAL_RCC_GetSysClockFreq+0x98>)
 8002422:	613b      	str	r3, [r7, #16]
      break;
 8002424:	e027      	b.n	8002476 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	0c9b      	lsrs	r3, r3, #18
 800242a:	f003 030f 	and.w	r3, r3, #15
 800242e:	4a17      	ldr	r2, [pc, #92]	; (800248c <HAL_RCC_GetSysClockFreq+0x9c>)
 8002430:	5cd3      	ldrb	r3, [r2, r3]
 8002432:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800243a:	2b00      	cmp	r3, #0
 800243c:	d010      	beq.n	8002460 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800243e:	4b11      	ldr	r3, [pc, #68]	; (8002484 <HAL_RCC_GetSysClockFreq+0x94>)
 8002440:	685b      	ldr	r3, [r3, #4]
 8002442:	0c5b      	lsrs	r3, r3, #17
 8002444:	f003 0301 	and.w	r3, r3, #1
 8002448:	4a11      	ldr	r2, [pc, #68]	; (8002490 <HAL_RCC_GetSysClockFreq+0xa0>)
 800244a:	5cd3      	ldrb	r3, [r2, r3]
 800244c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	4a0d      	ldr	r2, [pc, #52]	; (8002488 <HAL_RCC_GetSysClockFreq+0x98>)
 8002452:	fb03 f202 	mul.w	r2, r3, r2
 8002456:	68bb      	ldr	r3, [r7, #8]
 8002458:	fbb2 f3f3 	udiv	r3, r2, r3
 800245c:	617b      	str	r3, [r7, #20]
 800245e:	e004      	b.n	800246a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	4a0c      	ldr	r2, [pc, #48]	; (8002494 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002464:	fb02 f303 	mul.w	r3, r2, r3
 8002468:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800246a:	697b      	ldr	r3, [r7, #20]
 800246c:	613b      	str	r3, [r7, #16]
      break;
 800246e:	e002      	b.n	8002476 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002470:	4b05      	ldr	r3, [pc, #20]	; (8002488 <HAL_RCC_GetSysClockFreq+0x98>)
 8002472:	613b      	str	r3, [r7, #16]
      break;
 8002474:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002476:	693b      	ldr	r3, [r7, #16]
}
 8002478:	4618      	mov	r0, r3
 800247a:	371c      	adds	r7, #28
 800247c:	46bd      	mov	sp, r7
 800247e:	bc80      	pop	{r7}
 8002480:	4770      	bx	lr
 8002482:	bf00      	nop
 8002484:	40021000 	.word	0x40021000
 8002488:	007a1200 	.word	0x007a1200
 800248c:	08005e68 	.word	0x08005e68
 8002490:	08005e78 	.word	0x08005e78
 8002494:	003d0900 	.word	0x003d0900

08002498 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002498:	b480      	push	{r7}
 800249a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800249c:	4b02      	ldr	r3, [pc, #8]	; (80024a8 <HAL_RCC_GetHCLKFreq+0x10>)
 800249e:	681b      	ldr	r3, [r3, #0]
}
 80024a0:	4618      	mov	r0, r3
 80024a2:	46bd      	mov	sp, r7
 80024a4:	bc80      	pop	{r7}
 80024a6:	4770      	bx	lr
 80024a8:	20000000 	.word	0x20000000

080024ac <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80024ac:	b480      	push	{r7}
 80024ae:	b085      	sub	sp, #20
 80024b0:	af00      	add	r7, sp, #0
 80024b2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80024b4:	4b0a      	ldr	r3, [pc, #40]	; (80024e0 <RCC_Delay+0x34>)
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	4a0a      	ldr	r2, [pc, #40]	; (80024e4 <RCC_Delay+0x38>)
 80024ba:	fba2 2303 	umull	r2, r3, r2, r3
 80024be:	0a5b      	lsrs	r3, r3, #9
 80024c0:	687a      	ldr	r2, [r7, #4]
 80024c2:	fb02 f303 	mul.w	r3, r2, r3
 80024c6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80024c8:	bf00      	nop
  }
  while (Delay --);
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	1e5a      	subs	r2, r3, #1
 80024ce:	60fa      	str	r2, [r7, #12]
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d1f9      	bne.n	80024c8 <RCC_Delay+0x1c>
}
 80024d4:	bf00      	nop
 80024d6:	bf00      	nop
 80024d8:	3714      	adds	r7, #20
 80024da:	46bd      	mov	sp, r7
 80024dc:	bc80      	pop	{r7}
 80024de:	4770      	bx	lr
 80024e0:	20000000 	.word	0x20000000
 80024e4:	10624dd3 	.word	0x10624dd3

080024e8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80024e8:	b580      	push	{r7, lr}
 80024ea:	b082      	sub	sp, #8
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d101      	bne.n	80024fa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80024f6:	2301      	movs	r3, #1
 80024f8:	e041      	b.n	800257e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002500:	b2db      	uxtb	r3, r3
 8002502:	2b00      	cmp	r3, #0
 8002504:	d106      	bne.n	8002514 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	2200      	movs	r2, #0
 800250a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800250e:	6878      	ldr	r0, [r7, #4]
 8002510:	f7fe ff3e 	bl	8001390 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	2202      	movs	r2, #2
 8002518:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681a      	ldr	r2, [r3, #0]
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	3304      	adds	r3, #4
 8002524:	4619      	mov	r1, r3
 8002526:	4610      	mov	r0, r2
 8002528:	f000 fcb0 	bl	8002e8c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	2201      	movs	r2, #1
 8002530:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	2201      	movs	r2, #1
 8002538:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	2201      	movs	r2, #1
 8002540:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	2201      	movs	r2, #1
 8002548:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	2201      	movs	r2, #1
 8002550:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	2201      	movs	r2, #1
 8002558:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	2201      	movs	r2, #1
 8002560:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	2201      	movs	r2, #1
 8002568:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	2201      	movs	r2, #1
 8002570:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	2201      	movs	r2, #1
 8002578:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800257c:	2300      	movs	r3, #0
}
 800257e:	4618      	mov	r0, r3
 8002580:	3708      	adds	r7, #8
 8002582:	46bd      	mov	sp, r7
 8002584:	bd80      	pop	{r7, pc}
	...

08002588 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002588:	b480      	push	{r7}
 800258a:	b085      	sub	sp, #20
 800258c:	af00      	add	r7, sp, #0
 800258e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002596:	b2db      	uxtb	r3, r3
 8002598:	2b01      	cmp	r3, #1
 800259a:	d001      	beq.n	80025a0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800259c:	2301      	movs	r3, #1
 800259e:	e03a      	b.n	8002616 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	2202      	movs	r2, #2
 80025a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	68da      	ldr	r2, [r3, #12]
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	f042 0201 	orr.w	r2, r2, #1
 80025b6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	4a18      	ldr	r2, [pc, #96]	; (8002620 <HAL_TIM_Base_Start_IT+0x98>)
 80025be:	4293      	cmp	r3, r2
 80025c0:	d00e      	beq.n	80025e0 <HAL_TIM_Base_Start_IT+0x58>
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80025ca:	d009      	beq.n	80025e0 <HAL_TIM_Base_Start_IT+0x58>
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	4a14      	ldr	r2, [pc, #80]	; (8002624 <HAL_TIM_Base_Start_IT+0x9c>)
 80025d2:	4293      	cmp	r3, r2
 80025d4:	d004      	beq.n	80025e0 <HAL_TIM_Base_Start_IT+0x58>
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	4a13      	ldr	r2, [pc, #76]	; (8002628 <HAL_TIM_Base_Start_IT+0xa0>)
 80025dc:	4293      	cmp	r3, r2
 80025de:	d111      	bne.n	8002604 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	689b      	ldr	r3, [r3, #8]
 80025e6:	f003 0307 	and.w	r3, r3, #7
 80025ea:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	2b06      	cmp	r3, #6
 80025f0:	d010      	beq.n	8002614 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	681a      	ldr	r2, [r3, #0]
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	f042 0201 	orr.w	r2, r2, #1
 8002600:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002602:	e007      	b.n	8002614 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	681a      	ldr	r2, [r3, #0]
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	f042 0201 	orr.w	r2, r2, #1
 8002612:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002614:	2300      	movs	r3, #0
}
 8002616:	4618      	mov	r0, r3
 8002618:	3714      	adds	r7, #20
 800261a:	46bd      	mov	sp, r7
 800261c:	bc80      	pop	{r7}
 800261e:	4770      	bx	lr
 8002620:	40012c00 	.word	0x40012c00
 8002624:	40000400 	.word	0x40000400
 8002628:	40000800 	.word	0x40000800

0800262c <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 800262c:	b580      	push	{r7, lr}
 800262e:	b082      	sub	sp, #8
 8002630:	af00      	add	r7, sp, #0
 8002632:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	2b00      	cmp	r3, #0
 8002638:	d101      	bne.n	800263e <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800263a:	2301      	movs	r3, #1
 800263c:	e041      	b.n	80026c2 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002644:	b2db      	uxtb	r3, r3
 8002646:	2b00      	cmp	r3, #0
 8002648:	d106      	bne.n	8002658 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	2200      	movs	r2, #0
 800264e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8002652:	6878      	ldr	r0, [r7, #4]
 8002654:	f000 f839 	bl	80026ca <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	2202      	movs	r2, #2
 800265c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681a      	ldr	r2, [r3, #0]
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	3304      	adds	r3, #4
 8002668:	4619      	mov	r1, r3
 800266a:	4610      	mov	r0, r2
 800266c:	f000 fc0e 	bl	8002e8c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	2201      	movs	r2, #1
 8002674:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	2201      	movs	r2, #1
 800267c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	2201      	movs	r2, #1
 8002684:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	2201      	movs	r2, #1
 800268c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	2201      	movs	r2, #1
 8002694:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	2201      	movs	r2, #1
 800269c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	2201      	movs	r2, #1
 80026a4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	2201      	movs	r2, #1
 80026ac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	2201      	movs	r2, #1
 80026b4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	2201      	movs	r2, #1
 80026bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80026c0:	2300      	movs	r3, #0
}
 80026c2:	4618      	mov	r0, r3
 80026c4:	3708      	adds	r7, #8
 80026c6:	46bd      	mov	sp, r7
 80026c8:	bd80      	pop	{r7, pc}

080026ca <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 80026ca:	b480      	push	{r7}
 80026cc:	b083      	sub	sp, #12
 80026ce:	af00      	add	r7, sp, #0
 80026d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 80026d2:	bf00      	nop
 80026d4:	370c      	adds	r7, #12
 80026d6:	46bd      	mov	sp, r7
 80026d8:	bc80      	pop	{r7}
 80026da:	4770      	bx	lr

080026dc <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80026dc:	b580      	push	{r7, lr}
 80026de:	b084      	sub	sp, #16
 80026e0:	af00      	add	r7, sp, #0
 80026e2:	6078      	str	r0, [r7, #4]
 80026e4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80026e6:	2300      	movs	r3, #0
 80026e8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 80026ea:	683b      	ldr	r3, [r7, #0]
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d104      	bne.n	80026fa <HAL_TIM_IC_Start_IT+0x1e>
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80026f6:	b2db      	uxtb	r3, r3
 80026f8:	e013      	b.n	8002722 <HAL_TIM_IC_Start_IT+0x46>
 80026fa:	683b      	ldr	r3, [r7, #0]
 80026fc:	2b04      	cmp	r3, #4
 80026fe:	d104      	bne.n	800270a <HAL_TIM_IC_Start_IT+0x2e>
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002706:	b2db      	uxtb	r3, r3
 8002708:	e00b      	b.n	8002722 <HAL_TIM_IC_Start_IT+0x46>
 800270a:	683b      	ldr	r3, [r7, #0]
 800270c:	2b08      	cmp	r3, #8
 800270e:	d104      	bne.n	800271a <HAL_TIM_IC_Start_IT+0x3e>
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002716:	b2db      	uxtb	r3, r3
 8002718:	e003      	b.n	8002722 <HAL_TIM_IC_Start_IT+0x46>
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002720:	b2db      	uxtb	r3, r3
 8002722:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8002724:	683b      	ldr	r3, [r7, #0]
 8002726:	2b00      	cmp	r3, #0
 8002728:	d104      	bne.n	8002734 <HAL_TIM_IC_Start_IT+0x58>
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002730:	b2db      	uxtb	r3, r3
 8002732:	e013      	b.n	800275c <HAL_TIM_IC_Start_IT+0x80>
 8002734:	683b      	ldr	r3, [r7, #0]
 8002736:	2b04      	cmp	r3, #4
 8002738:	d104      	bne.n	8002744 <HAL_TIM_IC_Start_IT+0x68>
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8002740:	b2db      	uxtb	r3, r3
 8002742:	e00b      	b.n	800275c <HAL_TIM_IC_Start_IT+0x80>
 8002744:	683b      	ldr	r3, [r7, #0]
 8002746:	2b08      	cmp	r3, #8
 8002748:	d104      	bne.n	8002754 <HAL_TIM_IC_Start_IT+0x78>
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002750:	b2db      	uxtb	r3, r3
 8002752:	e003      	b.n	800275c <HAL_TIM_IC_Start_IT+0x80>
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800275a:	b2db      	uxtb	r3, r3
 800275c:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 800275e:	7bbb      	ldrb	r3, [r7, #14]
 8002760:	2b01      	cmp	r3, #1
 8002762:	d102      	bne.n	800276a <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8002764:	7b7b      	ldrb	r3, [r7, #13]
 8002766:	2b01      	cmp	r3, #1
 8002768:	d001      	beq.n	800276e <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 800276a:	2301      	movs	r3, #1
 800276c:	e0b8      	b.n	80028e0 <HAL_TIM_IC_Start_IT+0x204>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800276e:	683b      	ldr	r3, [r7, #0]
 8002770:	2b00      	cmp	r3, #0
 8002772:	d104      	bne.n	800277e <HAL_TIM_IC_Start_IT+0xa2>
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	2202      	movs	r2, #2
 8002778:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800277c:	e013      	b.n	80027a6 <HAL_TIM_IC_Start_IT+0xca>
 800277e:	683b      	ldr	r3, [r7, #0]
 8002780:	2b04      	cmp	r3, #4
 8002782:	d104      	bne.n	800278e <HAL_TIM_IC_Start_IT+0xb2>
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	2202      	movs	r2, #2
 8002788:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800278c:	e00b      	b.n	80027a6 <HAL_TIM_IC_Start_IT+0xca>
 800278e:	683b      	ldr	r3, [r7, #0]
 8002790:	2b08      	cmp	r3, #8
 8002792:	d104      	bne.n	800279e <HAL_TIM_IC_Start_IT+0xc2>
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	2202      	movs	r2, #2
 8002798:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800279c:	e003      	b.n	80027a6 <HAL_TIM_IC_Start_IT+0xca>
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	2202      	movs	r2, #2
 80027a2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80027a6:	683b      	ldr	r3, [r7, #0]
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d104      	bne.n	80027b6 <HAL_TIM_IC_Start_IT+0xda>
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	2202      	movs	r2, #2
 80027b0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80027b4:	e013      	b.n	80027de <HAL_TIM_IC_Start_IT+0x102>
 80027b6:	683b      	ldr	r3, [r7, #0]
 80027b8:	2b04      	cmp	r3, #4
 80027ba:	d104      	bne.n	80027c6 <HAL_TIM_IC_Start_IT+0xea>
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	2202      	movs	r2, #2
 80027c0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80027c4:	e00b      	b.n	80027de <HAL_TIM_IC_Start_IT+0x102>
 80027c6:	683b      	ldr	r3, [r7, #0]
 80027c8:	2b08      	cmp	r3, #8
 80027ca:	d104      	bne.n	80027d6 <HAL_TIM_IC_Start_IT+0xfa>
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	2202      	movs	r2, #2
 80027d0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80027d4:	e003      	b.n	80027de <HAL_TIM_IC_Start_IT+0x102>
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	2202      	movs	r2, #2
 80027da:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  switch (Channel)
 80027de:	683b      	ldr	r3, [r7, #0]
 80027e0:	2b0c      	cmp	r3, #12
 80027e2:	d841      	bhi.n	8002868 <HAL_TIM_IC_Start_IT+0x18c>
 80027e4:	a201      	add	r2, pc, #4	; (adr r2, 80027ec <HAL_TIM_IC_Start_IT+0x110>)
 80027e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80027ea:	bf00      	nop
 80027ec:	08002821 	.word	0x08002821
 80027f0:	08002869 	.word	0x08002869
 80027f4:	08002869 	.word	0x08002869
 80027f8:	08002869 	.word	0x08002869
 80027fc:	08002833 	.word	0x08002833
 8002800:	08002869 	.word	0x08002869
 8002804:	08002869 	.word	0x08002869
 8002808:	08002869 	.word	0x08002869
 800280c:	08002845 	.word	0x08002845
 8002810:	08002869 	.word	0x08002869
 8002814:	08002869 	.word	0x08002869
 8002818:	08002869 	.word	0x08002869
 800281c:	08002857 	.word	0x08002857
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	68da      	ldr	r2, [r3, #12]
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	f042 0202 	orr.w	r2, r2, #2
 800282e:	60da      	str	r2, [r3, #12]
      break;
 8002830:	e01d      	b.n	800286e <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	68da      	ldr	r2, [r3, #12]
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	f042 0204 	orr.w	r2, r2, #4
 8002840:	60da      	str	r2, [r3, #12]
      break;
 8002842:	e014      	b.n	800286e <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	68da      	ldr	r2, [r3, #12]
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	f042 0208 	orr.w	r2, r2, #8
 8002852:	60da      	str	r2, [r3, #12]
      break;
 8002854:	e00b      	b.n	800286e <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	68da      	ldr	r2, [r3, #12]
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	f042 0210 	orr.w	r2, r2, #16
 8002864:	60da      	str	r2, [r3, #12]
      break;
 8002866:	e002      	b.n	800286e <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8002868:	2301      	movs	r3, #1
 800286a:	73fb      	strb	r3, [r7, #15]
      break;
 800286c:	bf00      	nop
  }

  if (status == HAL_OK)
 800286e:	7bfb      	ldrb	r3, [r7, #15]
 8002870:	2b00      	cmp	r3, #0
 8002872:	d134      	bne.n	80028de <HAL_TIM_IC_Start_IT+0x202>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	2201      	movs	r2, #1
 800287a:	6839      	ldr	r1, [r7, #0]
 800287c:	4618      	mov	r0, r3
 800287e:	f000 fd0a 	bl	8003296 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	4a18      	ldr	r2, [pc, #96]	; (80028e8 <HAL_TIM_IC_Start_IT+0x20c>)
 8002888:	4293      	cmp	r3, r2
 800288a:	d00e      	beq.n	80028aa <HAL_TIM_IC_Start_IT+0x1ce>
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002894:	d009      	beq.n	80028aa <HAL_TIM_IC_Start_IT+0x1ce>
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	4a14      	ldr	r2, [pc, #80]	; (80028ec <HAL_TIM_IC_Start_IT+0x210>)
 800289c:	4293      	cmp	r3, r2
 800289e:	d004      	beq.n	80028aa <HAL_TIM_IC_Start_IT+0x1ce>
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	4a12      	ldr	r2, [pc, #72]	; (80028f0 <HAL_TIM_IC_Start_IT+0x214>)
 80028a6:	4293      	cmp	r3, r2
 80028a8:	d111      	bne.n	80028ce <HAL_TIM_IC_Start_IT+0x1f2>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	689b      	ldr	r3, [r3, #8]
 80028b0:	f003 0307 	and.w	r3, r3, #7
 80028b4:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80028b6:	68bb      	ldr	r3, [r7, #8]
 80028b8:	2b06      	cmp	r3, #6
 80028ba:	d010      	beq.n	80028de <HAL_TIM_IC_Start_IT+0x202>
      {
        __HAL_TIM_ENABLE(htim);
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	681a      	ldr	r2, [r3, #0]
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	f042 0201 	orr.w	r2, r2, #1
 80028ca:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80028cc:	e007      	b.n	80028de <HAL_TIM_IC_Start_IT+0x202>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	681a      	ldr	r2, [r3, #0]
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	f042 0201 	orr.w	r2, r2, #1
 80028dc:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 80028de:	7bfb      	ldrb	r3, [r7, #15]
}
 80028e0:	4618      	mov	r0, r3
 80028e2:	3710      	adds	r7, #16
 80028e4:	46bd      	mov	sp, r7
 80028e6:	bd80      	pop	{r7, pc}
 80028e8:	40012c00 	.word	0x40012c00
 80028ec:	40000400 	.word	0x40000400
 80028f0:	40000800 	.word	0x40000800

080028f4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80028f4:	b580      	push	{r7, lr}
 80028f6:	b082      	sub	sp, #8
 80028f8:	af00      	add	r7, sp, #0
 80028fa:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	691b      	ldr	r3, [r3, #16]
 8002902:	f003 0302 	and.w	r3, r3, #2
 8002906:	2b02      	cmp	r3, #2
 8002908:	d122      	bne.n	8002950 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	68db      	ldr	r3, [r3, #12]
 8002910:	f003 0302 	and.w	r3, r3, #2
 8002914:	2b02      	cmp	r3, #2
 8002916:	d11b      	bne.n	8002950 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	f06f 0202 	mvn.w	r2, #2
 8002920:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	2201      	movs	r2, #1
 8002926:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	699b      	ldr	r3, [r3, #24]
 800292e:	f003 0303 	and.w	r3, r3, #3
 8002932:	2b00      	cmp	r3, #0
 8002934:	d003      	beq.n	800293e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002936:	6878      	ldr	r0, [r7, #4]
 8002938:	f7fe fc5a 	bl	80011f0 <HAL_TIM_IC_CaptureCallback>
 800293c:	e005      	b.n	800294a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800293e:	6878      	ldr	r0, [r7, #4]
 8002940:	f000 fa88 	bl	8002e54 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002944:	6878      	ldr	r0, [r7, #4]
 8002946:	f000 fa8e 	bl	8002e66 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	2200      	movs	r2, #0
 800294e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	691b      	ldr	r3, [r3, #16]
 8002956:	f003 0304 	and.w	r3, r3, #4
 800295a:	2b04      	cmp	r3, #4
 800295c:	d122      	bne.n	80029a4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	68db      	ldr	r3, [r3, #12]
 8002964:	f003 0304 	and.w	r3, r3, #4
 8002968:	2b04      	cmp	r3, #4
 800296a:	d11b      	bne.n	80029a4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	f06f 0204 	mvn.w	r2, #4
 8002974:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	2202      	movs	r2, #2
 800297a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	699b      	ldr	r3, [r3, #24]
 8002982:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002986:	2b00      	cmp	r3, #0
 8002988:	d003      	beq.n	8002992 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800298a:	6878      	ldr	r0, [r7, #4]
 800298c:	f7fe fc30 	bl	80011f0 <HAL_TIM_IC_CaptureCallback>
 8002990:	e005      	b.n	800299e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002992:	6878      	ldr	r0, [r7, #4]
 8002994:	f000 fa5e 	bl	8002e54 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002998:	6878      	ldr	r0, [r7, #4]
 800299a:	f000 fa64 	bl	8002e66 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	2200      	movs	r2, #0
 80029a2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	691b      	ldr	r3, [r3, #16]
 80029aa:	f003 0308 	and.w	r3, r3, #8
 80029ae:	2b08      	cmp	r3, #8
 80029b0:	d122      	bne.n	80029f8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	68db      	ldr	r3, [r3, #12]
 80029b8:	f003 0308 	and.w	r3, r3, #8
 80029bc:	2b08      	cmp	r3, #8
 80029be:	d11b      	bne.n	80029f8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	f06f 0208 	mvn.w	r2, #8
 80029c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	2204      	movs	r2, #4
 80029ce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	69db      	ldr	r3, [r3, #28]
 80029d6:	f003 0303 	and.w	r3, r3, #3
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d003      	beq.n	80029e6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80029de:	6878      	ldr	r0, [r7, #4]
 80029e0:	f7fe fc06 	bl	80011f0 <HAL_TIM_IC_CaptureCallback>
 80029e4:	e005      	b.n	80029f2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80029e6:	6878      	ldr	r0, [r7, #4]
 80029e8:	f000 fa34 	bl	8002e54 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80029ec:	6878      	ldr	r0, [r7, #4]
 80029ee:	f000 fa3a 	bl	8002e66 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	2200      	movs	r2, #0
 80029f6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	691b      	ldr	r3, [r3, #16]
 80029fe:	f003 0310 	and.w	r3, r3, #16
 8002a02:	2b10      	cmp	r3, #16
 8002a04:	d122      	bne.n	8002a4c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	68db      	ldr	r3, [r3, #12]
 8002a0c:	f003 0310 	and.w	r3, r3, #16
 8002a10:	2b10      	cmp	r3, #16
 8002a12:	d11b      	bne.n	8002a4c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	f06f 0210 	mvn.w	r2, #16
 8002a1c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	2208      	movs	r2, #8
 8002a22:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	69db      	ldr	r3, [r3, #28]
 8002a2a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d003      	beq.n	8002a3a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002a32:	6878      	ldr	r0, [r7, #4]
 8002a34:	f7fe fbdc 	bl	80011f0 <HAL_TIM_IC_CaptureCallback>
 8002a38:	e005      	b.n	8002a46 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a3a:	6878      	ldr	r0, [r7, #4]
 8002a3c:	f000 fa0a 	bl	8002e54 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a40:	6878      	ldr	r0, [r7, #4]
 8002a42:	f000 fa10 	bl	8002e66 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	2200      	movs	r2, #0
 8002a4a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	691b      	ldr	r3, [r3, #16]
 8002a52:	f003 0301 	and.w	r3, r3, #1
 8002a56:	2b01      	cmp	r3, #1
 8002a58:	d10e      	bne.n	8002a78 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	68db      	ldr	r3, [r3, #12]
 8002a60:	f003 0301 	and.w	r3, r3, #1
 8002a64:	2b01      	cmp	r3, #1
 8002a66:	d107      	bne.n	8002a78 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	f06f 0201 	mvn.w	r2, #1
 8002a70:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002a72:	6878      	ldr	r0, [r7, #4]
 8002a74:	f7fe fb7e 	bl	8001174 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	691b      	ldr	r3, [r3, #16]
 8002a7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a82:	2b80      	cmp	r3, #128	; 0x80
 8002a84:	d10e      	bne.n	8002aa4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	68db      	ldr	r3, [r3, #12]
 8002a8c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a90:	2b80      	cmp	r3, #128	; 0x80
 8002a92:	d107      	bne.n	8002aa4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002a9c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002a9e:	6878      	ldr	r0, [r7, #4]
 8002aa0:	f000 fc85 	bl	80033ae <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	691b      	ldr	r3, [r3, #16]
 8002aaa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002aae:	2b40      	cmp	r3, #64	; 0x40
 8002ab0:	d10e      	bne.n	8002ad0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	68db      	ldr	r3, [r3, #12]
 8002ab8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002abc:	2b40      	cmp	r3, #64	; 0x40
 8002abe:	d107      	bne.n	8002ad0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002ac8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002aca:	6878      	ldr	r0, [r7, #4]
 8002acc:	f000 f9d4 	bl	8002e78 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	691b      	ldr	r3, [r3, #16]
 8002ad6:	f003 0320 	and.w	r3, r3, #32
 8002ada:	2b20      	cmp	r3, #32
 8002adc:	d10e      	bne.n	8002afc <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	68db      	ldr	r3, [r3, #12]
 8002ae4:	f003 0320 	and.w	r3, r3, #32
 8002ae8:	2b20      	cmp	r3, #32
 8002aea:	d107      	bne.n	8002afc <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	f06f 0220 	mvn.w	r2, #32
 8002af4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002af6:	6878      	ldr	r0, [r7, #4]
 8002af8:	f000 fc50 	bl	800339c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002afc:	bf00      	nop
 8002afe:	3708      	adds	r7, #8
 8002b00:	46bd      	mov	sp, r7
 8002b02:	bd80      	pop	{r7, pc}

08002b04 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8002b04:	b580      	push	{r7, lr}
 8002b06:	b086      	sub	sp, #24
 8002b08:	af00      	add	r7, sp, #0
 8002b0a:	60f8      	str	r0, [r7, #12]
 8002b0c:	60b9      	str	r1, [r7, #8]
 8002b0e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002b10:	2300      	movs	r3, #0
 8002b12:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002b1a:	2b01      	cmp	r3, #1
 8002b1c:	d101      	bne.n	8002b22 <HAL_TIM_IC_ConfigChannel+0x1e>
 8002b1e:	2302      	movs	r3, #2
 8002b20:	e088      	b.n	8002c34 <HAL_TIM_IC_ConfigChannel+0x130>
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	2201      	movs	r2, #1
 8002b26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d11b      	bne.n	8002b68 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	6818      	ldr	r0, [r3, #0]
 8002b34:	68bb      	ldr	r3, [r7, #8]
 8002b36:	6819      	ldr	r1, [r3, #0]
 8002b38:	68bb      	ldr	r3, [r7, #8]
 8002b3a:	685a      	ldr	r2, [r3, #4]
 8002b3c:	68bb      	ldr	r3, [r7, #8]
 8002b3e:	68db      	ldr	r3, [r3, #12]
 8002b40:	f000 fa06 	bl	8002f50 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	699a      	ldr	r2, [r3, #24]
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	f022 020c 	bic.w	r2, r2, #12
 8002b52:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	6999      	ldr	r1, [r3, #24]
 8002b5a:	68bb      	ldr	r3, [r7, #8]
 8002b5c:	689a      	ldr	r2, [r3, #8]
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	430a      	orrs	r2, r1
 8002b64:	619a      	str	r2, [r3, #24]
 8002b66:	e060      	b.n	8002c2a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	2b04      	cmp	r3, #4
 8002b6c:	d11c      	bne.n	8002ba8 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	6818      	ldr	r0, [r3, #0]
 8002b72:	68bb      	ldr	r3, [r7, #8]
 8002b74:	6819      	ldr	r1, [r3, #0]
 8002b76:	68bb      	ldr	r3, [r7, #8]
 8002b78:	685a      	ldr	r2, [r3, #4]
 8002b7a:	68bb      	ldr	r3, [r7, #8]
 8002b7c:	68db      	ldr	r3, [r3, #12]
 8002b7e:	f000 fa6f 	bl	8003060 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	699a      	ldr	r2, [r3, #24]
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8002b90:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	6999      	ldr	r1, [r3, #24]
 8002b98:	68bb      	ldr	r3, [r7, #8]
 8002b9a:	689b      	ldr	r3, [r3, #8]
 8002b9c:	021a      	lsls	r2, r3, #8
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	430a      	orrs	r2, r1
 8002ba4:	619a      	str	r2, [r3, #24]
 8002ba6:	e040      	b.n	8002c2a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	2b08      	cmp	r3, #8
 8002bac:	d11b      	bne.n	8002be6 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	6818      	ldr	r0, [r3, #0]
 8002bb2:	68bb      	ldr	r3, [r7, #8]
 8002bb4:	6819      	ldr	r1, [r3, #0]
 8002bb6:	68bb      	ldr	r3, [r7, #8]
 8002bb8:	685a      	ldr	r2, [r3, #4]
 8002bba:	68bb      	ldr	r3, [r7, #8]
 8002bbc:	68db      	ldr	r3, [r3, #12]
 8002bbe:	f000 faba 	bl	8003136 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	69da      	ldr	r2, [r3, #28]
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	f022 020c 	bic.w	r2, r2, #12
 8002bd0:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	69d9      	ldr	r1, [r3, #28]
 8002bd8:	68bb      	ldr	r3, [r7, #8]
 8002bda:	689a      	ldr	r2, [r3, #8]
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	430a      	orrs	r2, r1
 8002be2:	61da      	str	r2, [r3, #28]
 8002be4:	e021      	b.n	8002c2a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	2b0c      	cmp	r3, #12
 8002bea:	d11c      	bne.n	8002c26 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	6818      	ldr	r0, [r3, #0]
 8002bf0:	68bb      	ldr	r3, [r7, #8]
 8002bf2:	6819      	ldr	r1, [r3, #0]
 8002bf4:	68bb      	ldr	r3, [r7, #8]
 8002bf6:	685a      	ldr	r2, [r3, #4]
 8002bf8:	68bb      	ldr	r3, [r7, #8]
 8002bfa:	68db      	ldr	r3, [r3, #12]
 8002bfc:	f000 fad6 	bl	80031ac <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	69da      	ldr	r2, [r3, #28]
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8002c0e:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	69d9      	ldr	r1, [r3, #28]
 8002c16:	68bb      	ldr	r3, [r7, #8]
 8002c18:	689b      	ldr	r3, [r3, #8]
 8002c1a:	021a      	lsls	r2, r3, #8
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	430a      	orrs	r2, r1
 8002c22:	61da      	str	r2, [r3, #28]
 8002c24:	e001      	b.n	8002c2a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8002c26:	2301      	movs	r3, #1
 8002c28:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	2200      	movs	r2, #0
 8002c2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002c32:	7dfb      	ldrb	r3, [r7, #23]
}
 8002c34:	4618      	mov	r0, r3
 8002c36:	3718      	adds	r7, #24
 8002c38:	46bd      	mov	sp, r7
 8002c3a:	bd80      	pop	{r7, pc}

08002c3c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002c3c:	b580      	push	{r7, lr}
 8002c3e:	b084      	sub	sp, #16
 8002c40:	af00      	add	r7, sp, #0
 8002c42:	6078      	str	r0, [r7, #4]
 8002c44:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002c46:	2300      	movs	r3, #0
 8002c48:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002c50:	2b01      	cmp	r3, #1
 8002c52:	d101      	bne.n	8002c58 <HAL_TIM_ConfigClockSource+0x1c>
 8002c54:	2302      	movs	r3, #2
 8002c56:	e0b4      	b.n	8002dc2 <HAL_TIM_ConfigClockSource+0x186>
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	2201      	movs	r2, #1
 8002c5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	2202      	movs	r2, #2
 8002c64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	689b      	ldr	r3, [r3, #8]
 8002c6e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002c70:	68bb      	ldr	r3, [r7, #8]
 8002c72:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002c76:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002c78:	68bb      	ldr	r3, [r7, #8]
 8002c7a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002c7e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	68ba      	ldr	r2, [r7, #8]
 8002c86:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002c88:	683b      	ldr	r3, [r7, #0]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002c90:	d03e      	beq.n	8002d10 <HAL_TIM_ConfigClockSource+0xd4>
 8002c92:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002c96:	f200 8087 	bhi.w	8002da8 <HAL_TIM_ConfigClockSource+0x16c>
 8002c9a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002c9e:	f000 8086 	beq.w	8002dae <HAL_TIM_ConfigClockSource+0x172>
 8002ca2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002ca6:	d87f      	bhi.n	8002da8 <HAL_TIM_ConfigClockSource+0x16c>
 8002ca8:	2b70      	cmp	r3, #112	; 0x70
 8002caa:	d01a      	beq.n	8002ce2 <HAL_TIM_ConfigClockSource+0xa6>
 8002cac:	2b70      	cmp	r3, #112	; 0x70
 8002cae:	d87b      	bhi.n	8002da8 <HAL_TIM_ConfigClockSource+0x16c>
 8002cb0:	2b60      	cmp	r3, #96	; 0x60
 8002cb2:	d050      	beq.n	8002d56 <HAL_TIM_ConfigClockSource+0x11a>
 8002cb4:	2b60      	cmp	r3, #96	; 0x60
 8002cb6:	d877      	bhi.n	8002da8 <HAL_TIM_ConfigClockSource+0x16c>
 8002cb8:	2b50      	cmp	r3, #80	; 0x50
 8002cba:	d03c      	beq.n	8002d36 <HAL_TIM_ConfigClockSource+0xfa>
 8002cbc:	2b50      	cmp	r3, #80	; 0x50
 8002cbe:	d873      	bhi.n	8002da8 <HAL_TIM_ConfigClockSource+0x16c>
 8002cc0:	2b40      	cmp	r3, #64	; 0x40
 8002cc2:	d058      	beq.n	8002d76 <HAL_TIM_ConfigClockSource+0x13a>
 8002cc4:	2b40      	cmp	r3, #64	; 0x40
 8002cc6:	d86f      	bhi.n	8002da8 <HAL_TIM_ConfigClockSource+0x16c>
 8002cc8:	2b30      	cmp	r3, #48	; 0x30
 8002cca:	d064      	beq.n	8002d96 <HAL_TIM_ConfigClockSource+0x15a>
 8002ccc:	2b30      	cmp	r3, #48	; 0x30
 8002cce:	d86b      	bhi.n	8002da8 <HAL_TIM_ConfigClockSource+0x16c>
 8002cd0:	2b20      	cmp	r3, #32
 8002cd2:	d060      	beq.n	8002d96 <HAL_TIM_ConfigClockSource+0x15a>
 8002cd4:	2b20      	cmp	r3, #32
 8002cd6:	d867      	bhi.n	8002da8 <HAL_TIM_ConfigClockSource+0x16c>
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d05c      	beq.n	8002d96 <HAL_TIM_ConfigClockSource+0x15a>
 8002cdc:	2b10      	cmp	r3, #16
 8002cde:	d05a      	beq.n	8002d96 <HAL_TIM_ConfigClockSource+0x15a>
 8002ce0:	e062      	b.n	8002da8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	6818      	ldr	r0, [r3, #0]
 8002ce6:	683b      	ldr	r3, [r7, #0]
 8002ce8:	6899      	ldr	r1, [r3, #8]
 8002cea:	683b      	ldr	r3, [r7, #0]
 8002cec:	685a      	ldr	r2, [r3, #4]
 8002cee:	683b      	ldr	r3, [r7, #0]
 8002cf0:	68db      	ldr	r3, [r3, #12]
 8002cf2:	f000 fab1 	bl	8003258 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	689b      	ldr	r3, [r3, #8]
 8002cfc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002cfe:	68bb      	ldr	r3, [r7, #8]
 8002d00:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002d04:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	68ba      	ldr	r2, [r7, #8]
 8002d0c:	609a      	str	r2, [r3, #8]
      break;
 8002d0e:	e04f      	b.n	8002db0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	6818      	ldr	r0, [r3, #0]
 8002d14:	683b      	ldr	r3, [r7, #0]
 8002d16:	6899      	ldr	r1, [r3, #8]
 8002d18:	683b      	ldr	r3, [r7, #0]
 8002d1a:	685a      	ldr	r2, [r3, #4]
 8002d1c:	683b      	ldr	r3, [r7, #0]
 8002d1e:	68db      	ldr	r3, [r3, #12]
 8002d20:	f000 fa9a 	bl	8003258 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	689a      	ldr	r2, [r3, #8]
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002d32:	609a      	str	r2, [r3, #8]
      break;
 8002d34:	e03c      	b.n	8002db0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	6818      	ldr	r0, [r3, #0]
 8002d3a:	683b      	ldr	r3, [r7, #0]
 8002d3c:	6859      	ldr	r1, [r3, #4]
 8002d3e:	683b      	ldr	r3, [r7, #0]
 8002d40:	68db      	ldr	r3, [r3, #12]
 8002d42:	461a      	mov	r2, r3
 8002d44:	f000 f95e 	bl	8003004 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	2150      	movs	r1, #80	; 0x50
 8002d4e:	4618      	mov	r0, r3
 8002d50:	f000 fa68 	bl	8003224 <TIM_ITRx_SetConfig>
      break;
 8002d54:	e02c      	b.n	8002db0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	6818      	ldr	r0, [r3, #0]
 8002d5a:	683b      	ldr	r3, [r7, #0]
 8002d5c:	6859      	ldr	r1, [r3, #4]
 8002d5e:	683b      	ldr	r3, [r7, #0]
 8002d60:	68db      	ldr	r3, [r3, #12]
 8002d62:	461a      	mov	r2, r3
 8002d64:	f000 f9b8 	bl	80030d8 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	2160      	movs	r1, #96	; 0x60
 8002d6e:	4618      	mov	r0, r3
 8002d70:	f000 fa58 	bl	8003224 <TIM_ITRx_SetConfig>
      break;
 8002d74:	e01c      	b.n	8002db0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	6818      	ldr	r0, [r3, #0]
 8002d7a:	683b      	ldr	r3, [r7, #0]
 8002d7c:	6859      	ldr	r1, [r3, #4]
 8002d7e:	683b      	ldr	r3, [r7, #0]
 8002d80:	68db      	ldr	r3, [r3, #12]
 8002d82:	461a      	mov	r2, r3
 8002d84:	f000 f93e 	bl	8003004 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	2140      	movs	r1, #64	; 0x40
 8002d8e:	4618      	mov	r0, r3
 8002d90:	f000 fa48 	bl	8003224 <TIM_ITRx_SetConfig>
      break;
 8002d94:	e00c      	b.n	8002db0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681a      	ldr	r2, [r3, #0]
 8002d9a:	683b      	ldr	r3, [r7, #0]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	4619      	mov	r1, r3
 8002da0:	4610      	mov	r0, r2
 8002da2:	f000 fa3f 	bl	8003224 <TIM_ITRx_SetConfig>
      break;
 8002da6:	e003      	b.n	8002db0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002da8:	2301      	movs	r3, #1
 8002daa:	73fb      	strb	r3, [r7, #15]
      break;
 8002dac:	e000      	b.n	8002db0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002dae:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	2201      	movs	r2, #1
 8002db4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	2200      	movs	r2, #0
 8002dbc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002dc0:	7bfb      	ldrb	r3, [r7, #15]
}
 8002dc2:	4618      	mov	r0, r3
 8002dc4:	3710      	adds	r7, #16
 8002dc6:	46bd      	mov	sp, r7
 8002dc8:	bd80      	pop	{r7, pc}
	...

08002dcc <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002dcc:	b480      	push	{r7}
 8002dce:	b085      	sub	sp, #20
 8002dd0:	af00      	add	r7, sp, #0
 8002dd2:	6078      	str	r0, [r7, #4]
 8002dd4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8002dd6:	2300      	movs	r3, #0
 8002dd8:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8002dda:	683b      	ldr	r3, [r7, #0]
 8002ddc:	2b0c      	cmp	r3, #12
 8002dde:	d831      	bhi.n	8002e44 <HAL_TIM_ReadCapturedValue+0x78>
 8002de0:	a201      	add	r2, pc, #4	; (adr r2, 8002de8 <HAL_TIM_ReadCapturedValue+0x1c>)
 8002de2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002de6:	bf00      	nop
 8002de8:	08002e1d 	.word	0x08002e1d
 8002dec:	08002e45 	.word	0x08002e45
 8002df0:	08002e45 	.word	0x08002e45
 8002df4:	08002e45 	.word	0x08002e45
 8002df8:	08002e27 	.word	0x08002e27
 8002dfc:	08002e45 	.word	0x08002e45
 8002e00:	08002e45 	.word	0x08002e45
 8002e04:	08002e45 	.word	0x08002e45
 8002e08:	08002e31 	.word	0x08002e31
 8002e0c:	08002e45 	.word	0x08002e45
 8002e10:	08002e45 	.word	0x08002e45
 8002e14:	08002e45 	.word	0x08002e45
 8002e18:	08002e3b 	.word	0x08002e3b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e22:	60fb      	str	r3, [r7, #12]

      break;
 8002e24:	e00f      	b.n	8002e46 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e2c:	60fb      	str	r3, [r7, #12]

      break;
 8002e2e:	e00a      	b.n	8002e46 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e36:	60fb      	str	r3, [r7, #12]

      break;
 8002e38:	e005      	b.n	8002e46 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e40:	60fb      	str	r3, [r7, #12]

      break;
 8002e42:	e000      	b.n	8002e46 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8002e44:	bf00      	nop
  }

  return tmpreg;
 8002e46:	68fb      	ldr	r3, [r7, #12]
}
 8002e48:	4618      	mov	r0, r3
 8002e4a:	3714      	adds	r7, #20
 8002e4c:	46bd      	mov	sp, r7
 8002e4e:	bc80      	pop	{r7}
 8002e50:	4770      	bx	lr
 8002e52:	bf00      	nop

08002e54 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002e54:	b480      	push	{r7}
 8002e56:	b083      	sub	sp, #12
 8002e58:	af00      	add	r7, sp, #0
 8002e5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002e5c:	bf00      	nop
 8002e5e:	370c      	adds	r7, #12
 8002e60:	46bd      	mov	sp, r7
 8002e62:	bc80      	pop	{r7}
 8002e64:	4770      	bx	lr

08002e66 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002e66:	b480      	push	{r7}
 8002e68:	b083      	sub	sp, #12
 8002e6a:	af00      	add	r7, sp, #0
 8002e6c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002e6e:	bf00      	nop
 8002e70:	370c      	adds	r7, #12
 8002e72:	46bd      	mov	sp, r7
 8002e74:	bc80      	pop	{r7}
 8002e76:	4770      	bx	lr

08002e78 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002e78:	b480      	push	{r7}
 8002e7a:	b083      	sub	sp, #12
 8002e7c:	af00      	add	r7, sp, #0
 8002e7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002e80:	bf00      	nop
 8002e82:	370c      	adds	r7, #12
 8002e84:	46bd      	mov	sp, r7
 8002e86:	bc80      	pop	{r7}
 8002e88:	4770      	bx	lr
	...

08002e8c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002e8c:	b480      	push	{r7}
 8002e8e:	b085      	sub	sp, #20
 8002e90:	af00      	add	r7, sp, #0
 8002e92:	6078      	str	r0, [r7, #4]
 8002e94:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	4a29      	ldr	r2, [pc, #164]	; (8002f44 <TIM_Base_SetConfig+0xb8>)
 8002ea0:	4293      	cmp	r3, r2
 8002ea2:	d00b      	beq.n	8002ebc <TIM_Base_SetConfig+0x30>
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002eaa:	d007      	beq.n	8002ebc <TIM_Base_SetConfig+0x30>
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	4a26      	ldr	r2, [pc, #152]	; (8002f48 <TIM_Base_SetConfig+0xbc>)
 8002eb0:	4293      	cmp	r3, r2
 8002eb2:	d003      	beq.n	8002ebc <TIM_Base_SetConfig+0x30>
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	4a25      	ldr	r2, [pc, #148]	; (8002f4c <TIM_Base_SetConfig+0xc0>)
 8002eb8:	4293      	cmp	r3, r2
 8002eba:	d108      	bne.n	8002ece <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ec2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002ec4:	683b      	ldr	r3, [r7, #0]
 8002ec6:	685b      	ldr	r3, [r3, #4]
 8002ec8:	68fa      	ldr	r2, [r7, #12]
 8002eca:	4313      	orrs	r3, r2
 8002ecc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	4a1c      	ldr	r2, [pc, #112]	; (8002f44 <TIM_Base_SetConfig+0xb8>)
 8002ed2:	4293      	cmp	r3, r2
 8002ed4:	d00b      	beq.n	8002eee <TIM_Base_SetConfig+0x62>
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002edc:	d007      	beq.n	8002eee <TIM_Base_SetConfig+0x62>
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	4a19      	ldr	r2, [pc, #100]	; (8002f48 <TIM_Base_SetConfig+0xbc>)
 8002ee2:	4293      	cmp	r3, r2
 8002ee4:	d003      	beq.n	8002eee <TIM_Base_SetConfig+0x62>
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	4a18      	ldr	r2, [pc, #96]	; (8002f4c <TIM_Base_SetConfig+0xc0>)
 8002eea:	4293      	cmp	r3, r2
 8002eec:	d108      	bne.n	8002f00 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002ef4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002ef6:	683b      	ldr	r3, [r7, #0]
 8002ef8:	68db      	ldr	r3, [r3, #12]
 8002efa:	68fa      	ldr	r2, [r7, #12]
 8002efc:	4313      	orrs	r3, r2
 8002efe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002f06:	683b      	ldr	r3, [r7, #0]
 8002f08:	695b      	ldr	r3, [r3, #20]
 8002f0a:	4313      	orrs	r3, r2
 8002f0c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	68fa      	ldr	r2, [r7, #12]
 8002f12:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002f14:	683b      	ldr	r3, [r7, #0]
 8002f16:	689a      	ldr	r2, [r3, #8]
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002f1c:	683b      	ldr	r3, [r7, #0]
 8002f1e:	681a      	ldr	r2, [r3, #0]
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	4a07      	ldr	r2, [pc, #28]	; (8002f44 <TIM_Base_SetConfig+0xb8>)
 8002f28:	4293      	cmp	r3, r2
 8002f2a:	d103      	bne.n	8002f34 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002f2c:	683b      	ldr	r3, [r7, #0]
 8002f2e:	691a      	ldr	r2, [r3, #16]
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	2201      	movs	r2, #1
 8002f38:	615a      	str	r2, [r3, #20]
}
 8002f3a:	bf00      	nop
 8002f3c:	3714      	adds	r7, #20
 8002f3e:	46bd      	mov	sp, r7
 8002f40:	bc80      	pop	{r7}
 8002f42:	4770      	bx	lr
 8002f44:	40012c00 	.word	0x40012c00
 8002f48:	40000400 	.word	0x40000400
 8002f4c:	40000800 	.word	0x40000800

08002f50 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8002f50:	b480      	push	{r7}
 8002f52:	b087      	sub	sp, #28
 8002f54:	af00      	add	r7, sp, #0
 8002f56:	60f8      	str	r0, [r7, #12]
 8002f58:	60b9      	str	r1, [r7, #8]
 8002f5a:	607a      	str	r2, [r7, #4]
 8002f5c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	6a1b      	ldr	r3, [r3, #32]
 8002f62:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	6a1b      	ldr	r3, [r3, #32]
 8002f68:	f023 0201 	bic.w	r2, r3, #1
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	699b      	ldr	r3, [r3, #24]
 8002f74:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	4a1f      	ldr	r2, [pc, #124]	; (8002ff8 <TIM_TI1_SetConfig+0xa8>)
 8002f7a:	4293      	cmp	r3, r2
 8002f7c:	d00b      	beq.n	8002f96 <TIM_TI1_SetConfig+0x46>
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f84:	d007      	beq.n	8002f96 <TIM_TI1_SetConfig+0x46>
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	4a1c      	ldr	r2, [pc, #112]	; (8002ffc <TIM_TI1_SetConfig+0xac>)
 8002f8a:	4293      	cmp	r3, r2
 8002f8c:	d003      	beq.n	8002f96 <TIM_TI1_SetConfig+0x46>
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	4a1b      	ldr	r2, [pc, #108]	; (8003000 <TIM_TI1_SetConfig+0xb0>)
 8002f92:	4293      	cmp	r3, r2
 8002f94:	d101      	bne.n	8002f9a <TIM_TI1_SetConfig+0x4a>
 8002f96:	2301      	movs	r3, #1
 8002f98:	e000      	b.n	8002f9c <TIM_TI1_SetConfig+0x4c>
 8002f9a:	2300      	movs	r3, #0
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d008      	beq.n	8002fb2 <TIM_TI1_SetConfig+0x62>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8002fa0:	697b      	ldr	r3, [r7, #20]
 8002fa2:	f023 0303 	bic.w	r3, r3, #3
 8002fa6:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8002fa8:	697a      	ldr	r2, [r7, #20]
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	4313      	orrs	r3, r2
 8002fae:	617b      	str	r3, [r7, #20]
 8002fb0:	e003      	b.n	8002fba <TIM_TI1_SetConfig+0x6a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8002fb2:	697b      	ldr	r3, [r7, #20]
 8002fb4:	f043 0301 	orr.w	r3, r3, #1
 8002fb8:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002fba:	697b      	ldr	r3, [r7, #20]
 8002fbc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002fc0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8002fc2:	683b      	ldr	r3, [r7, #0]
 8002fc4:	011b      	lsls	r3, r3, #4
 8002fc6:	b2db      	uxtb	r3, r3
 8002fc8:	697a      	ldr	r2, [r7, #20]
 8002fca:	4313      	orrs	r3, r2
 8002fcc:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002fce:	693b      	ldr	r3, [r7, #16]
 8002fd0:	f023 030a 	bic.w	r3, r3, #10
 8002fd4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8002fd6:	68bb      	ldr	r3, [r7, #8]
 8002fd8:	f003 030a 	and.w	r3, r3, #10
 8002fdc:	693a      	ldr	r2, [r7, #16]
 8002fde:	4313      	orrs	r3, r2
 8002fe0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	697a      	ldr	r2, [r7, #20]
 8002fe6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	693a      	ldr	r2, [r7, #16]
 8002fec:	621a      	str	r2, [r3, #32]
}
 8002fee:	bf00      	nop
 8002ff0:	371c      	adds	r7, #28
 8002ff2:	46bd      	mov	sp, r7
 8002ff4:	bc80      	pop	{r7}
 8002ff6:	4770      	bx	lr
 8002ff8:	40012c00 	.word	0x40012c00
 8002ffc:	40000400 	.word	0x40000400
 8003000:	40000800 	.word	0x40000800

08003004 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003004:	b480      	push	{r7}
 8003006:	b087      	sub	sp, #28
 8003008:	af00      	add	r7, sp, #0
 800300a:	60f8      	str	r0, [r7, #12]
 800300c:	60b9      	str	r1, [r7, #8]
 800300e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	6a1b      	ldr	r3, [r3, #32]
 8003014:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	6a1b      	ldr	r3, [r3, #32]
 800301a:	f023 0201 	bic.w	r2, r3, #1
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	699b      	ldr	r3, [r3, #24]
 8003026:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003028:	693b      	ldr	r3, [r7, #16]
 800302a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800302e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	011b      	lsls	r3, r3, #4
 8003034:	693a      	ldr	r2, [r7, #16]
 8003036:	4313      	orrs	r3, r2
 8003038:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800303a:	697b      	ldr	r3, [r7, #20]
 800303c:	f023 030a 	bic.w	r3, r3, #10
 8003040:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003042:	697a      	ldr	r2, [r7, #20]
 8003044:	68bb      	ldr	r3, [r7, #8]
 8003046:	4313      	orrs	r3, r2
 8003048:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	693a      	ldr	r2, [r7, #16]
 800304e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	697a      	ldr	r2, [r7, #20]
 8003054:	621a      	str	r2, [r3, #32]
}
 8003056:	bf00      	nop
 8003058:	371c      	adds	r7, #28
 800305a:	46bd      	mov	sp, r7
 800305c:	bc80      	pop	{r7}
 800305e:	4770      	bx	lr

08003060 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003060:	b480      	push	{r7}
 8003062:	b087      	sub	sp, #28
 8003064:	af00      	add	r7, sp, #0
 8003066:	60f8      	str	r0, [r7, #12]
 8003068:	60b9      	str	r1, [r7, #8]
 800306a:	607a      	str	r2, [r7, #4]
 800306c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	6a1b      	ldr	r3, [r3, #32]
 8003072:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	6a1b      	ldr	r3, [r3, #32]
 8003078:	f023 0210 	bic.w	r2, r3, #16
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	699b      	ldr	r3, [r3, #24]
 8003084:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8003086:	693b      	ldr	r3, [r7, #16]
 8003088:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800308c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	021b      	lsls	r3, r3, #8
 8003092:	693a      	ldr	r2, [r7, #16]
 8003094:	4313      	orrs	r3, r2
 8003096:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003098:	693b      	ldr	r3, [r7, #16]
 800309a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800309e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80030a0:	683b      	ldr	r3, [r7, #0]
 80030a2:	031b      	lsls	r3, r3, #12
 80030a4:	b29b      	uxth	r3, r3
 80030a6:	693a      	ldr	r2, [r7, #16]
 80030a8:	4313      	orrs	r3, r2
 80030aa:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80030ac:	697b      	ldr	r3, [r7, #20]
 80030ae:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80030b2:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80030b4:	68bb      	ldr	r3, [r7, #8]
 80030b6:	011b      	lsls	r3, r3, #4
 80030b8:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 80030bc:	697a      	ldr	r2, [r7, #20]
 80030be:	4313      	orrs	r3, r2
 80030c0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	693a      	ldr	r2, [r7, #16]
 80030c6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	697a      	ldr	r2, [r7, #20]
 80030cc:	621a      	str	r2, [r3, #32]
}
 80030ce:	bf00      	nop
 80030d0:	371c      	adds	r7, #28
 80030d2:	46bd      	mov	sp, r7
 80030d4:	bc80      	pop	{r7}
 80030d6:	4770      	bx	lr

080030d8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80030d8:	b480      	push	{r7}
 80030da:	b087      	sub	sp, #28
 80030dc:	af00      	add	r7, sp, #0
 80030de:	60f8      	str	r0, [r7, #12]
 80030e0:	60b9      	str	r1, [r7, #8]
 80030e2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	6a1b      	ldr	r3, [r3, #32]
 80030e8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	6a1b      	ldr	r3, [r3, #32]
 80030ee:	f023 0210 	bic.w	r2, r3, #16
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	699b      	ldr	r3, [r3, #24]
 80030fa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80030fc:	693b      	ldr	r3, [r7, #16]
 80030fe:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003102:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	031b      	lsls	r3, r3, #12
 8003108:	693a      	ldr	r2, [r7, #16]
 800310a:	4313      	orrs	r3, r2
 800310c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800310e:	697b      	ldr	r3, [r7, #20]
 8003110:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003114:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003116:	68bb      	ldr	r3, [r7, #8]
 8003118:	011b      	lsls	r3, r3, #4
 800311a:	697a      	ldr	r2, [r7, #20]
 800311c:	4313      	orrs	r3, r2
 800311e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	693a      	ldr	r2, [r7, #16]
 8003124:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	697a      	ldr	r2, [r7, #20]
 800312a:	621a      	str	r2, [r3, #32]
}
 800312c:	bf00      	nop
 800312e:	371c      	adds	r7, #28
 8003130:	46bd      	mov	sp, r7
 8003132:	bc80      	pop	{r7}
 8003134:	4770      	bx	lr

08003136 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003136:	b480      	push	{r7}
 8003138:	b087      	sub	sp, #28
 800313a:	af00      	add	r7, sp, #0
 800313c:	60f8      	str	r0, [r7, #12]
 800313e:	60b9      	str	r1, [r7, #8]
 8003140:	607a      	str	r2, [r7, #4]
 8003142:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	6a1b      	ldr	r3, [r3, #32]
 8003148:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	6a1b      	ldr	r3, [r3, #32]
 800314e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	69db      	ldr	r3, [r3, #28]
 800315a:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800315c:	693b      	ldr	r3, [r7, #16]
 800315e:	f023 0303 	bic.w	r3, r3, #3
 8003162:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 8003164:	693a      	ldr	r2, [r7, #16]
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	4313      	orrs	r3, r2
 800316a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800316c:	693b      	ldr	r3, [r7, #16]
 800316e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003172:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8003174:	683b      	ldr	r3, [r7, #0]
 8003176:	011b      	lsls	r3, r3, #4
 8003178:	b2db      	uxtb	r3, r3
 800317a:	693a      	ldr	r2, [r7, #16]
 800317c:	4313      	orrs	r3, r2
 800317e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P);
 8003180:	697b      	ldr	r3, [r7, #20]
 8003182:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003186:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & TIM_CCER_CC3P);
 8003188:	68bb      	ldr	r3, [r7, #8]
 800318a:	021b      	lsls	r3, r3, #8
 800318c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003190:	697a      	ldr	r2, [r7, #20]
 8003192:	4313      	orrs	r3, r2
 8003194:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	693a      	ldr	r2, [r7, #16]
 800319a:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	697a      	ldr	r2, [r7, #20]
 80031a0:	621a      	str	r2, [r3, #32]
}
 80031a2:	bf00      	nop
 80031a4:	371c      	adds	r7, #28
 80031a6:	46bd      	mov	sp, r7
 80031a8:	bc80      	pop	{r7}
 80031aa:	4770      	bx	lr

080031ac <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80031ac:	b480      	push	{r7}
 80031ae:	b087      	sub	sp, #28
 80031b0:	af00      	add	r7, sp, #0
 80031b2:	60f8      	str	r0, [r7, #12]
 80031b4:	60b9      	str	r1, [r7, #8]
 80031b6:	607a      	str	r2, [r7, #4]
 80031b8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	6a1b      	ldr	r3, [r3, #32]
 80031be:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	6a1b      	ldr	r3, [r3, #32]
 80031c4:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	69db      	ldr	r3, [r3, #28]
 80031d0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 80031d2:	693b      	ldr	r3, [r7, #16]
 80031d4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80031d8:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	021b      	lsls	r3, r3, #8
 80031de:	693a      	ldr	r2, [r7, #16]
 80031e0:	4313      	orrs	r3, r2
 80031e2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 80031e4:	693b      	ldr	r3, [r7, #16]
 80031e6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80031ea:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80031ec:	683b      	ldr	r3, [r7, #0]
 80031ee:	031b      	lsls	r3, r3, #12
 80031f0:	b29b      	uxth	r3, r3
 80031f2:	693a      	ldr	r2, [r7, #16]
 80031f4:	4313      	orrs	r3, r2
 80031f6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P);
 80031f8:	697b      	ldr	r3, [r7, #20]
 80031fa:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80031fe:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & TIM_CCER_CC4P);
 8003200:	68bb      	ldr	r3, [r7, #8]
 8003202:	031b      	lsls	r3, r3, #12
 8003204:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003208:	697a      	ldr	r2, [r7, #20]
 800320a:	4313      	orrs	r3, r2
 800320c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	693a      	ldr	r2, [r7, #16]
 8003212:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	697a      	ldr	r2, [r7, #20]
 8003218:	621a      	str	r2, [r3, #32]
}
 800321a:	bf00      	nop
 800321c:	371c      	adds	r7, #28
 800321e:	46bd      	mov	sp, r7
 8003220:	bc80      	pop	{r7}
 8003222:	4770      	bx	lr

08003224 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003224:	b480      	push	{r7}
 8003226:	b085      	sub	sp, #20
 8003228:	af00      	add	r7, sp, #0
 800322a:	6078      	str	r0, [r7, #4]
 800322c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	689b      	ldr	r3, [r3, #8]
 8003232:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800323a:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800323c:	683a      	ldr	r2, [r7, #0]
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	4313      	orrs	r3, r2
 8003242:	f043 0307 	orr.w	r3, r3, #7
 8003246:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	68fa      	ldr	r2, [r7, #12]
 800324c:	609a      	str	r2, [r3, #8]
}
 800324e:	bf00      	nop
 8003250:	3714      	adds	r7, #20
 8003252:	46bd      	mov	sp, r7
 8003254:	bc80      	pop	{r7}
 8003256:	4770      	bx	lr

08003258 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003258:	b480      	push	{r7}
 800325a:	b087      	sub	sp, #28
 800325c:	af00      	add	r7, sp, #0
 800325e:	60f8      	str	r0, [r7, #12]
 8003260:	60b9      	str	r1, [r7, #8]
 8003262:	607a      	str	r2, [r7, #4]
 8003264:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	689b      	ldr	r3, [r3, #8]
 800326a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800326c:	697b      	ldr	r3, [r7, #20]
 800326e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003272:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003274:	683b      	ldr	r3, [r7, #0]
 8003276:	021a      	lsls	r2, r3, #8
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	431a      	orrs	r2, r3
 800327c:	68bb      	ldr	r3, [r7, #8]
 800327e:	4313      	orrs	r3, r2
 8003280:	697a      	ldr	r2, [r7, #20]
 8003282:	4313      	orrs	r3, r2
 8003284:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	697a      	ldr	r2, [r7, #20]
 800328a:	609a      	str	r2, [r3, #8]
}
 800328c:	bf00      	nop
 800328e:	371c      	adds	r7, #28
 8003290:	46bd      	mov	sp, r7
 8003292:	bc80      	pop	{r7}
 8003294:	4770      	bx	lr

08003296 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003296:	b480      	push	{r7}
 8003298:	b087      	sub	sp, #28
 800329a:	af00      	add	r7, sp, #0
 800329c:	60f8      	str	r0, [r7, #12]
 800329e:	60b9      	str	r1, [r7, #8]
 80032a0:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80032a2:	68bb      	ldr	r3, [r7, #8]
 80032a4:	f003 031f 	and.w	r3, r3, #31
 80032a8:	2201      	movs	r2, #1
 80032aa:	fa02 f303 	lsl.w	r3, r2, r3
 80032ae:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	6a1a      	ldr	r2, [r3, #32]
 80032b4:	697b      	ldr	r3, [r7, #20]
 80032b6:	43db      	mvns	r3, r3
 80032b8:	401a      	ands	r2, r3
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	6a1a      	ldr	r2, [r3, #32]
 80032c2:	68bb      	ldr	r3, [r7, #8]
 80032c4:	f003 031f 	and.w	r3, r3, #31
 80032c8:	6879      	ldr	r1, [r7, #4]
 80032ca:	fa01 f303 	lsl.w	r3, r1, r3
 80032ce:	431a      	orrs	r2, r3
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	621a      	str	r2, [r3, #32]
}
 80032d4:	bf00      	nop
 80032d6:	371c      	adds	r7, #28
 80032d8:	46bd      	mov	sp, r7
 80032da:	bc80      	pop	{r7}
 80032dc:	4770      	bx	lr
	...

080032e0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80032e0:	b480      	push	{r7}
 80032e2:	b085      	sub	sp, #20
 80032e4:	af00      	add	r7, sp, #0
 80032e6:	6078      	str	r0, [r7, #4]
 80032e8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80032f0:	2b01      	cmp	r3, #1
 80032f2:	d101      	bne.n	80032f8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80032f4:	2302      	movs	r3, #2
 80032f6:	e046      	b.n	8003386 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	2201      	movs	r2, #1
 80032fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	2202      	movs	r2, #2
 8003304:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	685b      	ldr	r3, [r3, #4]
 800330e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	689b      	ldr	r3, [r3, #8]
 8003316:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800331e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003320:	683b      	ldr	r3, [r7, #0]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	68fa      	ldr	r2, [r7, #12]
 8003326:	4313      	orrs	r3, r2
 8003328:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	68fa      	ldr	r2, [r7, #12]
 8003330:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	4a16      	ldr	r2, [pc, #88]	; (8003390 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003338:	4293      	cmp	r3, r2
 800333a:	d00e      	beq.n	800335a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003344:	d009      	beq.n	800335a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	4a12      	ldr	r2, [pc, #72]	; (8003394 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 800334c:	4293      	cmp	r3, r2
 800334e:	d004      	beq.n	800335a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	4a10      	ldr	r2, [pc, #64]	; (8003398 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003356:	4293      	cmp	r3, r2
 8003358:	d10c      	bne.n	8003374 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800335a:	68bb      	ldr	r3, [r7, #8]
 800335c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003360:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003362:	683b      	ldr	r3, [r7, #0]
 8003364:	685b      	ldr	r3, [r3, #4]
 8003366:	68ba      	ldr	r2, [r7, #8]
 8003368:	4313      	orrs	r3, r2
 800336a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	68ba      	ldr	r2, [r7, #8]
 8003372:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	2201      	movs	r2, #1
 8003378:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	2200      	movs	r2, #0
 8003380:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003384:	2300      	movs	r3, #0
}
 8003386:	4618      	mov	r0, r3
 8003388:	3714      	adds	r7, #20
 800338a:	46bd      	mov	sp, r7
 800338c:	bc80      	pop	{r7}
 800338e:	4770      	bx	lr
 8003390:	40012c00 	.word	0x40012c00
 8003394:	40000400 	.word	0x40000400
 8003398:	40000800 	.word	0x40000800

0800339c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800339c:	b480      	push	{r7}
 800339e:	b083      	sub	sp, #12
 80033a0:	af00      	add	r7, sp, #0
 80033a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80033a4:	bf00      	nop
 80033a6:	370c      	adds	r7, #12
 80033a8:	46bd      	mov	sp, r7
 80033aa:	bc80      	pop	{r7}
 80033ac:	4770      	bx	lr

080033ae <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80033ae:	b480      	push	{r7}
 80033b0:	b083      	sub	sp, #12
 80033b2:	af00      	add	r7, sp, #0
 80033b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80033b6:	bf00      	nop
 80033b8:	370c      	adds	r7, #12
 80033ba:	46bd      	mov	sp, r7
 80033bc:	bc80      	pop	{r7}
 80033be:	4770      	bx	lr

080033c0 <__errno>:
 80033c0:	4b01      	ldr	r3, [pc, #4]	; (80033c8 <__errno+0x8>)
 80033c2:	6818      	ldr	r0, [r3, #0]
 80033c4:	4770      	bx	lr
 80033c6:	bf00      	nop
 80033c8:	2000000c 	.word	0x2000000c

080033cc <__libc_init_array>:
 80033cc:	b570      	push	{r4, r5, r6, lr}
 80033ce:	2600      	movs	r6, #0
 80033d0:	4d0c      	ldr	r5, [pc, #48]	; (8003404 <__libc_init_array+0x38>)
 80033d2:	4c0d      	ldr	r4, [pc, #52]	; (8003408 <__libc_init_array+0x3c>)
 80033d4:	1b64      	subs	r4, r4, r5
 80033d6:	10a4      	asrs	r4, r4, #2
 80033d8:	42a6      	cmp	r6, r4
 80033da:	d109      	bne.n	80033f0 <__libc_init_array+0x24>
 80033dc:	f002 fd30 	bl	8005e40 <_init>
 80033e0:	2600      	movs	r6, #0
 80033e2:	4d0a      	ldr	r5, [pc, #40]	; (800340c <__libc_init_array+0x40>)
 80033e4:	4c0a      	ldr	r4, [pc, #40]	; (8003410 <__libc_init_array+0x44>)
 80033e6:	1b64      	subs	r4, r4, r5
 80033e8:	10a4      	asrs	r4, r4, #2
 80033ea:	42a6      	cmp	r6, r4
 80033ec:	d105      	bne.n	80033fa <__libc_init_array+0x2e>
 80033ee:	bd70      	pop	{r4, r5, r6, pc}
 80033f0:	f855 3b04 	ldr.w	r3, [r5], #4
 80033f4:	4798      	blx	r3
 80033f6:	3601      	adds	r6, #1
 80033f8:	e7ee      	b.n	80033d8 <__libc_init_array+0xc>
 80033fa:	f855 3b04 	ldr.w	r3, [r5], #4
 80033fe:	4798      	blx	r3
 8003400:	3601      	adds	r6, #1
 8003402:	e7f2      	b.n	80033ea <__libc_init_array+0x1e>
 8003404:	08006254 	.word	0x08006254
 8003408:	08006254 	.word	0x08006254
 800340c:	08006254 	.word	0x08006254
 8003410:	08006258 	.word	0x08006258

08003414 <memset>:
 8003414:	4603      	mov	r3, r0
 8003416:	4402      	add	r2, r0
 8003418:	4293      	cmp	r3, r2
 800341a:	d100      	bne.n	800341e <memset+0xa>
 800341c:	4770      	bx	lr
 800341e:	f803 1b01 	strb.w	r1, [r3], #1
 8003422:	e7f9      	b.n	8003418 <memset+0x4>

08003424 <__cvt>:
 8003424:	2b00      	cmp	r3, #0
 8003426:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800342a:	461f      	mov	r7, r3
 800342c:	bfbb      	ittet	lt
 800342e:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8003432:	461f      	movlt	r7, r3
 8003434:	2300      	movge	r3, #0
 8003436:	232d      	movlt	r3, #45	; 0x2d
 8003438:	b088      	sub	sp, #32
 800343a:	4614      	mov	r4, r2
 800343c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800343e:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8003440:	7013      	strb	r3, [r2, #0]
 8003442:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8003444:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8003448:	f023 0820 	bic.w	r8, r3, #32
 800344c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8003450:	d005      	beq.n	800345e <__cvt+0x3a>
 8003452:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8003456:	d100      	bne.n	800345a <__cvt+0x36>
 8003458:	3501      	adds	r5, #1
 800345a:	2302      	movs	r3, #2
 800345c:	e000      	b.n	8003460 <__cvt+0x3c>
 800345e:	2303      	movs	r3, #3
 8003460:	aa07      	add	r2, sp, #28
 8003462:	9204      	str	r2, [sp, #16]
 8003464:	aa06      	add	r2, sp, #24
 8003466:	e9cd a202 	strd	sl, r2, [sp, #8]
 800346a:	e9cd 3500 	strd	r3, r5, [sp]
 800346e:	4622      	mov	r2, r4
 8003470:	463b      	mov	r3, r7
 8003472:	f000 fcc5 	bl	8003e00 <_dtoa_r>
 8003476:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800347a:	4606      	mov	r6, r0
 800347c:	d102      	bne.n	8003484 <__cvt+0x60>
 800347e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8003480:	07db      	lsls	r3, r3, #31
 8003482:	d522      	bpl.n	80034ca <__cvt+0xa6>
 8003484:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8003488:	eb06 0905 	add.w	r9, r6, r5
 800348c:	d110      	bne.n	80034b0 <__cvt+0x8c>
 800348e:	7833      	ldrb	r3, [r6, #0]
 8003490:	2b30      	cmp	r3, #48	; 0x30
 8003492:	d10a      	bne.n	80034aa <__cvt+0x86>
 8003494:	2200      	movs	r2, #0
 8003496:	2300      	movs	r3, #0
 8003498:	4620      	mov	r0, r4
 800349a:	4639      	mov	r1, r7
 800349c:	f7fd fa84 	bl	80009a8 <__aeabi_dcmpeq>
 80034a0:	b918      	cbnz	r0, 80034aa <__cvt+0x86>
 80034a2:	f1c5 0501 	rsb	r5, r5, #1
 80034a6:	f8ca 5000 	str.w	r5, [sl]
 80034aa:	f8da 3000 	ldr.w	r3, [sl]
 80034ae:	4499      	add	r9, r3
 80034b0:	2200      	movs	r2, #0
 80034b2:	2300      	movs	r3, #0
 80034b4:	4620      	mov	r0, r4
 80034b6:	4639      	mov	r1, r7
 80034b8:	f7fd fa76 	bl	80009a8 <__aeabi_dcmpeq>
 80034bc:	b108      	cbz	r0, 80034c2 <__cvt+0x9e>
 80034be:	f8cd 901c 	str.w	r9, [sp, #28]
 80034c2:	2230      	movs	r2, #48	; 0x30
 80034c4:	9b07      	ldr	r3, [sp, #28]
 80034c6:	454b      	cmp	r3, r9
 80034c8:	d307      	bcc.n	80034da <__cvt+0xb6>
 80034ca:	4630      	mov	r0, r6
 80034cc:	9b07      	ldr	r3, [sp, #28]
 80034ce:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80034d0:	1b9b      	subs	r3, r3, r6
 80034d2:	6013      	str	r3, [r2, #0]
 80034d4:	b008      	add	sp, #32
 80034d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80034da:	1c59      	adds	r1, r3, #1
 80034dc:	9107      	str	r1, [sp, #28]
 80034de:	701a      	strb	r2, [r3, #0]
 80034e0:	e7f0      	b.n	80034c4 <__cvt+0xa0>

080034e2 <__exponent>:
 80034e2:	4603      	mov	r3, r0
 80034e4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80034e6:	2900      	cmp	r1, #0
 80034e8:	f803 2b02 	strb.w	r2, [r3], #2
 80034ec:	bfb6      	itet	lt
 80034ee:	222d      	movlt	r2, #45	; 0x2d
 80034f0:	222b      	movge	r2, #43	; 0x2b
 80034f2:	4249      	neglt	r1, r1
 80034f4:	2909      	cmp	r1, #9
 80034f6:	7042      	strb	r2, [r0, #1]
 80034f8:	dd2b      	ble.n	8003552 <__exponent+0x70>
 80034fa:	f10d 0407 	add.w	r4, sp, #7
 80034fe:	46a4      	mov	ip, r4
 8003500:	270a      	movs	r7, #10
 8003502:	fb91 f6f7 	sdiv	r6, r1, r7
 8003506:	460a      	mov	r2, r1
 8003508:	46a6      	mov	lr, r4
 800350a:	fb07 1516 	mls	r5, r7, r6, r1
 800350e:	2a63      	cmp	r2, #99	; 0x63
 8003510:	f105 0530 	add.w	r5, r5, #48	; 0x30
 8003514:	4631      	mov	r1, r6
 8003516:	f104 34ff 	add.w	r4, r4, #4294967295
 800351a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800351e:	dcf0      	bgt.n	8003502 <__exponent+0x20>
 8003520:	3130      	adds	r1, #48	; 0x30
 8003522:	f1ae 0502 	sub.w	r5, lr, #2
 8003526:	f804 1c01 	strb.w	r1, [r4, #-1]
 800352a:	4629      	mov	r1, r5
 800352c:	1c44      	adds	r4, r0, #1
 800352e:	4561      	cmp	r1, ip
 8003530:	d30a      	bcc.n	8003548 <__exponent+0x66>
 8003532:	f10d 0209 	add.w	r2, sp, #9
 8003536:	eba2 020e 	sub.w	r2, r2, lr
 800353a:	4565      	cmp	r5, ip
 800353c:	bf88      	it	hi
 800353e:	2200      	movhi	r2, #0
 8003540:	4413      	add	r3, r2
 8003542:	1a18      	subs	r0, r3, r0
 8003544:	b003      	add	sp, #12
 8003546:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003548:	f811 2b01 	ldrb.w	r2, [r1], #1
 800354c:	f804 2f01 	strb.w	r2, [r4, #1]!
 8003550:	e7ed      	b.n	800352e <__exponent+0x4c>
 8003552:	2330      	movs	r3, #48	; 0x30
 8003554:	3130      	adds	r1, #48	; 0x30
 8003556:	7083      	strb	r3, [r0, #2]
 8003558:	70c1      	strb	r1, [r0, #3]
 800355a:	1d03      	adds	r3, r0, #4
 800355c:	e7f1      	b.n	8003542 <__exponent+0x60>
	...

08003560 <_printf_float>:
 8003560:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003564:	b091      	sub	sp, #68	; 0x44
 8003566:	460c      	mov	r4, r1
 8003568:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 800356c:	4616      	mov	r6, r2
 800356e:	461f      	mov	r7, r3
 8003570:	4605      	mov	r5, r0
 8003572:	f001 fa33 	bl	80049dc <_localeconv_r>
 8003576:	6803      	ldr	r3, [r0, #0]
 8003578:	4618      	mov	r0, r3
 800357a:	9309      	str	r3, [sp, #36]	; 0x24
 800357c:	f7fc fde8 	bl	8000150 <strlen>
 8003580:	2300      	movs	r3, #0
 8003582:	930e      	str	r3, [sp, #56]	; 0x38
 8003584:	f8d8 3000 	ldr.w	r3, [r8]
 8003588:	900a      	str	r0, [sp, #40]	; 0x28
 800358a:	3307      	adds	r3, #7
 800358c:	f023 0307 	bic.w	r3, r3, #7
 8003590:	f103 0208 	add.w	r2, r3, #8
 8003594:	f894 9018 	ldrb.w	r9, [r4, #24]
 8003598:	f8d4 b000 	ldr.w	fp, [r4]
 800359c:	f8c8 2000 	str.w	r2, [r8]
 80035a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035a4:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80035a8:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 80035ac:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 80035b0:	930b      	str	r3, [sp, #44]	; 0x2c
 80035b2:	f04f 32ff 	mov.w	r2, #4294967295
 80035b6:	4640      	mov	r0, r8
 80035b8:	4b9c      	ldr	r3, [pc, #624]	; (800382c <_printf_float+0x2cc>)
 80035ba:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80035bc:	f7fd fa26 	bl	8000a0c <__aeabi_dcmpun>
 80035c0:	bb70      	cbnz	r0, 8003620 <_printf_float+0xc0>
 80035c2:	f04f 32ff 	mov.w	r2, #4294967295
 80035c6:	4640      	mov	r0, r8
 80035c8:	4b98      	ldr	r3, [pc, #608]	; (800382c <_printf_float+0x2cc>)
 80035ca:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80035cc:	f7fd fa00 	bl	80009d0 <__aeabi_dcmple>
 80035d0:	bb30      	cbnz	r0, 8003620 <_printf_float+0xc0>
 80035d2:	2200      	movs	r2, #0
 80035d4:	2300      	movs	r3, #0
 80035d6:	4640      	mov	r0, r8
 80035d8:	4651      	mov	r1, sl
 80035da:	f7fd f9ef 	bl	80009bc <__aeabi_dcmplt>
 80035de:	b110      	cbz	r0, 80035e6 <_printf_float+0x86>
 80035e0:	232d      	movs	r3, #45	; 0x2d
 80035e2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80035e6:	4b92      	ldr	r3, [pc, #584]	; (8003830 <_printf_float+0x2d0>)
 80035e8:	4892      	ldr	r0, [pc, #584]	; (8003834 <_printf_float+0x2d4>)
 80035ea:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 80035ee:	bf94      	ite	ls
 80035f0:	4698      	movls	r8, r3
 80035f2:	4680      	movhi	r8, r0
 80035f4:	2303      	movs	r3, #3
 80035f6:	f04f 0a00 	mov.w	sl, #0
 80035fa:	6123      	str	r3, [r4, #16]
 80035fc:	f02b 0304 	bic.w	r3, fp, #4
 8003600:	6023      	str	r3, [r4, #0]
 8003602:	4633      	mov	r3, r6
 8003604:	4621      	mov	r1, r4
 8003606:	4628      	mov	r0, r5
 8003608:	9700      	str	r7, [sp, #0]
 800360a:	aa0f      	add	r2, sp, #60	; 0x3c
 800360c:	f000 f9d4 	bl	80039b8 <_printf_common>
 8003610:	3001      	adds	r0, #1
 8003612:	f040 8090 	bne.w	8003736 <_printf_float+0x1d6>
 8003616:	f04f 30ff 	mov.w	r0, #4294967295
 800361a:	b011      	add	sp, #68	; 0x44
 800361c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003620:	4642      	mov	r2, r8
 8003622:	4653      	mov	r3, sl
 8003624:	4640      	mov	r0, r8
 8003626:	4651      	mov	r1, sl
 8003628:	f7fd f9f0 	bl	8000a0c <__aeabi_dcmpun>
 800362c:	b148      	cbz	r0, 8003642 <_printf_float+0xe2>
 800362e:	f1ba 0f00 	cmp.w	sl, #0
 8003632:	bfb8      	it	lt
 8003634:	232d      	movlt	r3, #45	; 0x2d
 8003636:	4880      	ldr	r0, [pc, #512]	; (8003838 <_printf_float+0x2d8>)
 8003638:	bfb8      	it	lt
 800363a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800363e:	4b7f      	ldr	r3, [pc, #508]	; (800383c <_printf_float+0x2dc>)
 8003640:	e7d3      	b.n	80035ea <_printf_float+0x8a>
 8003642:	6863      	ldr	r3, [r4, #4]
 8003644:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8003648:	1c5a      	adds	r2, r3, #1
 800364a:	d142      	bne.n	80036d2 <_printf_float+0x172>
 800364c:	2306      	movs	r3, #6
 800364e:	6063      	str	r3, [r4, #4]
 8003650:	2200      	movs	r2, #0
 8003652:	9206      	str	r2, [sp, #24]
 8003654:	aa0e      	add	r2, sp, #56	; 0x38
 8003656:	e9cd 9204 	strd	r9, r2, [sp, #16]
 800365a:	aa0d      	add	r2, sp, #52	; 0x34
 800365c:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8003660:	9203      	str	r2, [sp, #12]
 8003662:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 8003666:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800366a:	6023      	str	r3, [r4, #0]
 800366c:	6863      	ldr	r3, [r4, #4]
 800366e:	4642      	mov	r2, r8
 8003670:	9300      	str	r3, [sp, #0]
 8003672:	4628      	mov	r0, r5
 8003674:	4653      	mov	r3, sl
 8003676:	910b      	str	r1, [sp, #44]	; 0x2c
 8003678:	f7ff fed4 	bl	8003424 <__cvt>
 800367c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800367e:	4680      	mov	r8, r0
 8003680:	2947      	cmp	r1, #71	; 0x47
 8003682:	990d      	ldr	r1, [sp, #52]	; 0x34
 8003684:	d108      	bne.n	8003698 <_printf_float+0x138>
 8003686:	1cc8      	adds	r0, r1, #3
 8003688:	db02      	blt.n	8003690 <_printf_float+0x130>
 800368a:	6863      	ldr	r3, [r4, #4]
 800368c:	4299      	cmp	r1, r3
 800368e:	dd40      	ble.n	8003712 <_printf_float+0x1b2>
 8003690:	f1a9 0902 	sub.w	r9, r9, #2
 8003694:	fa5f f989 	uxtb.w	r9, r9
 8003698:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800369c:	d81f      	bhi.n	80036de <_printf_float+0x17e>
 800369e:	464a      	mov	r2, r9
 80036a0:	3901      	subs	r1, #1
 80036a2:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80036a6:	910d      	str	r1, [sp, #52]	; 0x34
 80036a8:	f7ff ff1b 	bl	80034e2 <__exponent>
 80036ac:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80036ae:	4682      	mov	sl, r0
 80036b0:	1813      	adds	r3, r2, r0
 80036b2:	2a01      	cmp	r2, #1
 80036b4:	6123      	str	r3, [r4, #16]
 80036b6:	dc02      	bgt.n	80036be <_printf_float+0x15e>
 80036b8:	6822      	ldr	r2, [r4, #0]
 80036ba:	07d2      	lsls	r2, r2, #31
 80036bc:	d501      	bpl.n	80036c2 <_printf_float+0x162>
 80036be:	3301      	adds	r3, #1
 80036c0:	6123      	str	r3, [r4, #16]
 80036c2:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d09b      	beq.n	8003602 <_printf_float+0xa2>
 80036ca:	232d      	movs	r3, #45	; 0x2d
 80036cc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80036d0:	e797      	b.n	8003602 <_printf_float+0xa2>
 80036d2:	2947      	cmp	r1, #71	; 0x47
 80036d4:	d1bc      	bne.n	8003650 <_printf_float+0xf0>
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d1ba      	bne.n	8003650 <_printf_float+0xf0>
 80036da:	2301      	movs	r3, #1
 80036dc:	e7b7      	b.n	800364e <_printf_float+0xee>
 80036de:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 80036e2:	d118      	bne.n	8003716 <_printf_float+0x1b6>
 80036e4:	2900      	cmp	r1, #0
 80036e6:	6863      	ldr	r3, [r4, #4]
 80036e8:	dd0b      	ble.n	8003702 <_printf_float+0x1a2>
 80036ea:	6121      	str	r1, [r4, #16]
 80036ec:	b913      	cbnz	r3, 80036f4 <_printf_float+0x194>
 80036ee:	6822      	ldr	r2, [r4, #0]
 80036f0:	07d0      	lsls	r0, r2, #31
 80036f2:	d502      	bpl.n	80036fa <_printf_float+0x19a>
 80036f4:	3301      	adds	r3, #1
 80036f6:	440b      	add	r3, r1
 80036f8:	6123      	str	r3, [r4, #16]
 80036fa:	f04f 0a00 	mov.w	sl, #0
 80036fe:	65a1      	str	r1, [r4, #88]	; 0x58
 8003700:	e7df      	b.n	80036c2 <_printf_float+0x162>
 8003702:	b913      	cbnz	r3, 800370a <_printf_float+0x1aa>
 8003704:	6822      	ldr	r2, [r4, #0]
 8003706:	07d2      	lsls	r2, r2, #31
 8003708:	d501      	bpl.n	800370e <_printf_float+0x1ae>
 800370a:	3302      	adds	r3, #2
 800370c:	e7f4      	b.n	80036f8 <_printf_float+0x198>
 800370e:	2301      	movs	r3, #1
 8003710:	e7f2      	b.n	80036f8 <_printf_float+0x198>
 8003712:	f04f 0967 	mov.w	r9, #103	; 0x67
 8003716:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003718:	4299      	cmp	r1, r3
 800371a:	db05      	blt.n	8003728 <_printf_float+0x1c8>
 800371c:	6823      	ldr	r3, [r4, #0]
 800371e:	6121      	str	r1, [r4, #16]
 8003720:	07d8      	lsls	r0, r3, #31
 8003722:	d5ea      	bpl.n	80036fa <_printf_float+0x19a>
 8003724:	1c4b      	adds	r3, r1, #1
 8003726:	e7e7      	b.n	80036f8 <_printf_float+0x198>
 8003728:	2900      	cmp	r1, #0
 800372a:	bfcc      	ite	gt
 800372c:	2201      	movgt	r2, #1
 800372e:	f1c1 0202 	rsble	r2, r1, #2
 8003732:	4413      	add	r3, r2
 8003734:	e7e0      	b.n	80036f8 <_printf_float+0x198>
 8003736:	6823      	ldr	r3, [r4, #0]
 8003738:	055a      	lsls	r2, r3, #21
 800373a:	d407      	bmi.n	800374c <_printf_float+0x1ec>
 800373c:	6923      	ldr	r3, [r4, #16]
 800373e:	4642      	mov	r2, r8
 8003740:	4631      	mov	r1, r6
 8003742:	4628      	mov	r0, r5
 8003744:	47b8      	blx	r7
 8003746:	3001      	adds	r0, #1
 8003748:	d12b      	bne.n	80037a2 <_printf_float+0x242>
 800374a:	e764      	b.n	8003616 <_printf_float+0xb6>
 800374c:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8003750:	f240 80dd 	bls.w	800390e <_printf_float+0x3ae>
 8003754:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8003758:	2200      	movs	r2, #0
 800375a:	2300      	movs	r3, #0
 800375c:	f7fd f924 	bl	80009a8 <__aeabi_dcmpeq>
 8003760:	2800      	cmp	r0, #0
 8003762:	d033      	beq.n	80037cc <_printf_float+0x26c>
 8003764:	2301      	movs	r3, #1
 8003766:	4631      	mov	r1, r6
 8003768:	4628      	mov	r0, r5
 800376a:	4a35      	ldr	r2, [pc, #212]	; (8003840 <_printf_float+0x2e0>)
 800376c:	47b8      	blx	r7
 800376e:	3001      	adds	r0, #1
 8003770:	f43f af51 	beq.w	8003616 <_printf_float+0xb6>
 8003774:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8003778:	429a      	cmp	r2, r3
 800377a:	db02      	blt.n	8003782 <_printf_float+0x222>
 800377c:	6823      	ldr	r3, [r4, #0]
 800377e:	07d8      	lsls	r0, r3, #31
 8003780:	d50f      	bpl.n	80037a2 <_printf_float+0x242>
 8003782:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003786:	4631      	mov	r1, r6
 8003788:	4628      	mov	r0, r5
 800378a:	47b8      	blx	r7
 800378c:	3001      	adds	r0, #1
 800378e:	f43f af42 	beq.w	8003616 <_printf_float+0xb6>
 8003792:	f04f 0800 	mov.w	r8, #0
 8003796:	f104 091a 	add.w	r9, r4, #26
 800379a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800379c:	3b01      	subs	r3, #1
 800379e:	4543      	cmp	r3, r8
 80037a0:	dc09      	bgt.n	80037b6 <_printf_float+0x256>
 80037a2:	6823      	ldr	r3, [r4, #0]
 80037a4:	079b      	lsls	r3, r3, #30
 80037a6:	f100 8102 	bmi.w	80039ae <_printf_float+0x44e>
 80037aa:	68e0      	ldr	r0, [r4, #12]
 80037ac:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80037ae:	4298      	cmp	r0, r3
 80037b0:	bfb8      	it	lt
 80037b2:	4618      	movlt	r0, r3
 80037b4:	e731      	b.n	800361a <_printf_float+0xba>
 80037b6:	2301      	movs	r3, #1
 80037b8:	464a      	mov	r2, r9
 80037ba:	4631      	mov	r1, r6
 80037bc:	4628      	mov	r0, r5
 80037be:	47b8      	blx	r7
 80037c0:	3001      	adds	r0, #1
 80037c2:	f43f af28 	beq.w	8003616 <_printf_float+0xb6>
 80037c6:	f108 0801 	add.w	r8, r8, #1
 80037ca:	e7e6      	b.n	800379a <_printf_float+0x23a>
 80037cc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	dc38      	bgt.n	8003844 <_printf_float+0x2e4>
 80037d2:	2301      	movs	r3, #1
 80037d4:	4631      	mov	r1, r6
 80037d6:	4628      	mov	r0, r5
 80037d8:	4a19      	ldr	r2, [pc, #100]	; (8003840 <_printf_float+0x2e0>)
 80037da:	47b8      	blx	r7
 80037dc:	3001      	adds	r0, #1
 80037de:	f43f af1a 	beq.w	8003616 <_printf_float+0xb6>
 80037e2:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80037e6:	4313      	orrs	r3, r2
 80037e8:	d102      	bne.n	80037f0 <_printf_float+0x290>
 80037ea:	6823      	ldr	r3, [r4, #0]
 80037ec:	07d9      	lsls	r1, r3, #31
 80037ee:	d5d8      	bpl.n	80037a2 <_printf_float+0x242>
 80037f0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80037f4:	4631      	mov	r1, r6
 80037f6:	4628      	mov	r0, r5
 80037f8:	47b8      	blx	r7
 80037fa:	3001      	adds	r0, #1
 80037fc:	f43f af0b 	beq.w	8003616 <_printf_float+0xb6>
 8003800:	f04f 0900 	mov.w	r9, #0
 8003804:	f104 0a1a 	add.w	sl, r4, #26
 8003808:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800380a:	425b      	negs	r3, r3
 800380c:	454b      	cmp	r3, r9
 800380e:	dc01      	bgt.n	8003814 <_printf_float+0x2b4>
 8003810:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003812:	e794      	b.n	800373e <_printf_float+0x1de>
 8003814:	2301      	movs	r3, #1
 8003816:	4652      	mov	r2, sl
 8003818:	4631      	mov	r1, r6
 800381a:	4628      	mov	r0, r5
 800381c:	47b8      	blx	r7
 800381e:	3001      	adds	r0, #1
 8003820:	f43f aef9 	beq.w	8003616 <_printf_float+0xb6>
 8003824:	f109 0901 	add.w	r9, r9, #1
 8003828:	e7ee      	b.n	8003808 <_printf_float+0x2a8>
 800382a:	bf00      	nop
 800382c:	7fefffff 	.word	0x7fefffff
 8003830:	08005e80 	.word	0x08005e80
 8003834:	08005e84 	.word	0x08005e84
 8003838:	08005e8c 	.word	0x08005e8c
 800383c:	08005e88 	.word	0x08005e88
 8003840:	08005e90 	.word	0x08005e90
 8003844:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8003846:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003848:	429a      	cmp	r2, r3
 800384a:	bfa8      	it	ge
 800384c:	461a      	movge	r2, r3
 800384e:	2a00      	cmp	r2, #0
 8003850:	4691      	mov	r9, r2
 8003852:	dc37      	bgt.n	80038c4 <_printf_float+0x364>
 8003854:	f04f 0b00 	mov.w	fp, #0
 8003858:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800385c:	f104 021a 	add.w	r2, r4, #26
 8003860:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8003864:	ebaa 0309 	sub.w	r3, sl, r9
 8003868:	455b      	cmp	r3, fp
 800386a:	dc33      	bgt.n	80038d4 <_printf_float+0x374>
 800386c:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8003870:	429a      	cmp	r2, r3
 8003872:	db3b      	blt.n	80038ec <_printf_float+0x38c>
 8003874:	6823      	ldr	r3, [r4, #0]
 8003876:	07da      	lsls	r2, r3, #31
 8003878:	d438      	bmi.n	80038ec <_printf_float+0x38c>
 800387a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800387c:	990d      	ldr	r1, [sp, #52]	; 0x34
 800387e:	eba3 020a 	sub.w	r2, r3, sl
 8003882:	eba3 0901 	sub.w	r9, r3, r1
 8003886:	4591      	cmp	r9, r2
 8003888:	bfa8      	it	ge
 800388a:	4691      	movge	r9, r2
 800388c:	f1b9 0f00 	cmp.w	r9, #0
 8003890:	dc34      	bgt.n	80038fc <_printf_float+0x39c>
 8003892:	f04f 0800 	mov.w	r8, #0
 8003896:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800389a:	f104 0a1a 	add.w	sl, r4, #26
 800389e:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80038a2:	1a9b      	subs	r3, r3, r2
 80038a4:	eba3 0309 	sub.w	r3, r3, r9
 80038a8:	4543      	cmp	r3, r8
 80038aa:	f77f af7a 	ble.w	80037a2 <_printf_float+0x242>
 80038ae:	2301      	movs	r3, #1
 80038b0:	4652      	mov	r2, sl
 80038b2:	4631      	mov	r1, r6
 80038b4:	4628      	mov	r0, r5
 80038b6:	47b8      	blx	r7
 80038b8:	3001      	adds	r0, #1
 80038ba:	f43f aeac 	beq.w	8003616 <_printf_float+0xb6>
 80038be:	f108 0801 	add.w	r8, r8, #1
 80038c2:	e7ec      	b.n	800389e <_printf_float+0x33e>
 80038c4:	4613      	mov	r3, r2
 80038c6:	4631      	mov	r1, r6
 80038c8:	4642      	mov	r2, r8
 80038ca:	4628      	mov	r0, r5
 80038cc:	47b8      	blx	r7
 80038ce:	3001      	adds	r0, #1
 80038d0:	d1c0      	bne.n	8003854 <_printf_float+0x2f4>
 80038d2:	e6a0      	b.n	8003616 <_printf_float+0xb6>
 80038d4:	2301      	movs	r3, #1
 80038d6:	4631      	mov	r1, r6
 80038d8:	4628      	mov	r0, r5
 80038da:	920b      	str	r2, [sp, #44]	; 0x2c
 80038dc:	47b8      	blx	r7
 80038de:	3001      	adds	r0, #1
 80038e0:	f43f ae99 	beq.w	8003616 <_printf_float+0xb6>
 80038e4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80038e6:	f10b 0b01 	add.w	fp, fp, #1
 80038ea:	e7b9      	b.n	8003860 <_printf_float+0x300>
 80038ec:	4631      	mov	r1, r6
 80038ee:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80038f2:	4628      	mov	r0, r5
 80038f4:	47b8      	blx	r7
 80038f6:	3001      	adds	r0, #1
 80038f8:	d1bf      	bne.n	800387a <_printf_float+0x31a>
 80038fa:	e68c      	b.n	8003616 <_printf_float+0xb6>
 80038fc:	464b      	mov	r3, r9
 80038fe:	4631      	mov	r1, r6
 8003900:	4628      	mov	r0, r5
 8003902:	eb08 020a 	add.w	r2, r8, sl
 8003906:	47b8      	blx	r7
 8003908:	3001      	adds	r0, #1
 800390a:	d1c2      	bne.n	8003892 <_printf_float+0x332>
 800390c:	e683      	b.n	8003616 <_printf_float+0xb6>
 800390e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8003910:	2a01      	cmp	r2, #1
 8003912:	dc01      	bgt.n	8003918 <_printf_float+0x3b8>
 8003914:	07db      	lsls	r3, r3, #31
 8003916:	d537      	bpl.n	8003988 <_printf_float+0x428>
 8003918:	2301      	movs	r3, #1
 800391a:	4642      	mov	r2, r8
 800391c:	4631      	mov	r1, r6
 800391e:	4628      	mov	r0, r5
 8003920:	47b8      	blx	r7
 8003922:	3001      	adds	r0, #1
 8003924:	f43f ae77 	beq.w	8003616 <_printf_float+0xb6>
 8003928:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800392c:	4631      	mov	r1, r6
 800392e:	4628      	mov	r0, r5
 8003930:	47b8      	blx	r7
 8003932:	3001      	adds	r0, #1
 8003934:	f43f ae6f 	beq.w	8003616 <_printf_float+0xb6>
 8003938:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800393c:	2200      	movs	r2, #0
 800393e:	2300      	movs	r3, #0
 8003940:	f7fd f832 	bl	80009a8 <__aeabi_dcmpeq>
 8003944:	b9d8      	cbnz	r0, 800397e <_printf_float+0x41e>
 8003946:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003948:	f108 0201 	add.w	r2, r8, #1
 800394c:	3b01      	subs	r3, #1
 800394e:	4631      	mov	r1, r6
 8003950:	4628      	mov	r0, r5
 8003952:	47b8      	blx	r7
 8003954:	3001      	adds	r0, #1
 8003956:	d10e      	bne.n	8003976 <_printf_float+0x416>
 8003958:	e65d      	b.n	8003616 <_printf_float+0xb6>
 800395a:	2301      	movs	r3, #1
 800395c:	464a      	mov	r2, r9
 800395e:	4631      	mov	r1, r6
 8003960:	4628      	mov	r0, r5
 8003962:	47b8      	blx	r7
 8003964:	3001      	adds	r0, #1
 8003966:	f43f ae56 	beq.w	8003616 <_printf_float+0xb6>
 800396a:	f108 0801 	add.w	r8, r8, #1
 800396e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003970:	3b01      	subs	r3, #1
 8003972:	4543      	cmp	r3, r8
 8003974:	dcf1      	bgt.n	800395a <_printf_float+0x3fa>
 8003976:	4653      	mov	r3, sl
 8003978:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800397c:	e6e0      	b.n	8003740 <_printf_float+0x1e0>
 800397e:	f04f 0800 	mov.w	r8, #0
 8003982:	f104 091a 	add.w	r9, r4, #26
 8003986:	e7f2      	b.n	800396e <_printf_float+0x40e>
 8003988:	2301      	movs	r3, #1
 800398a:	4642      	mov	r2, r8
 800398c:	e7df      	b.n	800394e <_printf_float+0x3ee>
 800398e:	2301      	movs	r3, #1
 8003990:	464a      	mov	r2, r9
 8003992:	4631      	mov	r1, r6
 8003994:	4628      	mov	r0, r5
 8003996:	47b8      	blx	r7
 8003998:	3001      	adds	r0, #1
 800399a:	f43f ae3c 	beq.w	8003616 <_printf_float+0xb6>
 800399e:	f108 0801 	add.w	r8, r8, #1
 80039a2:	68e3      	ldr	r3, [r4, #12]
 80039a4:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80039a6:	1a5b      	subs	r3, r3, r1
 80039a8:	4543      	cmp	r3, r8
 80039aa:	dcf0      	bgt.n	800398e <_printf_float+0x42e>
 80039ac:	e6fd      	b.n	80037aa <_printf_float+0x24a>
 80039ae:	f04f 0800 	mov.w	r8, #0
 80039b2:	f104 0919 	add.w	r9, r4, #25
 80039b6:	e7f4      	b.n	80039a2 <_printf_float+0x442>

080039b8 <_printf_common>:
 80039b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80039bc:	4616      	mov	r6, r2
 80039be:	4699      	mov	r9, r3
 80039c0:	688a      	ldr	r2, [r1, #8]
 80039c2:	690b      	ldr	r3, [r1, #16]
 80039c4:	4607      	mov	r7, r0
 80039c6:	4293      	cmp	r3, r2
 80039c8:	bfb8      	it	lt
 80039ca:	4613      	movlt	r3, r2
 80039cc:	6033      	str	r3, [r6, #0]
 80039ce:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80039d2:	460c      	mov	r4, r1
 80039d4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80039d8:	b10a      	cbz	r2, 80039de <_printf_common+0x26>
 80039da:	3301      	adds	r3, #1
 80039dc:	6033      	str	r3, [r6, #0]
 80039de:	6823      	ldr	r3, [r4, #0]
 80039e0:	0699      	lsls	r1, r3, #26
 80039e2:	bf42      	ittt	mi
 80039e4:	6833      	ldrmi	r3, [r6, #0]
 80039e6:	3302      	addmi	r3, #2
 80039e8:	6033      	strmi	r3, [r6, #0]
 80039ea:	6825      	ldr	r5, [r4, #0]
 80039ec:	f015 0506 	ands.w	r5, r5, #6
 80039f0:	d106      	bne.n	8003a00 <_printf_common+0x48>
 80039f2:	f104 0a19 	add.w	sl, r4, #25
 80039f6:	68e3      	ldr	r3, [r4, #12]
 80039f8:	6832      	ldr	r2, [r6, #0]
 80039fa:	1a9b      	subs	r3, r3, r2
 80039fc:	42ab      	cmp	r3, r5
 80039fe:	dc28      	bgt.n	8003a52 <_printf_common+0x9a>
 8003a00:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003a04:	1e13      	subs	r3, r2, #0
 8003a06:	6822      	ldr	r2, [r4, #0]
 8003a08:	bf18      	it	ne
 8003a0a:	2301      	movne	r3, #1
 8003a0c:	0692      	lsls	r2, r2, #26
 8003a0e:	d42d      	bmi.n	8003a6c <_printf_common+0xb4>
 8003a10:	4649      	mov	r1, r9
 8003a12:	4638      	mov	r0, r7
 8003a14:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003a18:	47c0      	blx	r8
 8003a1a:	3001      	adds	r0, #1
 8003a1c:	d020      	beq.n	8003a60 <_printf_common+0xa8>
 8003a1e:	6823      	ldr	r3, [r4, #0]
 8003a20:	68e5      	ldr	r5, [r4, #12]
 8003a22:	f003 0306 	and.w	r3, r3, #6
 8003a26:	2b04      	cmp	r3, #4
 8003a28:	bf18      	it	ne
 8003a2a:	2500      	movne	r5, #0
 8003a2c:	6832      	ldr	r2, [r6, #0]
 8003a2e:	f04f 0600 	mov.w	r6, #0
 8003a32:	68a3      	ldr	r3, [r4, #8]
 8003a34:	bf08      	it	eq
 8003a36:	1aad      	subeq	r5, r5, r2
 8003a38:	6922      	ldr	r2, [r4, #16]
 8003a3a:	bf08      	it	eq
 8003a3c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003a40:	4293      	cmp	r3, r2
 8003a42:	bfc4      	itt	gt
 8003a44:	1a9b      	subgt	r3, r3, r2
 8003a46:	18ed      	addgt	r5, r5, r3
 8003a48:	341a      	adds	r4, #26
 8003a4a:	42b5      	cmp	r5, r6
 8003a4c:	d11a      	bne.n	8003a84 <_printf_common+0xcc>
 8003a4e:	2000      	movs	r0, #0
 8003a50:	e008      	b.n	8003a64 <_printf_common+0xac>
 8003a52:	2301      	movs	r3, #1
 8003a54:	4652      	mov	r2, sl
 8003a56:	4649      	mov	r1, r9
 8003a58:	4638      	mov	r0, r7
 8003a5a:	47c0      	blx	r8
 8003a5c:	3001      	adds	r0, #1
 8003a5e:	d103      	bne.n	8003a68 <_printf_common+0xb0>
 8003a60:	f04f 30ff 	mov.w	r0, #4294967295
 8003a64:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003a68:	3501      	adds	r5, #1
 8003a6a:	e7c4      	b.n	80039f6 <_printf_common+0x3e>
 8003a6c:	2030      	movs	r0, #48	; 0x30
 8003a6e:	18e1      	adds	r1, r4, r3
 8003a70:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003a74:	1c5a      	adds	r2, r3, #1
 8003a76:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003a7a:	4422      	add	r2, r4
 8003a7c:	3302      	adds	r3, #2
 8003a7e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003a82:	e7c5      	b.n	8003a10 <_printf_common+0x58>
 8003a84:	2301      	movs	r3, #1
 8003a86:	4622      	mov	r2, r4
 8003a88:	4649      	mov	r1, r9
 8003a8a:	4638      	mov	r0, r7
 8003a8c:	47c0      	blx	r8
 8003a8e:	3001      	adds	r0, #1
 8003a90:	d0e6      	beq.n	8003a60 <_printf_common+0xa8>
 8003a92:	3601      	adds	r6, #1
 8003a94:	e7d9      	b.n	8003a4a <_printf_common+0x92>
	...

08003a98 <_printf_i>:
 8003a98:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003a9c:	7e0f      	ldrb	r7, [r1, #24]
 8003a9e:	4691      	mov	r9, r2
 8003aa0:	2f78      	cmp	r7, #120	; 0x78
 8003aa2:	4680      	mov	r8, r0
 8003aa4:	460c      	mov	r4, r1
 8003aa6:	469a      	mov	sl, r3
 8003aa8:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003aaa:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8003aae:	d807      	bhi.n	8003ac0 <_printf_i+0x28>
 8003ab0:	2f62      	cmp	r7, #98	; 0x62
 8003ab2:	d80a      	bhi.n	8003aca <_printf_i+0x32>
 8003ab4:	2f00      	cmp	r7, #0
 8003ab6:	f000 80d9 	beq.w	8003c6c <_printf_i+0x1d4>
 8003aba:	2f58      	cmp	r7, #88	; 0x58
 8003abc:	f000 80a4 	beq.w	8003c08 <_printf_i+0x170>
 8003ac0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003ac4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003ac8:	e03a      	b.n	8003b40 <_printf_i+0xa8>
 8003aca:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003ace:	2b15      	cmp	r3, #21
 8003ad0:	d8f6      	bhi.n	8003ac0 <_printf_i+0x28>
 8003ad2:	a101      	add	r1, pc, #4	; (adr r1, 8003ad8 <_printf_i+0x40>)
 8003ad4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003ad8:	08003b31 	.word	0x08003b31
 8003adc:	08003b45 	.word	0x08003b45
 8003ae0:	08003ac1 	.word	0x08003ac1
 8003ae4:	08003ac1 	.word	0x08003ac1
 8003ae8:	08003ac1 	.word	0x08003ac1
 8003aec:	08003ac1 	.word	0x08003ac1
 8003af0:	08003b45 	.word	0x08003b45
 8003af4:	08003ac1 	.word	0x08003ac1
 8003af8:	08003ac1 	.word	0x08003ac1
 8003afc:	08003ac1 	.word	0x08003ac1
 8003b00:	08003ac1 	.word	0x08003ac1
 8003b04:	08003c53 	.word	0x08003c53
 8003b08:	08003b75 	.word	0x08003b75
 8003b0c:	08003c35 	.word	0x08003c35
 8003b10:	08003ac1 	.word	0x08003ac1
 8003b14:	08003ac1 	.word	0x08003ac1
 8003b18:	08003c75 	.word	0x08003c75
 8003b1c:	08003ac1 	.word	0x08003ac1
 8003b20:	08003b75 	.word	0x08003b75
 8003b24:	08003ac1 	.word	0x08003ac1
 8003b28:	08003ac1 	.word	0x08003ac1
 8003b2c:	08003c3d 	.word	0x08003c3d
 8003b30:	682b      	ldr	r3, [r5, #0]
 8003b32:	1d1a      	adds	r2, r3, #4
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	602a      	str	r2, [r5, #0]
 8003b38:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003b3c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003b40:	2301      	movs	r3, #1
 8003b42:	e0a4      	b.n	8003c8e <_printf_i+0x1f6>
 8003b44:	6820      	ldr	r0, [r4, #0]
 8003b46:	6829      	ldr	r1, [r5, #0]
 8003b48:	0606      	lsls	r6, r0, #24
 8003b4a:	f101 0304 	add.w	r3, r1, #4
 8003b4e:	d50a      	bpl.n	8003b66 <_printf_i+0xce>
 8003b50:	680e      	ldr	r6, [r1, #0]
 8003b52:	602b      	str	r3, [r5, #0]
 8003b54:	2e00      	cmp	r6, #0
 8003b56:	da03      	bge.n	8003b60 <_printf_i+0xc8>
 8003b58:	232d      	movs	r3, #45	; 0x2d
 8003b5a:	4276      	negs	r6, r6
 8003b5c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003b60:	230a      	movs	r3, #10
 8003b62:	485e      	ldr	r0, [pc, #376]	; (8003cdc <_printf_i+0x244>)
 8003b64:	e019      	b.n	8003b9a <_printf_i+0x102>
 8003b66:	680e      	ldr	r6, [r1, #0]
 8003b68:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003b6c:	602b      	str	r3, [r5, #0]
 8003b6e:	bf18      	it	ne
 8003b70:	b236      	sxthne	r6, r6
 8003b72:	e7ef      	b.n	8003b54 <_printf_i+0xbc>
 8003b74:	682b      	ldr	r3, [r5, #0]
 8003b76:	6820      	ldr	r0, [r4, #0]
 8003b78:	1d19      	adds	r1, r3, #4
 8003b7a:	6029      	str	r1, [r5, #0]
 8003b7c:	0601      	lsls	r1, r0, #24
 8003b7e:	d501      	bpl.n	8003b84 <_printf_i+0xec>
 8003b80:	681e      	ldr	r6, [r3, #0]
 8003b82:	e002      	b.n	8003b8a <_printf_i+0xf2>
 8003b84:	0646      	lsls	r6, r0, #25
 8003b86:	d5fb      	bpl.n	8003b80 <_printf_i+0xe8>
 8003b88:	881e      	ldrh	r6, [r3, #0]
 8003b8a:	2f6f      	cmp	r7, #111	; 0x6f
 8003b8c:	bf0c      	ite	eq
 8003b8e:	2308      	moveq	r3, #8
 8003b90:	230a      	movne	r3, #10
 8003b92:	4852      	ldr	r0, [pc, #328]	; (8003cdc <_printf_i+0x244>)
 8003b94:	2100      	movs	r1, #0
 8003b96:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003b9a:	6865      	ldr	r5, [r4, #4]
 8003b9c:	2d00      	cmp	r5, #0
 8003b9e:	bfa8      	it	ge
 8003ba0:	6821      	ldrge	r1, [r4, #0]
 8003ba2:	60a5      	str	r5, [r4, #8]
 8003ba4:	bfa4      	itt	ge
 8003ba6:	f021 0104 	bicge.w	r1, r1, #4
 8003baa:	6021      	strge	r1, [r4, #0]
 8003bac:	b90e      	cbnz	r6, 8003bb2 <_printf_i+0x11a>
 8003bae:	2d00      	cmp	r5, #0
 8003bb0:	d04d      	beq.n	8003c4e <_printf_i+0x1b6>
 8003bb2:	4615      	mov	r5, r2
 8003bb4:	fbb6 f1f3 	udiv	r1, r6, r3
 8003bb8:	fb03 6711 	mls	r7, r3, r1, r6
 8003bbc:	5dc7      	ldrb	r7, [r0, r7]
 8003bbe:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8003bc2:	4637      	mov	r7, r6
 8003bc4:	42bb      	cmp	r3, r7
 8003bc6:	460e      	mov	r6, r1
 8003bc8:	d9f4      	bls.n	8003bb4 <_printf_i+0x11c>
 8003bca:	2b08      	cmp	r3, #8
 8003bcc:	d10b      	bne.n	8003be6 <_printf_i+0x14e>
 8003bce:	6823      	ldr	r3, [r4, #0]
 8003bd0:	07de      	lsls	r6, r3, #31
 8003bd2:	d508      	bpl.n	8003be6 <_printf_i+0x14e>
 8003bd4:	6923      	ldr	r3, [r4, #16]
 8003bd6:	6861      	ldr	r1, [r4, #4]
 8003bd8:	4299      	cmp	r1, r3
 8003bda:	bfde      	ittt	le
 8003bdc:	2330      	movle	r3, #48	; 0x30
 8003bde:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003be2:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003be6:	1b52      	subs	r2, r2, r5
 8003be8:	6122      	str	r2, [r4, #16]
 8003bea:	464b      	mov	r3, r9
 8003bec:	4621      	mov	r1, r4
 8003bee:	4640      	mov	r0, r8
 8003bf0:	f8cd a000 	str.w	sl, [sp]
 8003bf4:	aa03      	add	r2, sp, #12
 8003bf6:	f7ff fedf 	bl	80039b8 <_printf_common>
 8003bfa:	3001      	adds	r0, #1
 8003bfc:	d14c      	bne.n	8003c98 <_printf_i+0x200>
 8003bfe:	f04f 30ff 	mov.w	r0, #4294967295
 8003c02:	b004      	add	sp, #16
 8003c04:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003c08:	4834      	ldr	r0, [pc, #208]	; (8003cdc <_printf_i+0x244>)
 8003c0a:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8003c0e:	6829      	ldr	r1, [r5, #0]
 8003c10:	6823      	ldr	r3, [r4, #0]
 8003c12:	f851 6b04 	ldr.w	r6, [r1], #4
 8003c16:	6029      	str	r1, [r5, #0]
 8003c18:	061d      	lsls	r5, r3, #24
 8003c1a:	d514      	bpl.n	8003c46 <_printf_i+0x1ae>
 8003c1c:	07df      	lsls	r7, r3, #31
 8003c1e:	bf44      	itt	mi
 8003c20:	f043 0320 	orrmi.w	r3, r3, #32
 8003c24:	6023      	strmi	r3, [r4, #0]
 8003c26:	b91e      	cbnz	r6, 8003c30 <_printf_i+0x198>
 8003c28:	6823      	ldr	r3, [r4, #0]
 8003c2a:	f023 0320 	bic.w	r3, r3, #32
 8003c2e:	6023      	str	r3, [r4, #0]
 8003c30:	2310      	movs	r3, #16
 8003c32:	e7af      	b.n	8003b94 <_printf_i+0xfc>
 8003c34:	6823      	ldr	r3, [r4, #0]
 8003c36:	f043 0320 	orr.w	r3, r3, #32
 8003c3a:	6023      	str	r3, [r4, #0]
 8003c3c:	2378      	movs	r3, #120	; 0x78
 8003c3e:	4828      	ldr	r0, [pc, #160]	; (8003ce0 <_printf_i+0x248>)
 8003c40:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003c44:	e7e3      	b.n	8003c0e <_printf_i+0x176>
 8003c46:	0659      	lsls	r1, r3, #25
 8003c48:	bf48      	it	mi
 8003c4a:	b2b6      	uxthmi	r6, r6
 8003c4c:	e7e6      	b.n	8003c1c <_printf_i+0x184>
 8003c4e:	4615      	mov	r5, r2
 8003c50:	e7bb      	b.n	8003bca <_printf_i+0x132>
 8003c52:	682b      	ldr	r3, [r5, #0]
 8003c54:	6826      	ldr	r6, [r4, #0]
 8003c56:	1d18      	adds	r0, r3, #4
 8003c58:	6961      	ldr	r1, [r4, #20]
 8003c5a:	6028      	str	r0, [r5, #0]
 8003c5c:	0635      	lsls	r5, r6, #24
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	d501      	bpl.n	8003c66 <_printf_i+0x1ce>
 8003c62:	6019      	str	r1, [r3, #0]
 8003c64:	e002      	b.n	8003c6c <_printf_i+0x1d4>
 8003c66:	0670      	lsls	r0, r6, #25
 8003c68:	d5fb      	bpl.n	8003c62 <_printf_i+0x1ca>
 8003c6a:	8019      	strh	r1, [r3, #0]
 8003c6c:	2300      	movs	r3, #0
 8003c6e:	4615      	mov	r5, r2
 8003c70:	6123      	str	r3, [r4, #16]
 8003c72:	e7ba      	b.n	8003bea <_printf_i+0x152>
 8003c74:	682b      	ldr	r3, [r5, #0]
 8003c76:	2100      	movs	r1, #0
 8003c78:	1d1a      	adds	r2, r3, #4
 8003c7a:	602a      	str	r2, [r5, #0]
 8003c7c:	681d      	ldr	r5, [r3, #0]
 8003c7e:	6862      	ldr	r2, [r4, #4]
 8003c80:	4628      	mov	r0, r5
 8003c82:	f000 feb7 	bl	80049f4 <memchr>
 8003c86:	b108      	cbz	r0, 8003c8c <_printf_i+0x1f4>
 8003c88:	1b40      	subs	r0, r0, r5
 8003c8a:	6060      	str	r0, [r4, #4]
 8003c8c:	6863      	ldr	r3, [r4, #4]
 8003c8e:	6123      	str	r3, [r4, #16]
 8003c90:	2300      	movs	r3, #0
 8003c92:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003c96:	e7a8      	b.n	8003bea <_printf_i+0x152>
 8003c98:	462a      	mov	r2, r5
 8003c9a:	4649      	mov	r1, r9
 8003c9c:	4640      	mov	r0, r8
 8003c9e:	6923      	ldr	r3, [r4, #16]
 8003ca0:	47d0      	blx	sl
 8003ca2:	3001      	adds	r0, #1
 8003ca4:	d0ab      	beq.n	8003bfe <_printf_i+0x166>
 8003ca6:	6823      	ldr	r3, [r4, #0]
 8003ca8:	079b      	lsls	r3, r3, #30
 8003caa:	d413      	bmi.n	8003cd4 <_printf_i+0x23c>
 8003cac:	68e0      	ldr	r0, [r4, #12]
 8003cae:	9b03      	ldr	r3, [sp, #12]
 8003cb0:	4298      	cmp	r0, r3
 8003cb2:	bfb8      	it	lt
 8003cb4:	4618      	movlt	r0, r3
 8003cb6:	e7a4      	b.n	8003c02 <_printf_i+0x16a>
 8003cb8:	2301      	movs	r3, #1
 8003cba:	4632      	mov	r2, r6
 8003cbc:	4649      	mov	r1, r9
 8003cbe:	4640      	mov	r0, r8
 8003cc0:	47d0      	blx	sl
 8003cc2:	3001      	adds	r0, #1
 8003cc4:	d09b      	beq.n	8003bfe <_printf_i+0x166>
 8003cc6:	3501      	adds	r5, #1
 8003cc8:	68e3      	ldr	r3, [r4, #12]
 8003cca:	9903      	ldr	r1, [sp, #12]
 8003ccc:	1a5b      	subs	r3, r3, r1
 8003cce:	42ab      	cmp	r3, r5
 8003cd0:	dcf2      	bgt.n	8003cb8 <_printf_i+0x220>
 8003cd2:	e7eb      	b.n	8003cac <_printf_i+0x214>
 8003cd4:	2500      	movs	r5, #0
 8003cd6:	f104 0619 	add.w	r6, r4, #25
 8003cda:	e7f5      	b.n	8003cc8 <_printf_i+0x230>
 8003cdc:	08005e92 	.word	0x08005e92
 8003ce0:	08005ea3 	.word	0x08005ea3

08003ce4 <quorem>:
 8003ce4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003ce8:	6903      	ldr	r3, [r0, #16]
 8003cea:	690c      	ldr	r4, [r1, #16]
 8003cec:	4607      	mov	r7, r0
 8003cee:	42a3      	cmp	r3, r4
 8003cf0:	f2c0 8082 	blt.w	8003df8 <quorem+0x114>
 8003cf4:	3c01      	subs	r4, #1
 8003cf6:	f100 0514 	add.w	r5, r0, #20
 8003cfa:	f101 0814 	add.w	r8, r1, #20
 8003cfe:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8003d02:	9301      	str	r3, [sp, #4]
 8003d04:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8003d08:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8003d0c:	3301      	adds	r3, #1
 8003d0e:	429a      	cmp	r2, r3
 8003d10:	fbb2 f6f3 	udiv	r6, r2, r3
 8003d14:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8003d18:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8003d1c:	d331      	bcc.n	8003d82 <quorem+0x9e>
 8003d1e:	f04f 0e00 	mov.w	lr, #0
 8003d22:	4640      	mov	r0, r8
 8003d24:	46ac      	mov	ip, r5
 8003d26:	46f2      	mov	sl, lr
 8003d28:	f850 2b04 	ldr.w	r2, [r0], #4
 8003d2c:	b293      	uxth	r3, r2
 8003d2e:	fb06 e303 	mla	r3, r6, r3, lr
 8003d32:	0c12      	lsrs	r2, r2, #16
 8003d34:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8003d38:	b29b      	uxth	r3, r3
 8003d3a:	fb06 e202 	mla	r2, r6, r2, lr
 8003d3e:	ebaa 0303 	sub.w	r3, sl, r3
 8003d42:	f8dc a000 	ldr.w	sl, [ip]
 8003d46:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8003d4a:	fa1f fa8a 	uxth.w	sl, sl
 8003d4e:	4453      	add	r3, sl
 8003d50:	f8dc a000 	ldr.w	sl, [ip]
 8003d54:	b292      	uxth	r2, r2
 8003d56:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8003d5a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8003d5e:	b29b      	uxth	r3, r3
 8003d60:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8003d64:	4581      	cmp	r9, r0
 8003d66:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8003d6a:	f84c 3b04 	str.w	r3, [ip], #4
 8003d6e:	d2db      	bcs.n	8003d28 <quorem+0x44>
 8003d70:	f855 300b 	ldr.w	r3, [r5, fp]
 8003d74:	b92b      	cbnz	r3, 8003d82 <quorem+0x9e>
 8003d76:	9b01      	ldr	r3, [sp, #4]
 8003d78:	3b04      	subs	r3, #4
 8003d7a:	429d      	cmp	r5, r3
 8003d7c:	461a      	mov	r2, r3
 8003d7e:	d32f      	bcc.n	8003de0 <quorem+0xfc>
 8003d80:	613c      	str	r4, [r7, #16]
 8003d82:	4638      	mov	r0, r7
 8003d84:	f001 f8d0 	bl	8004f28 <__mcmp>
 8003d88:	2800      	cmp	r0, #0
 8003d8a:	db25      	blt.n	8003dd8 <quorem+0xf4>
 8003d8c:	4628      	mov	r0, r5
 8003d8e:	f04f 0c00 	mov.w	ip, #0
 8003d92:	3601      	adds	r6, #1
 8003d94:	f858 1b04 	ldr.w	r1, [r8], #4
 8003d98:	f8d0 e000 	ldr.w	lr, [r0]
 8003d9c:	b28b      	uxth	r3, r1
 8003d9e:	ebac 0303 	sub.w	r3, ip, r3
 8003da2:	fa1f f28e 	uxth.w	r2, lr
 8003da6:	4413      	add	r3, r2
 8003da8:	0c0a      	lsrs	r2, r1, #16
 8003daa:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8003dae:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8003db2:	b29b      	uxth	r3, r3
 8003db4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8003db8:	45c1      	cmp	r9, r8
 8003dba:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8003dbe:	f840 3b04 	str.w	r3, [r0], #4
 8003dc2:	d2e7      	bcs.n	8003d94 <quorem+0xb0>
 8003dc4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8003dc8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8003dcc:	b922      	cbnz	r2, 8003dd8 <quorem+0xf4>
 8003dce:	3b04      	subs	r3, #4
 8003dd0:	429d      	cmp	r5, r3
 8003dd2:	461a      	mov	r2, r3
 8003dd4:	d30a      	bcc.n	8003dec <quorem+0x108>
 8003dd6:	613c      	str	r4, [r7, #16]
 8003dd8:	4630      	mov	r0, r6
 8003dda:	b003      	add	sp, #12
 8003ddc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003de0:	6812      	ldr	r2, [r2, #0]
 8003de2:	3b04      	subs	r3, #4
 8003de4:	2a00      	cmp	r2, #0
 8003de6:	d1cb      	bne.n	8003d80 <quorem+0x9c>
 8003de8:	3c01      	subs	r4, #1
 8003dea:	e7c6      	b.n	8003d7a <quorem+0x96>
 8003dec:	6812      	ldr	r2, [r2, #0]
 8003dee:	3b04      	subs	r3, #4
 8003df0:	2a00      	cmp	r2, #0
 8003df2:	d1f0      	bne.n	8003dd6 <quorem+0xf2>
 8003df4:	3c01      	subs	r4, #1
 8003df6:	e7eb      	b.n	8003dd0 <quorem+0xec>
 8003df8:	2000      	movs	r0, #0
 8003dfa:	e7ee      	b.n	8003dda <quorem+0xf6>
 8003dfc:	0000      	movs	r0, r0
	...

08003e00 <_dtoa_r>:
 8003e00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003e04:	4616      	mov	r6, r2
 8003e06:	461f      	mov	r7, r3
 8003e08:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8003e0a:	b099      	sub	sp, #100	; 0x64
 8003e0c:	4605      	mov	r5, r0
 8003e0e:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8003e12:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 8003e16:	b974      	cbnz	r4, 8003e36 <_dtoa_r+0x36>
 8003e18:	2010      	movs	r0, #16
 8003e1a:	f000 fde3 	bl	80049e4 <malloc>
 8003e1e:	4602      	mov	r2, r0
 8003e20:	6268      	str	r0, [r5, #36]	; 0x24
 8003e22:	b920      	cbnz	r0, 8003e2e <_dtoa_r+0x2e>
 8003e24:	21ea      	movs	r1, #234	; 0xea
 8003e26:	4ba8      	ldr	r3, [pc, #672]	; (80040c8 <_dtoa_r+0x2c8>)
 8003e28:	48a8      	ldr	r0, [pc, #672]	; (80040cc <_dtoa_r+0x2cc>)
 8003e2a:	f001 fa81 	bl	8005330 <__assert_func>
 8003e2e:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8003e32:	6004      	str	r4, [r0, #0]
 8003e34:	60c4      	str	r4, [r0, #12]
 8003e36:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8003e38:	6819      	ldr	r1, [r3, #0]
 8003e3a:	b151      	cbz	r1, 8003e52 <_dtoa_r+0x52>
 8003e3c:	685a      	ldr	r2, [r3, #4]
 8003e3e:	2301      	movs	r3, #1
 8003e40:	4093      	lsls	r3, r2
 8003e42:	604a      	str	r2, [r1, #4]
 8003e44:	608b      	str	r3, [r1, #8]
 8003e46:	4628      	mov	r0, r5
 8003e48:	f000 fe30 	bl	8004aac <_Bfree>
 8003e4c:	2200      	movs	r2, #0
 8003e4e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8003e50:	601a      	str	r2, [r3, #0]
 8003e52:	1e3b      	subs	r3, r7, #0
 8003e54:	bfaf      	iteee	ge
 8003e56:	2300      	movge	r3, #0
 8003e58:	2201      	movlt	r2, #1
 8003e5a:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8003e5e:	9305      	strlt	r3, [sp, #20]
 8003e60:	bfa8      	it	ge
 8003e62:	f8c8 3000 	strge.w	r3, [r8]
 8003e66:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8003e6a:	4b99      	ldr	r3, [pc, #612]	; (80040d0 <_dtoa_r+0x2d0>)
 8003e6c:	bfb8      	it	lt
 8003e6e:	f8c8 2000 	strlt.w	r2, [r8]
 8003e72:	ea33 0309 	bics.w	r3, r3, r9
 8003e76:	d119      	bne.n	8003eac <_dtoa_r+0xac>
 8003e78:	f242 730f 	movw	r3, #9999	; 0x270f
 8003e7c:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8003e7e:	6013      	str	r3, [r2, #0]
 8003e80:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8003e84:	4333      	orrs	r3, r6
 8003e86:	f000 857f 	beq.w	8004988 <_dtoa_r+0xb88>
 8003e8a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8003e8c:	b953      	cbnz	r3, 8003ea4 <_dtoa_r+0xa4>
 8003e8e:	4b91      	ldr	r3, [pc, #580]	; (80040d4 <_dtoa_r+0x2d4>)
 8003e90:	e022      	b.n	8003ed8 <_dtoa_r+0xd8>
 8003e92:	4b91      	ldr	r3, [pc, #580]	; (80040d8 <_dtoa_r+0x2d8>)
 8003e94:	9303      	str	r3, [sp, #12]
 8003e96:	3308      	adds	r3, #8
 8003e98:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8003e9a:	6013      	str	r3, [r2, #0]
 8003e9c:	9803      	ldr	r0, [sp, #12]
 8003e9e:	b019      	add	sp, #100	; 0x64
 8003ea0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003ea4:	4b8b      	ldr	r3, [pc, #556]	; (80040d4 <_dtoa_r+0x2d4>)
 8003ea6:	9303      	str	r3, [sp, #12]
 8003ea8:	3303      	adds	r3, #3
 8003eaa:	e7f5      	b.n	8003e98 <_dtoa_r+0x98>
 8003eac:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8003eb0:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 8003eb4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8003eb8:	2200      	movs	r2, #0
 8003eba:	2300      	movs	r3, #0
 8003ebc:	f7fc fd74 	bl	80009a8 <__aeabi_dcmpeq>
 8003ec0:	4680      	mov	r8, r0
 8003ec2:	b158      	cbz	r0, 8003edc <_dtoa_r+0xdc>
 8003ec4:	2301      	movs	r3, #1
 8003ec6:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8003ec8:	6013      	str	r3, [r2, #0]
 8003eca:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	f000 8558 	beq.w	8004982 <_dtoa_r+0xb82>
 8003ed2:	4882      	ldr	r0, [pc, #520]	; (80040dc <_dtoa_r+0x2dc>)
 8003ed4:	6018      	str	r0, [r3, #0]
 8003ed6:	1e43      	subs	r3, r0, #1
 8003ed8:	9303      	str	r3, [sp, #12]
 8003eda:	e7df      	b.n	8003e9c <_dtoa_r+0x9c>
 8003edc:	ab16      	add	r3, sp, #88	; 0x58
 8003ede:	9301      	str	r3, [sp, #4]
 8003ee0:	ab17      	add	r3, sp, #92	; 0x5c
 8003ee2:	9300      	str	r3, [sp, #0]
 8003ee4:	4628      	mov	r0, r5
 8003ee6:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8003eea:	f001 f8c5 	bl	8005078 <__d2b>
 8003eee:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8003ef2:	4683      	mov	fp, r0
 8003ef4:	2c00      	cmp	r4, #0
 8003ef6:	d07f      	beq.n	8003ff8 <_dtoa_r+0x1f8>
 8003ef8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8003efc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003efe:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8003f02:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003f06:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 8003f0a:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8003f0e:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 8003f12:	2200      	movs	r2, #0
 8003f14:	4b72      	ldr	r3, [pc, #456]	; (80040e0 <_dtoa_r+0x2e0>)
 8003f16:	f7fc f927 	bl	8000168 <__aeabi_dsub>
 8003f1a:	a365      	add	r3, pc, #404	; (adr r3, 80040b0 <_dtoa_r+0x2b0>)
 8003f1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f20:	f7fc fada 	bl	80004d8 <__aeabi_dmul>
 8003f24:	a364      	add	r3, pc, #400	; (adr r3, 80040b8 <_dtoa_r+0x2b8>)
 8003f26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f2a:	f7fc f91f 	bl	800016c <__adddf3>
 8003f2e:	4606      	mov	r6, r0
 8003f30:	4620      	mov	r0, r4
 8003f32:	460f      	mov	r7, r1
 8003f34:	f7fc fa66 	bl	8000404 <__aeabi_i2d>
 8003f38:	a361      	add	r3, pc, #388	; (adr r3, 80040c0 <_dtoa_r+0x2c0>)
 8003f3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f3e:	f7fc facb 	bl	80004d8 <__aeabi_dmul>
 8003f42:	4602      	mov	r2, r0
 8003f44:	460b      	mov	r3, r1
 8003f46:	4630      	mov	r0, r6
 8003f48:	4639      	mov	r1, r7
 8003f4a:	f7fc f90f 	bl	800016c <__adddf3>
 8003f4e:	4606      	mov	r6, r0
 8003f50:	460f      	mov	r7, r1
 8003f52:	f7fc fd71 	bl	8000a38 <__aeabi_d2iz>
 8003f56:	2200      	movs	r2, #0
 8003f58:	4682      	mov	sl, r0
 8003f5a:	2300      	movs	r3, #0
 8003f5c:	4630      	mov	r0, r6
 8003f5e:	4639      	mov	r1, r7
 8003f60:	f7fc fd2c 	bl	80009bc <__aeabi_dcmplt>
 8003f64:	b148      	cbz	r0, 8003f7a <_dtoa_r+0x17a>
 8003f66:	4650      	mov	r0, sl
 8003f68:	f7fc fa4c 	bl	8000404 <__aeabi_i2d>
 8003f6c:	4632      	mov	r2, r6
 8003f6e:	463b      	mov	r3, r7
 8003f70:	f7fc fd1a 	bl	80009a8 <__aeabi_dcmpeq>
 8003f74:	b908      	cbnz	r0, 8003f7a <_dtoa_r+0x17a>
 8003f76:	f10a 3aff 	add.w	sl, sl, #4294967295
 8003f7a:	f1ba 0f16 	cmp.w	sl, #22
 8003f7e:	d858      	bhi.n	8004032 <_dtoa_r+0x232>
 8003f80:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8003f84:	4b57      	ldr	r3, [pc, #348]	; (80040e4 <_dtoa_r+0x2e4>)
 8003f86:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8003f8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f8e:	f7fc fd15 	bl	80009bc <__aeabi_dcmplt>
 8003f92:	2800      	cmp	r0, #0
 8003f94:	d04f      	beq.n	8004036 <_dtoa_r+0x236>
 8003f96:	2300      	movs	r3, #0
 8003f98:	f10a 3aff 	add.w	sl, sl, #4294967295
 8003f9c:	930f      	str	r3, [sp, #60]	; 0x3c
 8003f9e:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8003fa0:	1b1c      	subs	r4, r3, r4
 8003fa2:	1e63      	subs	r3, r4, #1
 8003fa4:	9309      	str	r3, [sp, #36]	; 0x24
 8003fa6:	bf49      	itett	mi
 8003fa8:	f1c4 0301 	rsbmi	r3, r4, #1
 8003fac:	2300      	movpl	r3, #0
 8003fae:	9306      	strmi	r3, [sp, #24]
 8003fb0:	2300      	movmi	r3, #0
 8003fb2:	bf54      	ite	pl
 8003fb4:	9306      	strpl	r3, [sp, #24]
 8003fb6:	9309      	strmi	r3, [sp, #36]	; 0x24
 8003fb8:	f1ba 0f00 	cmp.w	sl, #0
 8003fbc:	db3d      	blt.n	800403a <_dtoa_r+0x23a>
 8003fbe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003fc0:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8003fc4:	4453      	add	r3, sl
 8003fc6:	9309      	str	r3, [sp, #36]	; 0x24
 8003fc8:	2300      	movs	r3, #0
 8003fca:	930a      	str	r3, [sp, #40]	; 0x28
 8003fcc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8003fce:	2b09      	cmp	r3, #9
 8003fd0:	f200 808c 	bhi.w	80040ec <_dtoa_r+0x2ec>
 8003fd4:	2b05      	cmp	r3, #5
 8003fd6:	bfc4      	itt	gt
 8003fd8:	3b04      	subgt	r3, #4
 8003fda:	9322      	strgt	r3, [sp, #136]	; 0x88
 8003fdc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8003fde:	bfc8      	it	gt
 8003fe0:	2400      	movgt	r4, #0
 8003fe2:	f1a3 0302 	sub.w	r3, r3, #2
 8003fe6:	bfd8      	it	le
 8003fe8:	2401      	movle	r4, #1
 8003fea:	2b03      	cmp	r3, #3
 8003fec:	f200 808a 	bhi.w	8004104 <_dtoa_r+0x304>
 8003ff0:	e8df f003 	tbb	[pc, r3]
 8003ff4:	5b4d4f2d 	.word	0x5b4d4f2d
 8003ff8:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 8003ffc:	441c      	add	r4, r3
 8003ffe:	f204 4332 	addw	r3, r4, #1074	; 0x432
 8004002:	2b20      	cmp	r3, #32
 8004004:	bfc3      	ittte	gt
 8004006:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800400a:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 800400e:	fa09 f303 	lslgt.w	r3, r9, r3
 8004012:	f1c3 0320 	rsble	r3, r3, #32
 8004016:	bfc6      	itte	gt
 8004018:	fa26 f000 	lsrgt.w	r0, r6, r0
 800401c:	4318      	orrgt	r0, r3
 800401e:	fa06 f003 	lslle.w	r0, r6, r3
 8004022:	f7fc f9df 	bl	80003e4 <__aeabi_ui2d>
 8004026:	2301      	movs	r3, #1
 8004028:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 800402c:	3c01      	subs	r4, #1
 800402e:	9313      	str	r3, [sp, #76]	; 0x4c
 8004030:	e76f      	b.n	8003f12 <_dtoa_r+0x112>
 8004032:	2301      	movs	r3, #1
 8004034:	e7b2      	b.n	8003f9c <_dtoa_r+0x19c>
 8004036:	900f      	str	r0, [sp, #60]	; 0x3c
 8004038:	e7b1      	b.n	8003f9e <_dtoa_r+0x19e>
 800403a:	9b06      	ldr	r3, [sp, #24]
 800403c:	eba3 030a 	sub.w	r3, r3, sl
 8004040:	9306      	str	r3, [sp, #24]
 8004042:	f1ca 0300 	rsb	r3, sl, #0
 8004046:	930a      	str	r3, [sp, #40]	; 0x28
 8004048:	2300      	movs	r3, #0
 800404a:	930e      	str	r3, [sp, #56]	; 0x38
 800404c:	e7be      	b.n	8003fcc <_dtoa_r+0x1cc>
 800404e:	2300      	movs	r3, #0
 8004050:	930b      	str	r3, [sp, #44]	; 0x2c
 8004052:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8004054:	2b00      	cmp	r3, #0
 8004056:	dc58      	bgt.n	800410a <_dtoa_r+0x30a>
 8004058:	f04f 0901 	mov.w	r9, #1
 800405c:	464b      	mov	r3, r9
 800405e:	f8cd 9020 	str.w	r9, [sp, #32]
 8004062:	f8cd 908c 	str.w	r9, [sp, #140]	; 0x8c
 8004066:	2200      	movs	r2, #0
 8004068:	6a68      	ldr	r0, [r5, #36]	; 0x24
 800406a:	6042      	str	r2, [r0, #4]
 800406c:	2204      	movs	r2, #4
 800406e:	f102 0614 	add.w	r6, r2, #20
 8004072:	429e      	cmp	r6, r3
 8004074:	6841      	ldr	r1, [r0, #4]
 8004076:	d94e      	bls.n	8004116 <_dtoa_r+0x316>
 8004078:	4628      	mov	r0, r5
 800407a:	f000 fcd7 	bl	8004a2c <_Balloc>
 800407e:	9003      	str	r0, [sp, #12]
 8004080:	2800      	cmp	r0, #0
 8004082:	d14c      	bne.n	800411e <_dtoa_r+0x31e>
 8004084:	4602      	mov	r2, r0
 8004086:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800408a:	4b17      	ldr	r3, [pc, #92]	; (80040e8 <_dtoa_r+0x2e8>)
 800408c:	e6cc      	b.n	8003e28 <_dtoa_r+0x28>
 800408e:	2301      	movs	r3, #1
 8004090:	e7de      	b.n	8004050 <_dtoa_r+0x250>
 8004092:	2300      	movs	r3, #0
 8004094:	930b      	str	r3, [sp, #44]	; 0x2c
 8004096:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8004098:	eb0a 0903 	add.w	r9, sl, r3
 800409c:	f109 0301 	add.w	r3, r9, #1
 80040a0:	2b01      	cmp	r3, #1
 80040a2:	9308      	str	r3, [sp, #32]
 80040a4:	bfb8      	it	lt
 80040a6:	2301      	movlt	r3, #1
 80040a8:	e7dd      	b.n	8004066 <_dtoa_r+0x266>
 80040aa:	2301      	movs	r3, #1
 80040ac:	e7f2      	b.n	8004094 <_dtoa_r+0x294>
 80040ae:	bf00      	nop
 80040b0:	636f4361 	.word	0x636f4361
 80040b4:	3fd287a7 	.word	0x3fd287a7
 80040b8:	8b60c8b3 	.word	0x8b60c8b3
 80040bc:	3fc68a28 	.word	0x3fc68a28
 80040c0:	509f79fb 	.word	0x509f79fb
 80040c4:	3fd34413 	.word	0x3fd34413
 80040c8:	08005ec1 	.word	0x08005ec1
 80040cc:	08005ed8 	.word	0x08005ed8
 80040d0:	7ff00000 	.word	0x7ff00000
 80040d4:	08005ebd 	.word	0x08005ebd
 80040d8:	08005eb4 	.word	0x08005eb4
 80040dc:	08005e91 	.word	0x08005e91
 80040e0:	3ff80000 	.word	0x3ff80000
 80040e4:	08005fc8 	.word	0x08005fc8
 80040e8:	08005f33 	.word	0x08005f33
 80040ec:	2401      	movs	r4, #1
 80040ee:	2300      	movs	r3, #0
 80040f0:	940b      	str	r4, [sp, #44]	; 0x2c
 80040f2:	9322      	str	r3, [sp, #136]	; 0x88
 80040f4:	f04f 39ff 	mov.w	r9, #4294967295
 80040f8:	2200      	movs	r2, #0
 80040fa:	2312      	movs	r3, #18
 80040fc:	f8cd 9020 	str.w	r9, [sp, #32]
 8004100:	9223      	str	r2, [sp, #140]	; 0x8c
 8004102:	e7b0      	b.n	8004066 <_dtoa_r+0x266>
 8004104:	2301      	movs	r3, #1
 8004106:	930b      	str	r3, [sp, #44]	; 0x2c
 8004108:	e7f4      	b.n	80040f4 <_dtoa_r+0x2f4>
 800410a:	f8dd 908c 	ldr.w	r9, [sp, #140]	; 0x8c
 800410e:	464b      	mov	r3, r9
 8004110:	f8cd 9020 	str.w	r9, [sp, #32]
 8004114:	e7a7      	b.n	8004066 <_dtoa_r+0x266>
 8004116:	3101      	adds	r1, #1
 8004118:	6041      	str	r1, [r0, #4]
 800411a:	0052      	lsls	r2, r2, #1
 800411c:	e7a7      	b.n	800406e <_dtoa_r+0x26e>
 800411e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8004120:	9a03      	ldr	r2, [sp, #12]
 8004122:	601a      	str	r2, [r3, #0]
 8004124:	9b08      	ldr	r3, [sp, #32]
 8004126:	2b0e      	cmp	r3, #14
 8004128:	f200 80a8 	bhi.w	800427c <_dtoa_r+0x47c>
 800412c:	2c00      	cmp	r4, #0
 800412e:	f000 80a5 	beq.w	800427c <_dtoa_r+0x47c>
 8004132:	f1ba 0f00 	cmp.w	sl, #0
 8004136:	dd34      	ble.n	80041a2 <_dtoa_r+0x3a2>
 8004138:	4a9a      	ldr	r2, [pc, #616]	; (80043a4 <_dtoa_r+0x5a4>)
 800413a:	f00a 030f 	and.w	r3, sl, #15
 800413e:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8004142:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8004146:	e9d3 3400 	ldrd	r3, r4, [r3]
 800414a:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800414e:	ea4f 142a 	mov.w	r4, sl, asr #4
 8004152:	d016      	beq.n	8004182 <_dtoa_r+0x382>
 8004154:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004158:	4b93      	ldr	r3, [pc, #588]	; (80043a8 <_dtoa_r+0x5a8>)
 800415a:	2703      	movs	r7, #3
 800415c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8004160:	f7fc fae4 	bl	800072c <__aeabi_ddiv>
 8004164:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004168:	f004 040f 	and.w	r4, r4, #15
 800416c:	4e8e      	ldr	r6, [pc, #568]	; (80043a8 <_dtoa_r+0x5a8>)
 800416e:	b954      	cbnz	r4, 8004186 <_dtoa_r+0x386>
 8004170:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8004174:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004178:	f7fc fad8 	bl	800072c <__aeabi_ddiv>
 800417c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004180:	e029      	b.n	80041d6 <_dtoa_r+0x3d6>
 8004182:	2702      	movs	r7, #2
 8004184:	e7f2      	b.n	800416c <_dtoa_r+0x36c>
 8004186:	07e1      	lsls	r1, r4, #31
 8004188:	d508      	bpl.n	800419c <_dtoa_r+0x39c>
 800418a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800418e:	e9d6 2300 	ldrd	r2, r3, [r6]
 8004192:	f7fc f9a1 	bl	80004d8 <__aeabi_dmul>
 8004196:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800419a:	3701      	adds	r7, #1
 800419c:	1064      	asrs	r4, r4, #1
 800419e:	3608      	adds	r6, #8
 80041a0:	e7e5      	b.n	800416e <_dtoa_r+0x36e>
 80041a2:	f000 80a5 	beq.w	80042f0 <_dtoa_r+0x4f0>
 80041a6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80041aa:	f1ca 0400 	rsb	r4, sl, #0
 80041ae:	4b7d      	ldr	r3, [pc, #500]	; (80043a4 <_dtoa_r+0x5a4>)
 80041b0:	f004 020f 	and.w	r2, r4, #15
 80041b4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80041b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041bc:	f7fc f98c 	bl	80004d8 <__aeabi_dmul>
 80041c0:	2702      	movs	r7, #2
 80041c2:	2300      	movs	r3, #0
 80041c4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80041c8:	4e77      	ldr	r6, [pc, #476]	; (80043a8 <_dtoa_r+0x5a8>)
 80041ca:	1124      	asrs	r4, r4, #4
 80041cc:	2c00      	cmp	r4, #0
 80041ce:	f040 8084 	bne.w	80042da <_dtoa_r+0x4da>
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d1d2      	bne.n	800417c <_dtoa_r+0x37c>
 80041d6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80041d8:	2b00      	cmp	r3, #0
 80041da:	f000 808b 	beq.w	80042f4 <_dtoa_r+0x4f4>
 80041de:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 80041e2:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 80041e6:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80041ea:	2200      	movs	r2, #0
 80041ec:	4b6f      	ldr	r3, [pc, #444]	; (80043ac <_dtoa_r+0x5ac>)
 80041ee:	f7fc fbe5 	bl	80009bc <__aeabi_dcmplt>
 80041f2:	2800      	cmp	r0, #0
 80041f4:	d07e      	beq.n	80042f4 <_dtoa_r+0x4f4>
 80041f6:	9b08      	ldr	r3, [sp, #32]
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d07b      	beq.n	80042f4 <_dtoa_r+0x4f4>
 80041fc:	f1b9 0f00 	cmp.w	r9, #0
 8004200:	dd38      	ble.n	8004274 <_dtoa_r+0x474>
 8004202:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8004206:	2200      	movs	r2, #0
 8004208:	4b69      	ldr	r3, [pc, #420]	; (80043b0 <_dtoa_r+0x5b0>)
 800420a:	f7fc f965 	bl	80004d8 <__aeabi_dmul>
 800420e:	464c      	mov	r4, r9
 8004210:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004214:	f10a 38ff 	add.w	r8, sl, #4294967295
 8004218:	3701      	adds	r7, #1
 800421a:	4638      	mov	r0, r7
 800421c:	f7fc f8f2 	bl	8000404 <__aeabi_i2d>
 8004220:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004224:	f7fc f958 	bl	80004d8 <__aeabi_dmul>
 8004228:	2200      	movs	r2, #0
 800422a:	4b62      	ldr	r3, [pc, #392]	; (80043b4 <_dtoa_r+0x5b4>)
 800422c:	f7fb ff9e 	bl	800016c <__adddf3>
 8004230:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8004234:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8004238:	9611      	str	r6, [sp, #68]	; 0x44
 800423a:	2c00      	cmp	r4, #0
 800423c:	d15d      	bne.n	80042fa <_dtoa_r+0x4fa>
 800423e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004242:	2200      	movs	r2, #0
 8004244:	4b5c      	ldr	r3, [pc, #368]	; (80043b8 <_dtoa_r+0x5b8>)
 8004246:	f7fb ff8f 	bl	8000168 <__aeabi_dsub>
 800424a:	4602      	mov	r2, r0
 800424c:	460b      	mov	r3, r1
 800424e:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8004252:	4633      	mov	r3, r6
 8004254:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8004256:	f7fc fbcf 	bl	80009f8 <__aeabi_dcmpgt>
 800425a:	2800      	cmp	r0, #0
 800425c:	f040 829c 	bne.w	8004798 <_dtoa_r+0x998>
 8004260:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004264:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8004266:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800426a:	f7fc fba7 	bl	80009bc <__aeabi_dcmplt>
 800426e:	2800      	cmp	r0, #0
 8004270:	f040 8290 	bne.w	8004794 <_dtoa_r+0x994>
 8004274:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8004278:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800427c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800427e:	2b00      	cmp	r3, #0
 8004280:	f2c0 8152 	blt.w	8004528 <_dtoa_r+0x728>
 8004284:	f1ba 0f0e 	cmp.w	sl, #14
 8004288:	f300 814e 	bgt.w	8004528 <_dtoa_r+0x728>
 800428c:	4b45      	ldr	r3, [pc, #276]	; (80043a4 <_dtoa_r+0x5a4>)
 800428e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8004292:	e9d3 3400 	ldrd	r3, r4, [r3]
 8004296:	e9cd 3406 	strd	r3, r4, [sp, #24]
 800429a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800429c:	2b00      	cmp	r3, #0
 800429e:	f280 80db 	bge.w	8004458 <_dtoa_r+0x658>
 80042a2:	9b08      	ldr	r3, [sp, #32]
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	f300 80d7 	bgt.w	8004458 <_dtoa_r+0x658>
 80042aa:	f040 8272 	bne.w	8004792 <_dtoa_r+0x992>
 80042ae:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80042b2:	2200      	movs	r2, #0
 80042b4:	4b40      	ldr	r3, [pc, #256]	; (80043b8 <_dtoa_r+0x5b8>)
 80042b6:	f7fc f90f 	bl	80004d8 <__aeabi_dmul>
 80042ba:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80042be:	f7fc fb91 	bl	80009e4 <__aeabi_dcmpge>
 80042c2:	9c08      	ldr	r4, [sp, #32]
 80042c4:	4626      	mov	r6, r4
 80042c6:	2800      	cmp	r0, #0
 80042c8:	f040 8248 	bne.w	800475c <_dtoa_r+0x95c>
 80042cc:	2331      	movs	r3, #49	; 0x31
 80042ce:	9f03      	ldr	r7, [sp, #12]
 80042d0:	f10a 0a01 	add.w	sl, sl, #1
 80042d4:	f807 3b01 	strb.w	r3, [r7], #1
 80042d8:	e244      	b.n	8004764 <_dtoa_r+0x964>
 80042da:	07e2      	lsls	r2, r4, #31
 80042dc:	d505      	bpl.n	80042ea <_dtoa_r+0x4ea>
 80042de:	e9d6 2300 	ldrd	r2, r3, [r6]
 80042e2:	f7fc f8f9 	bl	80004d8 <__aeabi_dmul>
 80042e6:	2301      	movs	r3, #1
 80042e8:	3701      	adds	r7, #1
 80042ea:	1064      	asrs	r4, r4, #1
 80042ec:	3608      	adds	r6, #8
 80042ee:	e76d      	b.n	80041cc <_dtoa_r+0x3cc>
 80042f0:	2702      	movs	r7, #2
 80042f2:	e770      	b.n	80041d6 <_dtoa_r+0x3d6>
 80042f4:	46d0      	mov	r8, sl
 80042f6:	9c08      	ldr	r4, [sp, #32]
 80042f8:	e78f      	b.n	800421a <_dtoa_r+0x41a>
 80042fa:	9903      	ldr	r1, [sp, #12]
 80042fc:	4b29      	ldr	r3, [pc, #164]	; (80043a4 <_dtoa_r+0x5a4>)
 80042fe:	4421      	add	r1, r4
 8004300:	9112      	str	r1, [sp, #72]	; 0x48
 8004302:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004304:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8004308:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 800430c:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8004310:	2900      	cmp	r1, #0
 8004312:	d055      	beq.n	80043c0 <_dtoa_r+0x5c0>
 8004314:	2000      	movs	r0, #0
 8004316:	4929      	ldr	r1, [pc, #164]	; (80043bc <_dtoa_r+0x5bc>)
 8004318:	f7fc fa08 	bl	800072c <__aeabi_ddiv>
 800431c:	463b      	mov	r3, r7
 800431e:	4632      	mov	r2, r6
 8004320:	f7fb ff22 	bl	8000168 <__aeabi_dsub>
 8004324:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8004328:	9f03      	ldr	r7, [sp, #12]
 800432a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800432e:	f7fc fb83 	bl	8000a38 <__aeabi_d2iz>
 8004332:	4604      	mov	r4, r0
 8004334:	f7fc f866 	bl	8000404 <__aeabi_i2d>
 8004338:	4602      	mov	r2, r0
 800433a:	460b      	mov	r3, r1
 800433c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004340:	f7fb ff12 	bl	8000168 <__aeabi_dsub>
 8004344:	4602      	mov	r2, r0
 8004346:	460b      	mov	r3, r1
 8004348:	3430      	adds	r4, #48	; 0x30
 800434a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800434e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8004352:	f807 4b01 	strb.w	r4, [r7], #1
 8004356:	f7fc fb31 	bl	80009bc <__aeabi_dcmplt>
 800435a:	2800      	cmp	r0, #0
 800435c:	d174      	bne.n	8004448 <_dtoa_r+0x648>
 800435e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004362:	2000      	movs	r0, #0
 8004364:	4911      	ldr	r1, [pc, #68]	; (80043ac <_dtoa_r+0x5ac>)
 8004366:	f7fb feff 	bl	8000168 <__aeabi_dsub>
 800436a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800436e:	f7fc fb25 	bl	80009bc <__aeabi_dcmplt>
 8004372:	2800      	cmp	r0, #0
 8004374:	f040 80b7 	bne.w	80044e6 <_dtoa_r+0x6e6>
 8004378:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800437a:	429f      	cmp	r7, r3
 800437c:	f43f af7a 	beq.w	8004274 <_dtoa_r+0x474>
 8004380:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8004384:	2200      	movs	r2, #0
 8004386:	4b0a      	ldr	r3, [pc, #40]	; (80043b0 <_dtoa_r+0x5b0>)
 8004388:	f7fc f8a6 	bl	80004d8 <__aeabi_dmul>
 800438c:	2200      	movs	r2, #0
 800438e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8004392:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004396:	4b06      	ldr	r3, [pc, #24]	; (80043b0 <_dtoa_r+0x5b0>)
 8004398:	f7fc f89e 	bl	80004d8 <__aeabi_dmul>
 800439c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80043a0:	e7c3      	b.n	800432a <_dtoa_r+0x52a>
 80043a2:	bf00      	nop
 80043a4:	08005fc8 	.word	0x08005fc8
 80043a8:	08005fa0 	.word	0x08005fa0
 80043ac:	3ff00000 	.word	0x3ff00000
 80043b0:	40240000 	.word	0x40240000
 80043b4:	401c0000 	.word	0x401c0000
 80043b8:	40140000 	.word	0x40140000
 80043bc:	3fe00000 	.word	0x3fe00000
 80043c0:	4630      	mov	r0, r6
 80043c2:	4639      	mov	r1, r7
 80043c4:	f7fc f888 	bl	80004d8 <__aeabi_dmul>
 80043c8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80043ca:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80043ce:	9c03      	ldr	r4, [sp, #12]
 80043d0:	9314      	str	r3, [sp, #80]	; 0x50
 80043d2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80043d6:	f7fc fb2f 	bl	8000a38 <__aeabi_d2iz>
 80043da:	9015      	str	r0, [sp, #84]	; 0x54
 80043dc:	f7fc f812 	bl	8000404 <__aeabi_i2d>
 80043e0:	4602      	mov	r2, r0
 80043e2:	460b      	mov	r3, r1
 80043e4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80043e8:	f7fb febe 	bl	8000168 <__aeabi_dsub>
 80043ec:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80043ee:	4606      	mov	r6, r0
 80043f0:	3330      	adds	r3, #48	; 0x30
 80043f2:	f804 3b01 	strb.w	r3, [r4], #1
 80043f6:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80043f8:	460f      	mov	r7, r1
 80043fa:	429c      	cmp	r4, r3
 80043fc:	f04f 0200 	mov.w	r2, #0
 8004400:	d124      	bne.n	800444c <_dtoa_r+0x64c>
 8004402:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8004406:	4bb0      	ldr	r3, [pc, #704]	; (80046c8 <_dtoa_r+0x8c8>)
 8004408:	f7fb feb0 	bl	800016c <__adddf3>
 800440c:	4602      	mov	r2, r0
 800440e:	460b      	mov	r3, r1
 8004410:	4630      	mov	r0, r6
 8004412:	4639      	mov	r1, r7
 8004414:	f7fc faf0 	bl	80009f8 <__aeabi_dcmpgt>
 8004418:	2800      	cmp	r0, #0
 800441a:	d163      	bne.n	80044e4 <_dtoa_r+0x6e4>
 800441c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8004420:	2000      	movs	r0, #0
 8004422:	49a9      	ldr	r1, [pc, #676]	; (80046c8 <_dtoa_r+0x8c8>)
 8004424:	f7fb fea0 	bl	8000168 <__aeabi_dsub>
 8004428:	4602      	mov	r2, r0
 800442a:	460b      	mov	r3, r1
 800442c:	4630      	mov	r0, r6
 800442e:	4639      	mov	r1, r7
 8004430:	f7fc fac4 	bl	80009bc <__aeabi_dcmplt>
 8004434:	2800      	cmp	r0, #0
 8004436:	f43f af1d 	beq.w	8004274 <_dtoa_r+0x474>
 800443a:	9f14      	ldr	r7, [sp, #80]	; 0x50
 800443c:	1e7b      	subs	r3, r7, #1
 800443e:	9314      	str	r3, [sp, #80]	; 0x50
 8004440:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 8004444:	2b30      	cmp	r3, #48	; 0x30
 8004446:	d0f8      	beq.n	800443a <_dtoa_r+0x63a>
 8004448:	46c2      	mov	sl, r8
 800444a:	e03b      	b.n	80044c4 <_dtoa_r+0x6c4>
 800444c:	4b9f      	ldr	r3, [pc, #636]	; (80046cc <_dtoa_r+0x8cc>)
 800444e:	f7fc f843 	bl	80004d8 <__aeabi_dmul>
 8004452:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004456:	e7bc      	b.n	80043d2 <_dtoa_r+0x5d2>
 8004458:	9f03      	ldr	r7, [sp, #12]
 800445a:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800445e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8004462:	4640      	mov	r0, r8
 8004464:	4649      	mov	r1, r9
 8004466:	f7fc f961 	bl	800072c <__aeabi_ddiv>
 800446a:	f7fc fae5 	bl	8000a38 <__aeabi_d2iz>
 800446e:	4604      	mov	r4, r0
 8004470:	f7fb ffc8 	bl	8000404 <__aeabi_i2d>
 8004474:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8004478:	f7fc f82e 	bl	80004d8 <__aeabi_dmul>
 800447c:	4602      	mov	r2, r0
 800447e:	460b      	mov	r3, r1
 8004480:	4640      	mov	r0, r8
 8004482:	4649      	mov	r1, r9
 8004484:	f7fb fe70 	bl	8000168 <__aeabi_dsub>
 8004488:	f104 0630 	add.w	r6, r4, #48	; 0x30
 800448c:	f807 6b01 	strb.w	r6, [r7], #1
 8004490:	9e03      	ldr	r6, [sp, #12]
 8004492:	f8dd c020 	ldr.w	ip, [sp, #32]
 8004496:	1bbe      	subs	r6, r7, r6
 8004498:	45b4      	cmp	ip, r6
 800449a:	4602      	mov	r2, r0
 800449c:	460b      	mov	r3, r1
 800449e:	d136      	bne.n	800450e <_dtoa_r+0x70e>
 80044a0:	f7fb fe64 	bl	800016c <__adddf3>
 80044a4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80044a8:	4680      	mov	r8, r0
 80044aa:	4689      	mov	r9, r1
 80044ac:	f7fc faa4 	bl	80009f8 <__aeabi_dcmpgt>
 80044b0:	bb58      	cbnz	r0, 800450a <_dtoa_r+0x70a>
 80044b2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80044b6:	4640      	mov	r0, r8
 80044b8:	4649      	mov	r1, r9
 80044ba:	f7fc fa75 	bl	80009a8 <__aeabi_dcmpeq>
 80044be:	b108      	cbz	r0, 80044c4 <_dtoa_r+0x6c4>
 80044c0:	07e1      	lsls	r1, r4, #31
 80044c2:	d422      	bmi.n	800450a <_dtoa_r+0x70a>
 80044c4:	4628      	mov	r0, r5
 80044c6:	4659      	mov	r1, fp
 80044c8:	f000 faf0 	bl	8004aac <_Bfree>
 80044cc:	2300      	movs	r3, #0
 80044ce:	703b      	strb	r3, [r7, #0]
 80044d0:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80044d2:	f10a 0001 	add.w	r0, sl, #1
 80044d6:	6018      	str	r0, [r3, #0]
 80044d8:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80044da:	2b00      	cmp	r3, #0
 80044dc:	f43f acde 	beq.w	8003e9c <_dtoa_r+0x9c>
 80044e0:	601f      	str	r7, [r3, #0]
 80044e2:	e4db      	b.n	8003e9c <_dtoa_r+0x9c>
 80044e4:	4627      	mov	r7, r4
 80044e6:	463b      	mov	r3, r7
 80044e8:	461f      	mov	r7, r3
 80044ea:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80044ee:	2a39      	cmp	r2, #57	; 0x39
 80044f0:	d107      	bne.n	8004502 <_dtoa_r+0x702>
 80044f2:	9a03      	ldr	r2, [sp, #12]
 80044f4:	429a      	cmp	r2, r3
 80044f6:	d1f7      	bne.n	80044e8 <_dtoa_r+0x6e8>
 80044f8:	2230      	movs	r2, #48	; 0x30
 80044fa:	9903      	ldr	r1, [sp, #12]
 80044fc:	f108 0801 	add.w	r8, r8, #1
 8004500:	700a      	strb	r2, [r1, #0]
 8004502:	781a      	ldrb	r2, [r3, #0]
 8004504:	3201      	adds	r2, #1
 8004506:	701a      	strb	r2, [r3, #0]
 8004508:	e79e      	b.n	8004448 <_dtoa_r+0x648>
 800450a:	46d0      	mov	r8, sl
 800450c:	e7eb      	b.n	80044e6 <_dtoa_r+0x6e6>
 800450e:	2200      	movs	r2, #0
 8004510:	4b6e      	ldr	r3, [pc, #440]	; (80046cc <_dtoa_r+0x8cc>)
 8004512:	f7fb ffe1 	bl	80004d8 <__aeabi_dmul>
 8004516:	2200      	movs	r2, #0
 8004518:	2300      	movs	r3, #0
 800451a:	4680      	mov	r8, r0
 800451c:	4689      	mov	r9, r1
 800451e:	f7fc fa43 	bl	80009a8 <__aeabi_dcmpeq>
 8004522:	2800      	cmp	r0, #0
 8004524:	d09b      	beq.n	800445e <_dtoa_r+0x65e>
 8004526:	e7cd      	b.n	80044c4 <_dtoa_r+0x6c4>
 8004528:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800452a:	2a00      	cmp	r2, #0
 800452c:	f000 80d0 	beq.w	80046d0 <_dtoa_r+0x8d0>
 8004530:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8004532:	2a01      	cmp	r2, #1
 8004534:	f300 80ae 	bgt.w	8004694 <_dtoa_r+0x894>
 8004538:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800453a:	2a00      	cmp	r2, #0
 800453c:	f000 80a6 	beq.w	800468c <_dtoa_r+0x88c>
 8004540:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8004544:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8004546:	9f06      	ldr	r7, [sp, #24]
 8004548:	9a06      	ldr	r2, [sp, #24]
 800454a:	2101      	movs	r1, #1
 800454c:	441a      	add	r2, r3
 800454e:	9206      	str	r2, [sp, #24]
 8004550:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004552:	4628      	mov	r0, r5
 8004554:	441a      	add	r2, r3
 8004556:	9209      	str	r2, [sp, #36]	; 0x24
 8004558:	f000 fb5e 	bl	8004c18 <__i2b>
 800455c:	4606      	mov	r6, r0
 800455e:	2f00      	cmp	r7, #0
 8004560:	dd0c      	ble.n	800457c <_dtoa_r+0x77c>
 8004562:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004564:	2b00      	cmp	r3, #0
 8004566:	dd09      	ble.n	800457c <_dtoa_r+0x77c>
 8004568:	42bb      	cmp	r3, r7
 800456a:	bfa8      	it	ge
 800456c:	463b      	movge	r3, r7
 800456e:	9a06      	ldr	r2, [sp, #24]
 8004570:	1aff      	subs	r7, r7, r3
 8004572:	1ad2      	subs	r2, r2, r3
 8004574:	9206      	str	r2, [sp, #24]
 8004576:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004578:	1ad3      	subs	r3, r2, r3
 800457a:	9309      	str	r3, [sp, #36]	; 0x24
 800457c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800457e:	b1f3      	cbz	r3, 80045be <_dtoa_r+0x7be>
 8004580:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004582:	2b00      	cmp	r3, #0
 8004584:	f000 80a8 	beq.w	80046d8 <_dtoa_r+0x8d8>
 8004588:	2c00      	cmp	r4, #0
 800458a:	dd10      	ble.n	80045ae <_dtoa_r+0x7ae>
 800458c:	4631      	mov	r1, r6
 800458e:	4622      	mov	r2, r4
 8004590:	4628      	mov	r0, r5
 8004592:	f000 fbff 	bl	8004d94 <__pow5mult>
 8004596:	465a      	mov	r2, fp
 8004598:	4601      	mov	r1, r0
 800459a:	4606      	mov	r6, r0
 800459c:	4628      	mov	r0, r5
 800459e:	f000 fb51 	bl	8004c44 <__multiply>
 80045a2:	4680      	mov	r8, r0
 80045a4:	4659      	mov	r1, fp
 80045a6:	4628      	mov	r0, r5
 80045a8:	f000 fa80 	bl	8004aac <_Bfree>
 80045ac:	46c3      	mov	fp, r8
 80045ae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80045b0:	1b1a      	subs	r2, r3, r4
 80045b2:	d004      	beq.n	80045be <_dtoa_r+0x7be>
 80045b4:	4659      	mov	r1, fp
 80045b6:	4628      	mov	r0, r5
 80045b8:	f000 fbec 	bl	8004d94 <__pow5mult>
 80045bc:	4683      	mov	fp, r0
 80045be:	2101      	movs	r1, #1
 80045c0:	4628      	mov	r0, r5
 80045c2:	f000 fb29 	bl	8004c18 <__i2b>
 80045c6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80045c8:	4604      	mov	r4, r0
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	f340 8086 	ble.w	80046dc <_dtoa_r+0x8dc>
 80045d0:	461a      	mov	r2, r3
 80045d2:	4601      	mov	r1, r0
 80045d4:	4628      	mov	r0, r5
 80045d6:	f000 fbdd 	bl	8004d94 <__pow5mult>
 80045da:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80045dc:	4604      	mov	r4, r0
 80045de:	2b01      	cmp	r3, #1
 80045e0:	dd7f      	ble.n	80046e2 <_dtoa_r+0x8e2>
 80045e2:	f04f 0800 	mov.w	r8, #0
 80045e6:	6923      	ldr	r3, [r4, #16]
 80045e8:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80045ec:	6918      	ldr	r0, [r3, #16]
 80045ee:	f000 fac5 	bl	8004b7c <__hi0bits>
 80045f2:	f1c0 0020 	rsb	r0, r0, #32
 80045f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80045f8:	4418      	add	r0, r3
 80045fa:	f010 001f 	ands.w	r0, r0, #31
 80045fe:	f000 8092 	beq.w	8004726 <_dtoa_r+0x926>
 8004602:	f1c0 0320 	rsb	r3, r0, #32
 8004606:	2b04      	cmp	r3, #4
 8004608:	f340 808a 	ble.w	8004720 <_dtoa_r+0x920>
 800460c:	f1c0 001c 	rsb	r0, r0, #28
 8004610:	9b06      	ldr	r3, [sp, #24]
 8004612:	4407      	add	r7, r0
 8004614:	4403      	add	r3, r0
 8004616:	9306      	str	r3, [sp, #24]
 8004618:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800461a:	4403      	add	r3, r0
 800461c:	9309      	str	r3, [sp, #36]	; 0x24
 800461e:	9b06      	ldr	r3, [sp, #24]
 8004620:	2b00      	cmp	r3, #0
 8004622:	dd05      	ble.n	8004630 <_dtoa_r+0x830>
 8004624:	4659      	mov	r1, fp
 8004626:	461a      	mov	r2, r3
 8004628:	4628      	mov	r0, r5
 800462a:	f000 fc0d 	bl	8004e48 <__lshift>
 800462e:	4683      	mov	fp, r0
 8004630:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004632:	2b00      	cmp	r3, #0
 8004634:	dd05      	ble.n	8004642 <_dtoa_r+0x842>
 8004636:	4621      	mov	r1, r4
 8004638:	461a      	mov	r2, r3
 800463a:	4628      	mov	r0, r5
 800463c:	f000 fc04 	bl	8004e48 <__lshift>
 8004640:	4604      	mov	r4, r0
 8004642:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004644:	2b00      	cmp	r3, #0
 8004646:	d070      	beq.n	800472a <_dtoa_r+0x92a>
 8004648:	4621      	mov	r1, r4
 800464a:	4658      	mov	r0, fp
 800464c:	f000 fc6c 	bl	8004f28 <__mcmp>
 8004650:	2800      	cmp	r0, #0
 8004652:	da6a      	bge.n	800472a <_dtoa_r+0x92a>
 8004654:	2300      	movs	r3, #0
 8004656:	4659      	mov	r1, fp
 8004658:	220a      	movs	r2, #10
 800465a:	4628      	mov	r0, r5
 800465c:	f000 fa48 	bl	8004af0 <__multadd>
 8004660:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004662:	4683      	mov	fp, r0
 8004664:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004668:	2b00      	cmp	r3, #0
 800466a:	f000 8194 	beq.w	8004996 <_dtoa_r+0xb96>
 800466e:	4631      	mov	r1, r6
 8004670:	2300      	movs	r3, #0
 8004672:	220a      	movs	r2, #10
 8004674:	4628      	mov	r0, r5
 8004676:	f000 fa3b 	bl	8004af0 <__multadd>
 800467a:	f1b9 0f00 	cmp.w	r9, #0
 800467e:	4606      	mov	r6, r0
 8004680:	f300 8093 	bgt.w	80047aa <_dtoa_r+0x9aa>
 8004684:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004686:	2b02      	cmp	r3, #2
 8004688:	dc57      	bgt.n	800473a <_dtoa_r+0x93a>
 800468a:	e08e      	b.n	80047aa <_dtoa_r+0x9aa>
 800468c:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800468e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8004692:	e757      	b.n	8004544 <_dtoa_r+0x744>
 8004694:	9b08      	ldr	r3, [sp, #32]
 8004696:	1e5c      	subs	r4, r3, #1
 8004698:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800469a:	42a3      	cmp	r3, r4
 800469c:	bfb7      	itett	lt
 800469e:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 80046a0:	1b1c      	subge	r4, r3, r4
 80046a2:	1ae2      	sublt	r2, r4, r3
 80046a4:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 80046a6:	bfbe      	ittt	lt
 80046a8:	940a      	strlt	r4, [sp, #40]	; 0x28
 80046aa:	189b      	addlt	r3, r3, r2
 80046ac:	930e      	strlt	r3, [sp, #56]	; 0x38
 80046ae:	9b08      	ldr	r3, [sp, #32]
 80046b0:	bfb8      	it	lt
 80046b2:	2400      	movlt	r4, #0
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	bfbb      	ittet	lt
 80046b8:	9b06      	ldrlt	r3, [sp, #24]
 80046ba:	9a08      	ldrlt	r2, [sp, #32]
 80046bc:	9f06      	ldrge	r7, [sp, #24]
 80046be:	1a9f      	sublt	r7, r3, r2
 80046c0:	bfac      	ite	ge
 80046c2:	9b08      	ldrge	r3, [sp, #32]
 80046c4:	2300      	movlt	r3, #0
 80046c6:	e73f      	b.n	8004548 <_dtoa_r+0x748>
 80046c8:	3fe00000 	.word	0x3fe00000
 80046cc:	40240000 	.word	0x40240000
 80046d0:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80046d2:	9f06      	ldr	r7, [sp, #24]
 80046d4:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 80046d6:	e742      	b.n	800455e <_dtoa_r+0x75e>
 80046d8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80046da:	e76b      	b.n	80045b4 <_dtoa_r+0x7b4>
 80046dc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80046de:	2b01      	cmp	r3, #1
 80046e0:	dc19      	bgt.n	8004716 <_dtoa_r+0x916>
 80046e2:	9b04      	ldr	r3, [sp, #16]
 80046e4:	b9bb      	cbnz	r3, 8004716 <_dtoa_r+0x916>
 80046e6:	9b05      	ldr	r3, [sp, #20]
 80046e8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80046ec:	b99b      	cbnz	r3, 8004716 <_dtoa_r+0x916>
 80046ee:	9b05      	ldr	r3, [sp, #20]
 80046f0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80046f4:	0d1b      	lsrs	r3, r3, #20
 80046f6:	051b      	lsls	r3, r3, #20
 80046f8:	b183      	cbz	r3, 800471c <_dtoa_r+0x91c>
 80046fa:	f04f 0801 	mov.w	r8, #1
 80046fe:	9b06      	ldr	r3, [sp, #24]
 8004700:	3301      	adds	r3, #1
 8004702:	9306      	str	r3, [sp, #24]
 8004704:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004706:	3301      	adds	r3, #1
 8004708:	9309      	str	r3, [sp, #36]	; 0x24
 800470a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800470c:	2b00      	cmp	r3, #0
 800470e:	f47f af6a 	bne.w	80045e6 <_dtoa_r+0x7e6>
 8004712:	2001      	movs	r0, #1
 8004714:	e76f      	b.n	80045f6 <_dtoa_r+0x7f6>
 8004716:	f04f 0800 	mov.w	r8, #0
 800471a:	e7f6      	b.n	800470a <_dtoa_r+0x90a>
 800471c:	4698      	mov	r8, r3
 800471e:	e7f4      	b.n	800470a <_dtoa_r+0x90a>
 8004720:	f43f af7d 	beq.w	800461e <_dtoa_r+0x81e>
 8004724:	4618      	mov	r0, r3
 8004726:	301c      	adds	r0, #28
 8004728:	e772      	b.n	8004610 <_dtoa_r+0x810>
 800472a:	9b08      	ldr	r3, [sp, #32]
 800472c:	2b00      	cmp	r3, #0
 800472e:	dc36      	bgt.n	800479e <_dtoa_r+0x99e>
 8004730:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004732:	2b02      	cmp	r3, #2
 8004734:	dd33      	ble.n	800479e <_dtoa_r+0x99e>
 8004736:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800473a:	f1b9 0f00 	cmp.w	r9, #0
 800473e:	d10d      	bne.n	800475c <_dtoa_r+0x95c>
 8004740:	4621      	mov	r1, r4
 8004742:	464b      	mov	r3, r9
 8004744:	2205      	movs	r2, #5
 8004746:	4628      	mov	r0, r5
 8004748:	f000 f9d2 	bl	8004af0 <__multadd>
 800474c:	4601      	mov	r1, r0
 800474e:	4604      	mov	r4, r0
 8004750:	4658      	mov	r0, fp
 8004752:	f000 fbe9 	bl	8004f28 <__mcmp>
 8004756:	2800      	cmp	r0, #0
 8004758:	f73f adb8 	bgt.w	80042cc <_dtoa_r+0x4cc>
 800475c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800475e:	9f03      	ldr	r7, [sp, #12]
 8004760:	ea6f 0a03 	mvn.w	sl, r3
 8004764:	f04f 0800 	mov.w	r8, #0
 8004768:	4621      	mov	r1, r4
 800476a:	4628      	mov	r0, r5
 800476c:	f000 f99e 	bl	8004aac <_Bfree>
 8004770:	2e00      	cmp	r6, #0
 8004772:	f43f aea7 	beq.w	80044c4 <_dtoa_r+0x6c4>
 8004776:	f1b8 0f00 	cmp.w	r8, #0
 800477a:	d005      	beq.n	8004788 <_dtoa_r+0x988>
 800477c:	45b0      	cmp	r8, r6
 800477e:	d003      	beq.n	8004788 <_dtoa_r+0x988>
 8004780:	4641      	mov	r1, r8
 8004782:	4628      	mov	r0, r5
 8004784:	f000 f992 	bl	8004aac <_Bfree>
 8004788:	4631      	mov	r1, r6
 800478a:	4628      	mov	r0, r5
 800478c:	f000 f98e 	bl	8004aac <_Bfree>
 8004790:	e698      	b.n	80044c4 <_dtoa_r+0x6c4>
 8004792:	2400      	movs	r4, #0
 8004794:	4626      	mov	r6, r4
 8004796:	e7e1      	b.n	800475c <_dtoa_r+0x95c>
 8004798:	46c2      	mov	sl, r8
 800479a:	4626      	mov	r6, r4
 800479c:	e596      	b.n	80042cc <_dtoa_r+0x4cc>
 800479e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80047a0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	f000 80fd 	beq.w	80049a4 <_dtoa_r+0xba4>
 80047aa:	2f00      	cmp	r7, #0
 80047ac:	dd05      	ble.n	80047ba <_dtoa_r+0x9ba>
 80047ae:	4631      	mov	r1, r6
 80047b0:	463a      	mov	r2, r7
 80047b2:	4628      	mov	r0, r5
 80047b4:	f000 fb48 	bl	8004e48 <__lshift>
 80047b8:	4606      	mov	r6, r0
 80047ba:	f1b8 0f00 	cmp.w	r8, #0
 80047be:	d05c      	beq.n	800487a <_dtoa_r+0xa7a>
 80047c0:	4628      	mov	r0, r5
 80047c2:	6871      	ldr	r1, [r6, #4]
 80047c4:	f000 f932 	bl	8004a2c <_Balloc>
 80047c8:	4607      	mov	r7, r0
 80047ca:	b928      	cbnz	r0, 80047d8 <_dtoa_r+0x9d8>
 80047cc:	4602      	mov	r2, r0
 80047ce:	f240 21ea 	movw	r1, #746	; 0x2ea
 80047d2:	4b7f      	ldr	r3, [pc, #508]	; (80049d0 <_dtoa_r+0xbd0>)
 80047d4:	f7ff bb28 	b.w	8003e28 <_dtoa_r+0x28>
 80047d8:	6932      	ldr	r2, [r6, #16]
 80047da:	f106 010c 	add.w	r1, r6, #12
 80047de:	3202      	adds	r2, #2
 80047e0:	0092      	lsls	r2, r2, #2
 80047e2:	300c      	adds	r0, #12
 80047e4:	f000 f914 	bl	8004a10 <memcpy>
 80047e8:	2201      	movs	r2, #1
 80047ea:	4639      	mov	r1, r7
 80047ec:	4628      	mov	r0, r5
 80047ee:	f000 fb2b 	bl	8004e48 <__lshift>
 80047f2:	46b0      	mov	r8, r6
 80047f4:	4606      	mov	r6, r0
 80047f6:	9b03      	ldr	r3, [sp, #12]
 80047f8:	3301      	adds	r3, #1
 80047fa:	9308      	str	r3, [sp, #32]
 80047fc:	9b03      	ldr	r3, [sp, #12]
 80047fe:	444b      	add	r3, r9
 8004800:	930a      	str	r3, [sp, #40]	; 0x28
 8004802:	9b04      	ldr	r3, [sp, #16]
 8004804:	f003 0301 	and.w	r3, r3, #1
 8004808:	9309      	str	r3, [sp, #36]	; 0x24
 800480a:	9b08      	ldr	r3, [sp, #32]
 800480c:	4621      	mov	r1, r4
 800480e:	3b01      	subs	r3, #1
 8004810:	4658      	mov	r0, fp
 8004812:	9304      	str	r3, [sp, #16]
 8004814:	f7ff fa66 	bl	8003ce4 <quorem>
 8004818:	4603      	mov	r3, r0
 800481a:	4641      	mov	r1, r8
 800481c:	3330      	adds	r3, #48	; 0x30
 800481e:	9006      	str	r0, [sp, #24]
 8004820:	4658      	mov	r0, fp
 8004822:	930b      	str	r3, [sp, #44]	; 0x2c
 8004824:	f000 fb80 	bl	8004f28 <__mcmp>
 8004828:	4632      	mov	r2, r6
 800482a:	4681      	mov	r9, r0
 800482c:	4621      	mov	r1, r4
 800482e:	4628      	mov	r0, r5
 8004830:	f000 fb96 	bl	8004f60 <__mdiff>
 8004834:	68c2      	ldr	r2, [r0, #12]
 8004836:	4607      	mov	r7, r0
 8004838:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800483a:	bb02      	cbnz	r2, 800487e <_dtoa_r+0xa7e>
 800483c:	4601      	mov	r1, r0
 800483e:	4658      	mov	r0, fp
 8004840:	f000 fb72 	bl	8004f28 <__mcmp>
 8004844:	4602      	mov	r2, r0
 8004846:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004848:	4639      	mov	r1, r7
 800484a:	4628      	mov	r0, r5
 800484c:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 8004850:	f000 f92c 	bl	8004aac <_Bfree>
 8004854:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004856:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004858:	9f08      	ldr	r7, [sp, #32]
 800485a:	ea43 0102 	orr.w	r1, r3, r2
 800485e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004860:	430b      	orrs	r3, r1
 8004862:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004864:	d10d      	bne.n	8004882 <_dtoa_r+0xa82>
 8004866:	2b39      	cmp	r3, #57	; 0x39
 8004868:	d029      	beq.n	80048be <_dtoa_r+0xabe>
 800486a:	f1b9 0f00 	cmp.w	r9, #0
 800486e:	dd01      	ble.n	8004874 <_dtoa_r+0xa74>
 8004870:	9b06      	ldr	r3, [sp, #24]
 8004872:	3331      	adds	r3, #49	; 0x31
 8004874:	9a04      	ldr	r2, [sp, #16]
 8004876:	7013      	strb	r3, [r2, #0]
 8004878:	e776      	b.n	8004768 <_dtoa_r+0x968>
 800487a:	4630      	mov	r0, r6
 800487c:	e7b9      	b.n	80047f2 <_dtoa_r+0x9f2>
 800487e:	2201      	movs	r2, #1
 8004880:	e7e2      	b.n	8004848 <_dtoa_r+0xa48>
 8004882:	f1b9 0f00 	cmp.w	r9, #0
 8004886:	db06      	blt.n	8004896 <_dtoa_r+0xa96>
 8004888:	9922      	ldr	r1, [sp, #136]	; 0x88
 800488a:	ea41 0909 	orr.w	r9, r1, r9
 800488e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004890:	ea59 0101 	orrs.w	r1, r9, r1
 8004894:	d120      	bne.n	80048d8 <_dtoa_r+0xad8>
 8004896:	2a00      	cmp	r2, #0
 8004898:	ddec      	ble.n	8004874 <_dtoa_r+0xa74>
 800489a:	4659      	mov	r1, fp
 800489c:	2201      	movs	r2, #1
 800489e:	4628      	mov	r0, r5
 80048a0:	9308      	str	r3, [sp, #32]
 80048a2:	f000 fad1 	bl	8004e48 <__lshift>
 80048a6:	4621      	mov	r1, r4
 80048a8:	4683      	mov	fp, r0
 80048aa:	f000 fb3d 	bl	8004f28 <__mcmp>
 80048ae:	2800      	cmp	r0, #0
 80048b0:	9b08      	ldr	r3, [sp, #32]
 80048b2:	dc02      	bgt.n	80048ba <_dtoa_r+0xaba>
 80048b4:	d1de      	bne.n	8004874 <_dtoa_r+0xa74>
 80048b6:	07da      	lsls	r2, r3, #31
 80048b8:	d5dc      	bpl.n	8004874 <_dtoa_r+0xa74>
 80048ba:	2b39      	cmp	r3, #57	; 0x39
 80048bc:	d1d8      	bne.n	8004870 <_dtoa_r+0xa70>
 80048be:	2339      	movs	r3, #57	; 0x39
 80048c0:	9a04      	ldr	r2, [sp, #16]
 80048c2:	7013      	strb	r3, [r2, #0]
 80048c4:	463b      	mov	r3, r7
 80048c6:	461f      	mov	r7, r3
 80048c8:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 80048cc:	3b01      	subs	r3, #1
 80048ce:	2a39      	cmp	r2, #57	; 0x39
 80048d0:	d050      	beq.n	8004974 <_dtoa_r+0xb74>
 80048d2:	3201      	adds	r2, #1
 80048d4:	701a      	strb	r2, [r3, #0]
 80048d6:	e747      	b.n	8004768 <_dtoa_r+0x968>
 80048d8:	2a00      	cmp	r2, #0
 80048da:	dd03      	ble.n	80048e4 <_dtoa_r+0xae4>
 80048dc:	2b39      	cmp	r3, #57	; 0x39
 80048de:	d0ee      	beq.n	80048be <_dtoa_r+0xabe>
 80048e0:	3301      	adds	r3, #1
 80048e2:	e7c7      	b.n	8004874 <_dtoa_r+0xa74>
 80048e4:	9a08      	ldr	r2, [sp, #32]
 80048e6:	990a      	ldr	r1, [sp, #40]	; 0x28
 80048e8:	f802 3c01 	strb.w	r3, [r2, #-1]
 80048ec:	428a      	cmp	r2, r1
 80048ee:	d02a      	beq.n	8004946 <_dtoa_r+0xb46>
 80048f0:	4659      	mov	r1, fp
 80048f2:	2300      	movs	r3, #0
 80048f4:	220a      	movs	r2, #10
 80048f6:	4628      	mov	r0, r5
 80048f8:	f000 f8fa 	bl	8004af0 <__multadd>
 80048fc:	45b0      	cmp	r8, r6
 80048fe:	4683      	mov	fp, r0
 8004900:	f04f 0300 	mov.w	r3, #0
 8004904:	f04f 020a 	mov.w	r2, #10
 8004908:	4641      	mov	r1, r8
 800490a:	4628      	mov	r0, r5
 800490c:	d107      	bne.n	800491e <_dtoa_r+0xb1e>
 800490e:	f000 f8ef 	bl	8004af0 <__multadd>
 8004912:	4680      	mov	r8, r0
 8004914:	4606      	mov	r6, r0
 8004916:	9b08      	ldr	r3, [sp, #32]
 8004918:	3301      	adds	r3, #1
 800491a:	9308      	str	r3, [sp, #32]
 800491c:	e775      	b.n	800480a <_dtoa_r+0xa0a>
 800491e:	f000 f8e7 	bl	8004af0 <__multadd>
 8004922:	4631      	mov	r1, r6
 8004924:	4680      	mov	r8, r0
 8004926:	2300      	movs	r3, #0
 8004928:	220a      	movs	r2, #10
 800492a:	4628      	mov	r0, r5
 800492c:	f000 f8e0 	bl	8004af0 <__multadd>
 8004930:	4606      	mov	r6, r0
 8004932:	e7f0      	b.n	8004916 <_dtoa_r+0xb16>
 8004934:	f1b9 0f00 	cmp.w	r9, #0
 8004938:	bfcc      	ite	gt
 800493a:	464f      	movgt	r7, r9
 800493c:	2701      	movle	r7, #1
 800493e:	f04f 0800 	mov.w	r8, #0
 8004942:	9a03      	ldr	r2, [sp, #12]
 8004944:	4417      	add	r7, r2
 8004946:	4659      	mov	r1, fp
 8004948:	2201      	movs	r2, #1
 800494a:	4628      	mov	r0, r5
 800494c:	9308      	str	r3, [sp, #32]
 800494e:	f000 fa7b 	bl	8004e48 <__lshift>
 8004952:	4621      	mov	r1, r4
 8004954:	4683      	mov	fp, r0
 8004956:	f000 fae7 	bl	8004f28 <__mcmp>
 800495a:	2800      	cmp	r0, #0
 800495c:	dcb2      	bgt.n	80048c4 <_dtoa_r+0xac4>
 800495e:	d102      	bne.n	8004966 <_dtoa_r+0xb66>
 8004960:	9b08      	ldr	r3, [sp, #32]
 8004962:	07db      	lsls	r3, r3, #31
 8004964:	d4ae      	bmi.n	80048c4 <_dtoa_r+0xac4>
 8004966:	463b      	mov	r3, r7
 8004968:	461f      	mov	r7, r3
 800496a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800496e:	2a30      	cmp	r2, #48	; 0x30
 8004970:	d0fa      	beq.n	8004968 <_dtoa_r+0xb68>
 8004972:	e6f9      	b.n	8004768 <_dtoa_r+0x968>
 8004974:	9a03      	ldr	r2, [sp, #12]
 8004976:	429a      	cmp	r2, r3
 8004978:	d1a5      	bne.n	80048c6 <_dtoa_r+0xac6>
 800497a:	2331      	movs	r3, #49	; 0x31
 800497c:	f10a 0a01 	add.w	sl, sl, #1
 8004980:	e779      	b.n	8004876 <_dtoa_r+0xa76>
 8004982:	4b14      	ldr	r3, [pc, #80]	; (80049d4 <_dtoa_r+0xbd4>)
 8004984:	f7ff baa8 	b.w	8003ed8 <_dtoa_r+0xd8>
 8004988:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800498a:	2b00      	cmp	r3, #0
 800498c:	f47f aa81 	bne.w	8003e92 <_dtoa_r+0x92>
 8004990:	4b11      	ldr	r3, [pc, #68]	; (80049d8 <_dtoa_r+0xbd8>)
 8004992:	f7ff baa1 	b.w	8003ed8 <_dtoa_r+0xd8>
 8004996:	f1b9 0f00 	cmp.w	r9, #0
 800499a:	dc03      	bgt.n	80049a4 <_dtoa_r+0xba4>
 800499c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800499e:	2b02      	cmp	r3, #2
 80049a0:	f73f aecb 	bgt.w	800473a <_dtoa_r+0x93a>
 80049a4:	9f03      	ldr	r7, [sp, #12]
 80049a6:	4621      	mov	r1, r4
 80049a8:	4658      	mov	r0, fp
 80049aa:	f7ff f99b 	bl	8003ce4 <quorem>
 80049ae:	9a03      	ldr	r2, [sp, #12]
 80049b0:	f100 0330 	add.w	r3, r0, #48	; 0x30
 80049b4:	f807 3b01 	strb.w	r3, [r7], #1
 80049b8:	1aba      	subs	r2, r7, r2
 80049ba:	4591      	cmp	r9, r2
 80049bc:	ddba      	ble.n	8004934 <_dtoa_r+0xb34>
 80049be:	4659      	mov	r1, fp
 80049c0:	2300      	movs	r3, #0
 80049c2:	220a      	movs	r2, #10
 80049c4:	4628      	mov	r0, r5
 80049c6:	f000 f893 	bl	8004af0 <__multadd>
 80049ca:	4683      	mov	fp, r0
 80049cc:	e7eb      	b.n	80049a6 <_dtoa_r+0xba6>
 80049ce:	bf00      	nop
 80049d0:	08005f33 	.word	0x08005f33
 80049d4:	08005e90 	.word	0x08005e90
 80049d8:	08005eb4 	.word	0x08005eb4

080049dc <_localeconv_r>:
 80049dc:	4800      	ldr	r0, [pc, #0]	; (80049e0 <_localeconv_r+0x4>)
 80049de:	4770      	bx	lr
 80049e0:	20000160 	.word	0x20000160

080049e4 <malloc>:
 80049e4:	4b02      	ldr	r3, [pc, #8]	; (80049f0 <malloc+0xc>)
 80049e6:	4601      	mov	r1, r0
 80049e8:	6818      	ldr	r0, [r3, #0]
 80049ea:	f000 bc1d 	b.w	8005228 <_malloc_r>
 80049ee:	bf00      	nop
 80049f0:	2000000c 	.word	0x2000000c

080049f4 <memchr>:
 80049f4:	4603      	mov	r3, r0
 80049f6:	b510      	push	{r4, lr}
 80049f8:	b2c9      	uxtb	r1, r1
 80049fa:	4402      	add	r2, r0
 80049fc:	4293      	cmp	r3, r2
 80049fe:	4618      	mov	r0, r3
 8004a00:	d101      	bne.n	8004a06 <memchr+0x12>
 8004a02:	2000      	movs	r0, #0
 8004a04:	e003      	b.n	8004a0e <memchr+0x1a>
 8004a06:	7804      	ldrb	r4, [r0, #0]
 8004a08:	3301      	adds	r3, #1
 8004a0a:	428c      	cmp	r4, r1
 8004a0c:	d1f6      	bne.n	80049fc <memchr+0x8>
 8004a0e:	bd10      	pop	{r4, pc}

08004a10 <memcpy>:
 8004a10:	440a      	add	r2, r1
 8004a12:	4291      	cmp	r1, r2
 8004a14:	f100 33ff 	add.w	r3, r0, #4294967295
 8004a18:	d100      	bne.n	8004a1c <memcpy+0xc>
 8004a1a:	4770      	bx	lr
 8004a1c:	b510      	push	{r4, lr}
 8004a1e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004a22:	4291      	cmp	r1, r2
 8004a24:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004a28:	d1f9      	bne.n	8004a1e <memcpy+0xe>
 8004a2a:	bd10      	pop	{r4, pc}

08004a2c <_Balloc>:
 8004a2c:	b570      	push	{r4, r5, r6, lr}
 8004a2e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8004a30:	4604      	mov	r4, r0
 8004a32:	460d      	mov	r5, r1
 8004a34:	b976      	cbnz	r6, 8004a54 <_Balloc+0x28>
 8004a36:	2010      	movs	r0, #16
 8004a38:	f7ff ffd4 	bl	80049e4 <malloc>
 8004a3c:	4602      	mov	r2, r0
 8004a3e:	6260      	str	r0, [r4, #36]	; 0x24
 8004a40:	b920      	cbnz	r0, 8004a4c <_Balloc+0x20>
 8004a42:	2166      	movs	r1, #102	; 0x66
 8004a44:	4b17      	ldr	r3, [pc, #92]	; (8004aa4 <_Balloc+0x78>)
 8004a46:	4818      	ldr	r0, [pc, #96]	; (8004aa8 <_Balloc+0x7c>)
 8004a48:	f000 fc72 	bl	8005330 <__assert_func>
 8004a4c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8004a50:	6006      	str	r6, [r0, #0]
 8004a52:	60c6      	str	r6, [r0, #12]
 8004a54:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8004a56:	68f3      	ldr	r3, [r6, #12]
 8004a58:	b183      	cbz	r3, 8004a7c <_Balloc+0x50>
 8004a5a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004a5c:	68db      	ldr	r3, [r3, #12]
 8004a5e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8004a62:	b9b8      	cbnz	r0, 8004a94 <_Balloc+0x68>
 8004a64:	2101      	movs	r1, #1
 8004a66:	fa01 f605 	lsl.w	r6, r1, r5
 8004a6a:	1d72      	adds	r2, r6, #5
 8004a6c:	4620      	mov	r0, r4
 8004a6e:	0092      	lsls	r2, r2, #2
 8004a70:	f000 fb5e 	bl	8005130 <_calloc_r>
 8004a74:	b160      	cbz	r0, 8004a90 <_Balloc+0x64>
 8004a76:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8004a7a:	e00e      	b.n	8004a9a <_Balloc+0x6e>
 8004a7c:	2221      	movs	r2, #33	; 0x21
 8004a7e:	2104      	movs	r1, #4
 8004a80:	4620      	mov	r0, r4
 8004a82:	f000 fb55 	bl	8005130 <_calloc_r>
 8004a86:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004a88:	60f0      	str	r0, [r6, #12]
 8004a8a:	68db      	ldr	r3, [r3, #12]
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d1e4      	bne.n	8004a5a <_Balloc+0x2e>
 8004a90:	2000      	movs	r0, #0
 8004a92:	bd70      	pop	{r4, r5, r6, pc}
 8004a94:	6802      	ldr	r2, [r0, #0]
 8004a96:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8004a9a:	2300      	movs	r3, #0
 8004a9c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8004aa0:	e7f7      	b.n	8004a92 <_Balloc+0x66>
 8004aa2:	bf00      	nop
 8004aa4:	08005ec1 	.word	0x08005ec1
 8004aa8:	08005f44 	.word	0x08005f44

08004aac <_Bfree>:
 8004aac:	b570      	push	{r4, r5, r6, lr}
 8004aae:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8004ab0:	4605      	mov	r5, r0
 8004ab2:	460c      	mov	r4, r1
 8004ab4:	b976      	cbnz	r6, 8004ad4 <_Bfree+0x28>
 8004ab6:	2010      	movs	r0, #16
 8004ab8:	f7ff ff94 	bl	80049e4 <malloc>
 8004abc:	4602      	mov	r2, r0
 8004abe:	6268      	str	r0, [r5, #36]	; 0x24
 8004ac0:	b920      	cbnz	r0, 8004acc <_Bfree+0x20>
 8004ac2:	218a      	movs	r1, #138	; 0x8a
 8004ac4:	4b08      	ldr	r3, [pc, #32]	; (8004ae8 <_Bfree+0x3c>)
 8004ac6:	4809      	ldr	r0, [pc, #36]	; (8004aec <_Bfree+0x40>)
 8004ac8:	f000 fc32 	bl	8005330 <__assert_func>
 8004acc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8004ad0:	6006      	str	r6, [r0, #0]
 8004ad2:	60c6      	str	r6, [r0, #12]
 8004ad4:	b13c      	cbz	r4, 8004ae6 <_Bfree+0x3a>
 8004ad6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8004ad8:	6862      	ldr	r2, [r4, #4]
 8004ada:	68db      	ldr	r3, [r3, #12]
 8004adc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004ae0:	6021      	str	r1, [r4, #0]
 8004ae2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8004ae6:	bd70      	pop	{r4, r5, r6, pc}
 8004ae8:	08005ec1 	.word	0x08005ec1
 8004aec:	08005f44 	.word	0x08005f44

08004af0 <__multadd>:
 8004af0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004af4:	4607      	mov	r7, r0
 8004af6:	460c      	mov	r4, r1
 8004af8:	461e      	mov	r6, r3
 8004afa:	2000      	movs	r0, #0
 8004afc:	690d      	ldr	r5, [r1, #16]
 8004afe:	f101 0c14 	add.w	ip, r1, #20
 8004b02:	f8dc 3000 	ldr.w	r3, [ip]
 8004b06:	3001      	adds	r0, #1
 8004b08:	b299      	uxth	r1, r3
 8004b0a:	fb02 6101 	mla	r1, r2, r1, r6
 8004b0e:	0c1e      	lsrs	r6, r3, #16
 8004b10:	0c0b      	lsrs	r3, r1, #16
 8004b12:	fb02 3306 	mla	r3, r2, r6, r3
 8004b16:	b289      	uxth	r1, r1
 8004b18:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8004b1c:	4285      	cmp	r5, r0
 8004b1e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8004b22:	f84c 1b04 	str.w	r1, [ip], #4
 8004b26:	dcec      	bgt.n	8004b02 <__multadd+0x12>
 8004b28:	b30e      	cbz	r6, 8004b6e <__multadd+0x7e>
 8004b2a:	68a3      	ldr	r3, [r4, #8]
 8004b2c:	42ab      	cmp	r3, r5
 8004b2e:	dc19      	bgt.n	8004b64 <__multadd+0x74>
 8004b30:	6861      	ldr	r1, [r4, #4]
 8004b32:	4638      	mov	r0, r7
 8004b34:	3101      	adds	r1, #1
 8004b36:	f7ff ff79 	bl	8004a2c <_Balloc>
 8004b3a:	4680      	mov	r8, r0
 8004b3c:	b928      	cbnz	r0, 8004b4a <__multadd+0x5a>
 8004b3e:	4602      	mov	r2, r0
 8004b40:	21b5      	movs	r1, #181	; 0xb5
 8004b42:	4b0c      	ldr	r3, [pc, #48]	; (8004b74 <__multadd+0x84>)
 8004b44:	480c      	ldr	r0, [pc, #48]	; (8004b78 <__multadd+0x88>)
 8004b46:	f000 fbf3 	bl	8005330 <__assert_func>
 8004b4a:	6922      	ldr	r2, [r4, #16]
 8004b4c:	f104 010c 	add.w	r1, r4, #12
 8004b50:	3202      	adds	r2, #2
 8004b52:	0092      	lsls	r2, r2, #2
 8004b54:	300c      	adds	r0, #12
 8004b56:	f7ff ff5b 	bl	8004a10 <memcpy>
 8004b5a:	4621      	mov	r1, r4
 8004b5c:	4638      	mov	r0, r7
 8004b5e:	f7ff ffa5 	bl	8004aac <_Bfree>
 8004b62:	4644      	mov	r4, r8
 8004b64:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8004b68:	3501      	adds	r5, #1
 8004b6a:	615e      	str	r6, [r3, #20]
 8004b6c:	6125      	str	r5, [r4, #16]
 8004b6e:	4620      	mov	r0, r4
 8004b70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004b74:	08005f33 	.word	0x08005f33
 8004b78:	08005f44 	.word	0x08005f44

08004b7c <__hi0bits>:
 8004b7c:	0c02      	lsrs	r2, r0, #16
 8004b7e:	0412      	lsls	r2, r2, #16
 8004b80:	4603      	mov	r3, r0
 8004b82:	b9ca      	cbnz	r2, 8004bb8 <__hi0bits+0x3c>
 8004b84:	0403      	lsls	r3, r0, #16
 8004b86:	2010      	movs	r0, #16
 8004b88:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8004b8c:	bf04      	itt	eq
 8004b8e:	021b      	lsleq	r3, r3, #8
 8004b90:	3008      	addeq	r0, #8
 8004b92:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8004b96:	bf04      	itt	eq
 8004b98:	011b      	lsleq	r3, r3, #4
 8004b9a:	3004      	addeq	r0, #4
 8004b9c:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8004ba0:	bf04      	itt	eq
 8004ba2:	009b      	lsleq	r3, r3, #2
 8004ba4:	3002      	addeq	r0, #2
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	db05      	blt.n	8004bb6 <__hi0bits+0x3a>
 8004baa:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 8004bae:	f100 0001 	add.w	r0, r0, #1
 8004bb2:	bf08      	it	eq
 8004bb4:	2020      	moveq	r0, #32
 8004bb6:	4770      	bx	lr
 8004bb8:	2000      	movs	r0, #0
 8004bba:	e7e5      	b.n	8004b88 <__hi0bits+0xc>

08004bbc <__lo0bits>:
 8004bbc:	6803      	ldr	r3, [r0, #0]
 8004bbe:	4602      	mov	r2, r0
 8004bc0:	f013 0007 	ands.w	r0, r3, #7
 8004bc4:	d00b      	beq.n	8004bde <__lo0bits+0x22>
 8004bc6:	07d9      	lsls	r1, r3, #31
 8004bc8:	d421      	bmi.n	8004c0e <__lo0bits+0x52>
 8004bca:	0798      	lsls	r0, r3, #30
 8004bcc:	bf49      	itett	mi
 8004bce:	085b      	lsrmi	r3, r3, #1
 8004bd0:	089b      	lsrpl	r3, r3, #2
 8004bd2:	2001      	movmi	r0, #1
 8004bd4:	6013      	strmi	r3, [r2, #0]
 8004bd6:	bf5c      	itt	pl
 8004bd8:	2002      	movpl	r0, #2
 8004bda:	6013      	strpl	r3, [r2, #0]
 8004bdc:	4770      	bx	lr
 8004bde:	b299      	uxth	r1, r3
 8004be0:	b909      	cbnz	r1, 8004be6 <__lo0bits+0x2a>
 8004be2:	2010      	movs	r0, #16
 8004be4:	0c1b      	lsrs	r3, r3, #16
 8004be6:	b2d9      	uxtb	r1, r3
 8004be8:	b909      	cbnz	r1, 8004bee <__lo0bits+0x32>
 8004bea:	3008      	adds	r0, #8
 8004bec:	0a1b      	lsrs	r3, r3, #8
 8004bee:	0719      	lsls	r1, r3, #28
 8004bf0:	bf04      	itt	eq
 8004bf2:	091b      	lsreq	r3, r3, #4
 8004bf4:	3004      	addeq	r0, #4
 8004bf6:	0799      	lsls	r1, r3, #30
 8004bf8:	bf04      	itt	eq
 8004bfa:	089b      	lsreq	r3, r3, #2
 8004bfc:	3002      	addeq	r0, #2
 8004bfe:	07d9      	lsls	r1, r3, #31
 8004c00:	d403      	bmi.n	8004c0a <__lo0bits+0x4e>
 8004c02:	085b      	lsrs	r3, r3, #1
 8004c04:	f100 0001 	add.w	r0, r0, #1
 8004c08:	d003      	beq.n	8004c12 <__lo0bits+0x56>
 8004c0a:	6013      	str	r3, [r2, #0]
 8004c0c:	4770      	bx	lr
 8004c0e:	2000      	movs	r0, #0
 8004c10:	4770      	bx	lr
 8004c12:	2020      	movs	r0, #32
 8004c14:	4770      	bx	lr
	...

08004c18 <__i2b>:
 8004c18:	b510      	push	{r4, lr}
 8004c1a:	460c      	mov	r4, r1
 8004c1c:	2101      	movs	r1, #1
 8004c1e:	f7ff ff05 	bl	8004a2c <_Balloc>
 8004c22:	4602      	mov	r2, r0
 8004c24:	b928      	cbnz	r0, 8004c32 <__i2b+0x1a>
 8004c26:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8004c2a:	4b04      	ldr	r3, [pc, #16]	; (8004c3c <__i2b+0x24>)
 8004c2c:	4804      	ldr	r0, [pc, #16]	; (8004c40 <__i2b+0x28>)
 8004c2e:	f000 fb7f 	bl	8005330 <__assert_func>
 8004c32:	2301      	movs	r3, #1
 8004c34:	6144      	str	r4, [r0, #20]
 8004c36:	6103      	str	r3, [r0, #16]
 8004c38:	bd10      	pop	{r4, pc}
 8004c3a:	bf00      	nop
 8004c3c:	08005f33 	.word	0x08005f33
 8004c40:	08005f44 	.word	0x08005f44

08004c44 <__multiply>:
 8004c44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004c48:	4691      	mov	r9, r2
 8004c4a:	690a      	ldr	r2, [r1, #16]
 8004c4c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8004c50:	460c      	mov	r4, r1
 8004c52:	429a      	cmp	r2, r3
 8004c54:	bfbe      	ittt	lt
 8004c56:	460b      	movlt	r3, r1
 8004c58:	464c      	movlt	r4, r9
 8004c5a:	4699      	movlt	r9, r3
 8004c5c:	6927      	ldr	r7, [r4, #16]
 8004c5e:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8004c62:	68a3      	ldr	r3, [r4, #8]
 8004c64:	6861      	ldr	r1, [r4, #4]
 8004c66:	eb07 060a 	add.w	r6, r7, sl
 8004c6a:	42b3      	cmp	r3, r6
 8004c6c:	b085      	sub	sp, #20
 8004c6e:	bfb8      	it	lt
 8004c70:	3101      	addlt	r1, #1
 8004c72:	f7ff fedb 	bl	8004a2c <_Balloc>
 8004c76:	b930      	cbnz	r0, 8004c86 <__multiply+0x42>
 8004c78:	4602      	mov	r2, r0
 8004c7a:	f240 115d 	movw	r1, #349	; 0x15d
 8004c7e:	4b43      	ldr	r3, [pc, #268]	; (8004d8c <__multiply+0x148>)
 8004c80:	4843      	ldr	r0, [pc, #268]	; (8004d90 <__multiply+0x14c>)
 8004c82:	f000 fb55 	bl	8005330 <__assert_func>
 8004c86:	f100 0514 	add.w	r5, r0, #20
 8004c8a:	462b      	mov	r3, r5
 8004c8c:	2200      	movs	r2, #0
 8004c8e:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8004c92:	4543      	cmp	r3, r8
 8004c94:	d321      	bcc.n	8004cda <__multiply+0x96>
 8004c96:	f104 0314 	add.w	r3, r4, #20
 8004c9a:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8004c9e:	f109 0314 	add.w	r3, r9, #20
 8004ca2:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8004ca6:	9202      	str	r2, [sp, #8]
 8004ca8:	1b3a      	subs	r2, r7, r4
 8004caa:	3a15      	subs	r2, #21
 8004cac:	f022 0203 	bic.w	r2, r2, #3
 8004cb0:	3204      	adds	r2, #4
 8004cb2:	f104 0115 	add.w	r1, r4, #21
 8004cb6:	428f      	cmp	r7, r1
 8004cb8:	bf38      	it	cc
 8004cba:	2204      	movcc	r2, #4
 8004cbc:	9201      	str	r2, [sp, #4]
 8004cbe:	9a02      	ldr	r2, [sp, #8]
 8004cc0:	9303      	str	r3, [sp, #12]
 8004cc2:	429a      	cmp	r2, r3
 8004cc4:	d80c      	bhi.n	8004ce0 <__multiply+0x9c>
 8004cc6:	2e00      	cmp	r6, #0
 8004cc8:	dd03      	ble.n	8004cd2 <__multiply+0x8e>
 8004cca:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d059      	beq.n	8004d86 <__multiply+0x142>
 8004cd2:	6106      	str	r6, [r0, #16]
 8004cd4:	b005      	add	sp, #20
 8004cd6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004cda:	f843 2b04 	str.w	r2, [r3], #4
 8004cde:	e7d8      	b.n	8004c92 <__multiply+0x4e>
 8004ce0:	f8b3 a000 	ldrh.w	sl, [r3]
 8004ce4:	f1ba 0f00 	cmp.w	sl, #0
 8004ce8:	d023      	beq.n	8004d32 <__multiply+0xee>
 8004cea:	46a9      	mov	r9, r5
 8004cec:	f04f 0c00 	mov.w	ip, #0
 8004cf0:	f104 0e14 	add.w	lr, r4, #20
 8004cf4:	f85e 2b04 	ldr.w	r2, [lr], #4
 8004cf8:	f8d9 1000 	ldr.w	r1, [r9]
 8004cfc:	fa1f fb82 	uxth.w	fp, r2
 8004d00:	b289      	uxth	r1, r1
 8004d02:	fb0a 110b 	mla	r1, sl, fp, r1
 8004d06:	4461      	add	r1, ip
 8004d08:	f8d9 c000 	ldr.w	ip, [r9]
 8004d0c:	0c12      	lsrs	r2, r2, #16
 8004d0e:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8004d12:	fb0a c202 	mla	r2, sl, r2, ip
 8004d16:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8004d1a:	b289      	uxth	r1, r1
 8004d1c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8004d20:	4577      	cmp	r7, lr
 8004d22:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8004d26:	f849 1b04 	str.w	r1, [r9], #4
 8004d2a:	d8e3      	bhi.n	8004cf4 <__multiply+0xb0>
 8004d2c:	9a01      	ldr	r2, [sp, #4]
 8004d2e:	f845 c002 	str.w	ip, [r5, r2]
 8004d32:	9a03      	ldr	r2, [sp, #12]
 8004d34:	3304      	adds	r3, #4
 8004d36:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8004d3a:	f1b9 0f00 	cmp.w	r9, #0
 8004d3e:	d020      	beq.n	8004d82 <__multiply+0x13e>
 8004d40:	46ae      	mov	lr, r5
 8004d42:	f04f 0a00 	mov.w	sl, #0
 8004d46:	6829      	ldr	r1, [r5, #0]
 8004d48:	f104 0c14 	add.w	ip, r4, #20
 8004d4c:	f8bc b000 	ldrh.w	fp, [ip]
 8004d50:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8004d54:	b289      	uxth	r1, r1
 8004d56:	fb09 220b 	mla	r2, r9, fp, r2
 8004d5a:	4492      	add	sl, r2
 8004d5c:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8004d60:	f84e 1b04 	str.w	r1, [lr], #4
 8004d64:	f85c 2b04 	ldr.w	r2, [ip], #4
 8004d68:	f8be 1000 	ldrh.w	r1, [lr]
 8004d6c:	0c12      	lsrs	r2, r2, #16
 8004d6e:	fb09 1102 	mla	r1, r9, r2, r1
 8004d72:	4567      	cmp	r7, ip
 8004d74:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8004d78:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8004d7c:	d8e6      	bhi.n	8004d4c <__multiply+0x108>
 8004d7e:	9a01      	ldr	r2, [sp, #4]
 8004d80:	50a9      	str	r1, [r5, r2]
 8004d82:	3504      	adds	r5, #4
 8004d84:	e79b      	b.n	8004cbe <__multiply+0x7a>
 8004d86:	3e01      	subs	r6, #1
 8004d88:	e79d      	b.n	8004cc6 <__multiply+0x82>
 8004d8a:	bf00      	nop
 8004d8c:	08005f33 	.word	0x08005f33
 8004d90:	08005f44 	.word	0x08005f44

08004d94 <__pow5mult>:
 8004d94:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004d98:	4615      	mov	r5, r2
 8004d9a:	f012 0203 	ands.w	r2, r2, #3
 8004d9e:	4606      	mov	r6, r0
 8004da0:	460f      	mov	r7, r1
 8004da2:	d007      	beq.n	8004db4 <__pow5mult+0x20>
 8004da4:	4c25      	ldr	r4, [pc, #148]	; (8004e3c <__pow5mult+0xa8>)
 8004da6:	3a01      	subs	r2, #1
 8004da8:	2300      	movs	r3, #0
 8004daa:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8004dae:	f7ff fe9f 	bl	8004af0 <__multadd>
 8004db2:	4607      	mov	r7, r0
 8004db4:	10ad      	asrs	r5, r5, #2
 8004db6:	d03d      	beq.n	8004e34 <__pow5mult+0xa0>
 8004db8:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8004dba:	b97c      	cbnz	r4, 8004ddc <__pow5mult+0x48>
 8004dbc:	2010      	movs	r0, #16
 8004dbe:	f7ff fe11 	bl	80049e4 <malloc>
 8004dc2:	4602      	mov	r2, r0
 8004dc4:	6270      	str	r0, [r6, #36]	; 0x24
 8004dc6:	b928      	cbnz	r0, 8004dd4 <__pow5mult+0x40>
 8004dc8:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8004dcc:	4b1c      	ldr	r3, [pc, #112]	; (8004e40 <__pow5mult+0xac>)
 8004dce:	481d      	ldr	r0, [pc, #116]	; (8004e44 <__pow5mult+0xb0>)
 8004dd0:	f000 faae 	bl	8005330 <__assert_func>
 8004dd4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8004dd8:	6004      	str	r4, [r0, #0]
 8004dda:	60c4      	str	r4, [r0, #12]
 8004ddc:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8004de0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8004de4:	b94c      	cbnz	r4, 8004dfa <__pow5mult+0x66>
 8004de6:	f240 2171 	movw	r1, #625	; 0x271
 8004dea:	4630      	mov	r0, r6
 8004dec:	f7ff ff14 	bl	8004c18 <__i2b>
 8004df0:	2300      	movs	r3, #0
 8004df2:	4604      	mov	r4, r0
 8004df4:	f8c8 0008 	str.w	r0, [r8, #8]
 8004df8:	6003      	str	r3, [r0, #0]
 8004dfa:	f04f 0900 	mov.w	r9, #0
 8004dfe:	07eb      	lsls	r3, r5, #31
 8004e00:	d50a      	bpl.n	8004e18 <__pow5mult+0x84>
 8004e02:	4639      	mov	r1, r7
 8004e04:	4622      	mov	r2, r4
 8004e06:	4630      	mov	r0, r6
 8004e08:	f7ff ff1c 	bl	8004c44 <__multiply>
 8004e0c:	4680      	mov	r8, r0
 8004e0e:	4639      	mov	r1, r7
 8004e10:	4630      	mov	r0, r6
 8004e12:	f7ff fe4b 	bl	8004aac <_Bfree>
 8004e16:	4647      	mov	r7, r8
 8004e18:	106d      	asrs	r5, r5, #1
 8004e1a:	d00b      	beq.n	8004e34 <__pow5mult+0xa0>
 8004e1c:	6820      	ldr	r0, [r4, #0]
 8004e1e:	b938      	cbnz	r0, 8004e30 <__pow5mult+0x9c>
 8004e20:	4622      	mov	r2, r4
 8004e22:	4621      	mov	r1, r4
 8004e24:	4630      	mov	r0, r6
 8004e26:	f7ff ff0d 	bl	8004c44 <__multiply>
 8004e2a:	6020      	str	r0, [r4, #0]
 8004e2c:	f8c0 9000 	str.w	r9, [r0]
 8004e30:	4604      	mov	r4, r0
 8004e32:	e7e4      	b.n	8004dfe <__pow5mult+0x6a>
 8004e34:	4638      	mov	r0, r7
 8004e36:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004e3a:	bf00      	nop
 8004e3c:	08006090 	.word	0x08006090
 8004e40:	08005ec1 	.word	0x08005ec1
 8004e44:	08005f44 	.word	0x08005f44

08004e48 <__lshift>:
 8004e48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004e4c:	460c      	mov	r4, r1
 8004e4e:	4607      	mov	r7, r0
 8004e50:	4691      	mov	r9, r2
 8004e52:	6923      	ldr	r3, [r4, #16]
 8004e54:	6849      	ldr	r1, [r1, #4]
 8004e56:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8004e5a:	68a3      	ldr	r3, [r4, #8]
 8004e5c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8004e60:	f108 0601 	add.w	r6, r8, #1
 8004e64:	42b3      	cmp	r3, r6
 8004e66:	db0b      	blt.n	8004e80 <__lshift+0x38>
 8004e68:	4638      	mov	r0, r7
 8004e6a:	f7ff fddf 	bl	8004a2c <_Balloc>
 8004e6e:	4605      	mov	r5, r0
 8004e70:	b948      	cbnz	r0, 8004e86 <__lshift+0x3e>
 8004e72:	4602      	mov	r2, r0
 8004e74:	f240 11d9 	movw	r1, #473	; 0x1d9
 8004e78:	4b29      	ldr	r3, [pc, #164]	; (8004f20 <__lshift+0xd8>)
 8004e7a:	482a      	ldr	r0, [pc, #168]	; (8004f24 <__lshift+0xdc>)
 8004e7c:	f000 fa58 	bl	8005330 <__assert_func>
 8004e80:	3101      	adds	r1, #1
 8004e82:	005b      	lsls	r3, r3, #1
 8004e84:	e7ee      	b.n	8004e64 <__lshift+0x1c>
 8004e86:	2300      	movs	r3, #0
 8004e88:	f100 0114 	add.w	r1, r0, #20
 8004e8c:	f100 0210 	add.w	r2, r0, #16
 8004e90:	4618      	mov	r0, r3
 8004e92:	4553      	cmp	r3, sl
 8004e94:	db37      	blt.n	8004f06 <__lshift+0xbe>
 8004e96:	6920      	ldr	r0, [r4, #16]
 8004e98:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8004e9c:	f104 0314 	add.w	r3, r4, #20
 8004ea0:	f019 091f 	ands.w	r9, r9, #31
 8004ea4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8004ea8:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8004eac:	d02f      	beq.n	8004f0e <__lshift+0xc6>
 8004eae:	468a      	mov	sl, r1
 8004eb0:	f04f 0c00 	mov.w	ip, #0
 8004eb4:	f1c9 0e20 	rsb	lr, r9, #32
 8004eb8:	681a      	ldr	r2, [r3, #0]
 8004eba:	fa02 f209 	lsl.w	r2, r2, r9
 8004ebe:	ea42 020c 	orr.w	r2, r2, ip
 8004ec2:	f84a 2b04 	str.w	r2, [sl], #4
 8004ec6:	f853 2b04 	ldr.w	r2, [r3], #4
 8004eca:	4298      	cmp	r0, r3
 8004ecc:	fa22 fc0e 	lsr.w	ip, r2, lr
 8004ed0:	d8f2      	bhi.n	8004eb8 <__lshift+0x70>
 8004ed2:	1b03      	subs	r3, r0, r4
 8004ed4:	3b15      	subs	r3, #21
 8004ed6:	f023 0303 	bic.w	r3, r3, #3
 8004eda:	3304      	adds	r3, #4
 8004edc:	f104 0215 	add.w	r2, r4, #21
 8004ee0:	4290      	cmp	r0, r2
 8004ee2:	bf38      	it	cc
 8004ee4:	2304      	movcc	r3, #4
 8004ee6:	f841 c003 	str.w	ip, [r1, r3]
 8004eea:	f1bc 0f00 	cmp.w	ip, #0
 8004eee:	d001      	beq.n	8004ef4 <__lshift+0xac>
 8004ef0:	f108 0602 	add.w	r6, r8, #2
 8004ef4:	3e01      	subs	r6, #1
 8004ef6:	4638      	mov	r0, r7
 8004ef8:	4621      	mov	r1, r4
 8004efa:	612e      	str	r6, [r5, #16]
 8004efc:	f7ff fdd6 	bl	8004aac <_Bfree>
 8004f00:	4628      	mov	r0, r5
 8004f02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004f06:	f842 0f04 	str.w	r0, [r2, #4]!
 8004f0a:	3301      	adds	r3, #1
 8004f0c:	e7c1      	b.n	8004e92 <__lshift+0x4a>
 8004f0e:	3904      	subs	r1, #4
 8004f10:	f853 2b04 	ldr.w	r2, [r3], #4
 8004f14:	4298      	cmp	r0, r3
 8004f16:	f841 2f04 	str.w	r2, [r1, #4]!
 8004f1a:	d8f9      	bhi.n	8004f10 <__lshift+0xc8>
 8004f1c:	e7ea      	b.n	8004ef4 <__lshift+0xac>
 8004f1e:	bf00      	nop
 8004f20:	08005f33 	.word	0x08005f33
 8004f24:	08005f44 	.word	0x08005f44

08004f28 <__mcmp>:
 8004f28:	4603      	mov	r3, r0
 8004f2a:	690a      	ldr	r2, [r1, #16]
 8004f2c:	6900      	ldr	r0, [r0, #16]
 8004f2e:	b530      	push	{r4, r5, lr}
 8004f30:	1a80      	subs	r0, r0, r2
 8004f32:	d10d      	bne.n	8004f50 <__mcmp+0x28>
 8004f34:	3314      	adds	r3, #20
 8004f36:	3114      	adds	r1, #20
 8004f38:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8004f3c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8004f40:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8004f44:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8004f48:	4295      	cmp	r5, r2
 8004f4a:	d002      	beq.n	8004f52 <__mcmp+0x2a>
 8004f4c:	d304      	bcc.n	8004f58 <__mcmp+0x30>
 8004f4e:	2001      	movs	r0, #1
 8004f50:	bd30      	pop	{r4, r5, pc}
 8004f52:	42a3      	cmp	r3, r4
 8004f54:	d3f4      	bcc.n	8004f40 <__mcmp+0x18>
 8004f56:	e7fb      	b.n	8004f50 <__mcmp+0x28>
 8004f58:	f04f 30ff 	mov.w	r0, #4294967295
 8004f5c:	e7f8      	b.n	8004f50 <__mcmp+0x28>
	...

08004f60 <__mdiff>:
 8004f60:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004f64:	460d      	mov	r5, r1
 8004f66:	4607      	mov	r7, r0
 8004f68:	4611      	mov	r1, r2
 8004f6a:	4628      	mov	r0, r5
 8004f6c:	4614      	mov	r4, r2
 8004f6e:	f7ff ffdb 	bl	8004f28 <__mcmp>
 8004f72:	1e06      	subs	r6, r0, #0
 8004f74:	d111      	bne.n	8004f9a <__mdiff+0x3a>
 8004f76:	4631      	mov	r1, r6
 8004f78:	4638      	mov	r0, r7
 8004f7a:	f7ff fd57 	bl	8004a2c <_Balloc>
 8004f7e:	4602      	mov	r2, r0
 8004f80:	b928      	cbnz	r0, 8004f8e <__mdiff+0x2e>
 8004f82:	f240 2132 	movw	r1, #562	; 0x232
 8004f86:	4b3a      	ldr	r3, [pc, #232]	; (8005070 <__mdiff+0x110>)
 8004f88:	483a      	ldr	r0, [pc, #232]	; (8005074 <__mdiff+0x114>)
 8004f8a:	f000 f9d1 	bl	8005330 <__assert_func>
 8004f8e:	2301      	movs	r3, #1
 8004f90:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8004f94:	4610      	mov	r0, r2
 8004f96:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004f9a:	bfa4      	itt	ge
 8004f9c:	4623      	movge	r3, r4
 8004f9e:	462c      	movge	r4, r5
 8004fa0:	4638      	mov	r0, r7
 8004fa2:	6861      	ldr	r1, [r4, #4]
 8004fa4:	bfa6      	itte	ge
 8004fa6:	461d      	movge	r5, r3
 8004fa8:	2600      	movge	r6, #0
 8004faa:	2601      	movlt	r6, #1
 8004fac:	f7ff fd3e 	bl	8004a2c <_Balloc>
 8004fb0:	4602      	mov	r2, r0
 8004fb2:	b918      	cbnz	r0, 8004fbc <__mdiff+0x5c>
 8004fb4:	f44f 7110 	mov.w	r1, #576	; 0x240
 8004fb8:	4b2d      	ldr	r3, [pc, #180]	; (8005070 <__mdiff+0x110>)
 8004fba:	e7e5      	b.n	8004f88 <__mdiff+0x28>
 8004fbc:	f102 0814 	add.w	r8, r2, #20
 8004fc0:	46c2      	mov	sl, r8
 8004fc2:	f04f 0c00 	mov.w	ip, #0
 8004fc6:	6927      	ldr	r7, [r4, #16]
 8004fc8:	60c6      	str	r6, [r0, #12]
 8004fca:	692e      	ldr	r6, [r5, #16]
 8004fcc:	f104 0014 	add.w	r0, r4, #20
 8004fd0:	f105 0914 	add.w	r9, r5, #20
 8004fd4:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 8004fd8:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8004fdc:	3410      	adds	r4, #16
 8004fde:	f854 bf04 	ldr.w	fp, [r4, #4]!
 8004fe2:	f859 3b04 	ldr.w	r3, [r9], #4
 8004fe6:	fa1f f18b 	uxth.w	r1, fp
 8004fea:	448c      	add	ip, r1
 8004fec:	b299      	uxth	r1, r3
 8004fee:	0c1b      	lsrs	r3, r3, #16
 8004ff0:	ebac 0101 	sub.w	r1, ip, r1
 8004ff4:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8004ff8:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8004ffc:	b289      	uxth	r1, r1
 8004ffe:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8005002:	454e      	cmp	r6, r9
 8005004:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8005008:	f84a 3b04 	str.w	r3, [sl], #4
 800500c:	d8e7      	bhi.n	8004fde <__mdiff+0x7e>
 800500e:	1b73      	subs	r3, r6, r5
 8005010:	3b15      	subs	r3, #21
 8005012:	f023 0303 	bic.w	r3, r3, #3
 8005016:	3515      	adds	r5, #21
 8005018:	3304      	adds	r3, #4
 800501a:	42ae      	cmp	r6, r5
 800501c:	bf38      	it	cc
 800501e:	2304      	movcc	r3, #4
 8005020:	4418      	add	r0, r3
 8005022:	4443      	add	r3, r8
 8005024:	461e      	mov	r6, r3
 8005026:	4605      	mov	r5, r0
 8005028:	4575      	cmp	r5, lr
 800502a:	d30e      	bcc.n	800504a <__mdiff+0xea>
 800502c:	f10e 0103 	add.w	r1, lr, #3
 8005030:	1a09      	subs	r1, r1, r0
 8005032:	f021 0103 	bic.w	r1, r1, #3
 8005036:	3803      	subs	r0, #3
 8005038:	4586      	cmp	lr, r0
 800503a:	bf38      	it	cc
 800503c:	2100      	movcc	r1, #0
 800503e:	4419      	add	r1, r3
 8005040:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8005044:	b18b      	cbz	r3, 800506a <__mdiff+0x10a>
 8005046:	6117      	str	r7, [r2, #16]
 8005048:	e7a4      	b.n	8004f94 <__mdiff+0x34>
 800504a:	f855 8b04 	ldr.w	r8, [r5], #4
 800504e:	fa1f f188 	uxth.w	r1, r8
 8005052:	4461      	add	r1, ip
 8005054:	140c      	asrs	r4, r1, #16
 8005056:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800505a:	b289      	uxth	r1, r1
 800505c:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8005060:	ea4f 4c24 	mov.w	ip, r4, asr #16
 8005064:	f846 1b04 	str.w	r1, [r6], #4
 8005068:	e7de      	b.n	8005028 <__mdiff+0xc8>
 800506a:	3f01      	subs	r7, #1
 800506c:	e7e8      	b.n	8005040 <__mdiff+0xe0>
 800506e:	bf00      	nop
 8005070:	08005f33 	.word	0x08005f33
 8005074:	08005f44 	.word	0x08005f44

08005078 <__d2b>:
 8005078:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800507c:	2101      	movs	r1, #1
 800507e:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 8005082:	4690      	mov	r8, r2
 8005084:	461d      	mov	r5, r3
 8005086:	f7ff fcd1 	bl	8004a2c <_Balloc>
 800508a:	4604      	mov	r4, r0
 800508c:	b930      	cbnz	r0, 800509c <__d2b+0x24>
 800508e:	4602      	mov	r2, r0
 8005090:	f240 310a 	movw	r1, #778	; 0x30a
 8005094:	4b24      	ldr	r3, [pc, #144]	; (8005128 <__d2b+0xb0>)
 8005096:	4825      	ldr	r0, [pc, #148]	; (800512c <__d2b+0xb4>)
 8005098:	f000 f94a 	bl	8005330 <__assert_func>
 800509c:	f3c5 0313 	ubfx	r3, r5, #0, #20
 80050a0:	f3c5 550a 	ubfx	r5, r5, #20, #11
 80050a4:	bb2d      	cbnz	r5, 80050f2 <__d2b+0x7a>
 80050a6:	9301      	str	r3, [sp, #4]
 80050a8:	f1b8 0300 	subs.w	r3, r8, #0
 80050ac:	d026      	beq.n	80050fc <__d2b+0x84>
 80050ae:	4668      	mov	r0, sp
 80050b0:	9300      	str	r3, [sp, #0]
 80050b2:	f7ff fd83 	bl	8004bbc <__lo0bits>
 80050b6:	9900      	ldr	r1, [sp, #0]
 80050b8:	b1f0      	cbz	r0, 80050f8 <__d2b+0x80>
 80050ba:	9a01      	ldr	r2, [sp, #4]
 80050bc:	f1c0 0320 	rsb	r3, r0, #32
 80050c0:	fa02 f303 	lsl.w	r3, r2, r3
 80050c4:	430b      	orrs	r3, r1
 80050c6:	40c2      	lsrs	r2, r0
 80050c8:	6163      	str	r3, [r4, #20]
 80050ca:	9201      	str	r2, [sp, #4]
 80050cc:	9b01      	ldr	r3, [sp, #4]
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	bf14      	ite	ne
 80050d2:	2102      	movne	r1, #2
 80050d4:	2101      	moveq	r1, #1
 80050d6:	61a3      	str	r3, [r4, #24]
 80050d8:	6121      	str	r1, [r4, #16]
 80050da:	b1c5      	cbz	r5, 800510e <__d2b+0x96>
 80050dc:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80050e0:	4405      	add	r5, r0
 80050e2:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80050e6:	603d      	str	r5, [r7, #0]
 80050e8:	6030      	str	r0, [r6, #0]
 80050ea:	4620      	mov	r0, r4
 80050ec:	b002      	add	sp, #8
 80050ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80050f2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80050f6:	e7d6      	b.n	80050a6 <__d2b+0x2e>
 80050f8:	6161      	str	r1, [r4, #20]
 80050fa:	e7e7      	b.n	80050cc <__d2b+0x54>
 80050fc:	a801      	add	r0, sp, #4
 80050fe:	f7ff fd5d 	bl	8004bbc <__lo0bits>
 8005102:	2101      	movs	r1, #1
 8005104:	9b01      	ldr	r3, [sp, #4]
 8005106:	6121      	str	r1, [r4, #16]
 8005108:	6163      	str	r3, [r4, #20]
 800510a:	3020      	adds	r0, #32
 800510c:	e7e5      	b.n	80050da <__d2b+0x62>
 800510e:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 8005112:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8005116:	6038      	str	r0, [r7, #0]
 8005118:	6918      	ldr	r0, [r3, #16]
 800511a:	f7ff fd2f 	bl	8004b7c <__hi0bits>
 800511e:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 8005122:	6031      	str	r1, [r6, #0]
 8005124:	e7e1      	b.n	80050ea <__d2b+0x72>
 8005126:	bf00      	nop
 8005128:	08005f33 	.word	0x08005f33
 800512c:	08005f44 	.word	0x08005f44

08005130 <_calloc_r>:
 8005130:	b570      	push	{r4, r5, r6, lr}
 8005132:	fba1 5402 	umull	r5, r4, r1, r2
 8005136:	b934      	cbnz	r4, 8005146 <_calloc_r+0x16>
 8005138:	4629      	mov	r1, r5
 800513a:	f000 f875 	bl	8005228 <_malloc_r>
 800513e:	4606      	mov	r6, r0
 8005140:	b928      	cbnz	r0, 800514e <_calloc_r+0x1e>
 8005142:	4630      	mov	r0, r6
 8005144:	bd70      	pop	{r4, r5, r6, pc}
 8005146:	220c      	movs	r2, #12
 8005148:	2600      	movs	r6, #0
 800514a:	6002      	str	r2, [r0, #0]
 800514c:	e7f9      	b.n	8005142 <_calloc_r+0x12>
 800514e:	462a      	mov	r2, r5
 8005150:	4621      	mov	r1, r4
 8005152:	f7fe f95f 	bl	8003414 <memset>
 8005156:	e7f4      	b.n	8005142 <_calloc_r+0x12>

08005158 <_free_r>:
 8005158:	b538      	push	{r3, r4, r5, lr}
 800515a:	4605      	mov	r5, r0
 800515c:	2900      	cmp	r1, #0
 800515e:	d040      	beq.n	80051e2 <_free_r+0x8a>
 8005160:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005164:	1f0c      	subs	r4, r1, #4
 8005166:	2b00      	cmp	r3, #0
 8005168:	bfb8      	it	lt
 800516a:	18e4      	addlt	r4, r4, r3
 800516c:	f000 f922 	bl	80053b4 <__malloc_lock>
 8005170:	4a1c      	ldr	r2, [pc, #112]	; (80051e4 <_free_r+0x8c>)
 8005172:	6813      	ldr	r3, [r2, #0]
 8005174:	b933      	cbnz	r3, 8005184 <_free_r+0x2c>
 8005176:	6063      	str	r3, [r4, #4]
 8005178:	6014      	str	r4, [r2, #0]
 800517a:	4628      	mov	r0, r5
 800517c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005180:	f000 b91e 	b.w	80053c0 <__malloc_unlock>
 8005184:	42a3      	cmp	r3, r4
 8005186:	d908      	bls.n	800519a <_free_r+0x42>
 8005188:	6820      	ldr	r0, [r4, #0]
 800518a:	1821      	adds	r1, r4, r0
 800518c:	428b      	cmp	r3, r1
 800518e:	bf01      	itttt	eq
 8005190:	6819      	ldreq	r1, [r3, #0]
 8005192:	685b      	ldreq	r3, [r3, #4]
 8005194:	1809      	addeq	r1, r1, r0
 8005196:	6021      	streq	r1, [r4, #0]
 8005198:	e7ed      	b.n	8005176 <_free_r+0x1e>
 800519a:	461a      	mov	r2, r3
 800519c:	685b      	ldr	r3, [r3, #4]
 800519e:	b10b      	cbz	r3, 80051a4 <_free_r+0x4c>
 80051a0:	42a3      	cmp	r3, r4
 80051a2:	d9fa      	bls.n	800519a <_free_r+0x42>
 80051a4:	6811      	ldr	r1, [r2, #0]
 80051a6:	1850      	adds	r0, r2, r1
 80051a8:	42a0      	cmp	r0, r4
 80051aa:	d10b      	bne.n	80051c4 <_free_r+0x6c>
 80051ac:	6820      	ldr	r0, [r4, #0]
 80051ae:	4401      	add	r1, r0
 80051b0:	1850      	adds	r0, r2, r1
 80051b2:	4283      	cmp	r3, r0
 80051b4:	6011      	str	r1, [r2, #0]
 80051b6:	d1e0      	bne.n	800517a <_free_r+0x22>
 80051b8:	6818      	ldr	r0, [r3, #0]
 80051ba:	685b      	ldr	r3, [r3, #4]
 80051bc:	4401      	add	r1, r0
 80051be:	6011      	str	r1, [r2, #0]
 80051c0:	6053      	str	r3, [r2, #4]
 80051c2:	e7da      	b.n	800517a <_free_r+0x22>
 80051c4:	d902      	bls.n	80051cc <_free_r+0x74>
 80051c6:	230c      	movs	r3, #12
 80051c8:	602b      	str	r3, [r5, #0]
 80051ca:	e7d6      	b.n	800517a <_free_r+0x22>
 80051cc:	6820      	ldr	r0, [r4, #0]
 80051ce:	1821      	adds	r1, r4, r0
 80051d0:	428b      	cmp	r3, r1
 80051d2:	bf01      	itttt	eq
 80051d4:	6819      	ldreq	r1, [r3, #0]
 80051d6:	685b      	ldreq	r3, [r3, #4]
 80051d8:	1809      	addeq	r1, r1, r0
 80051da:	6021      	streq	r1, [r4, #0]
 80051dc:	6063      	str	r3, [r4, #4]
 80051de:	6054      	str	r4, [r2, #4]
 80051e0:	e7cb      	b.n	800517a <_free_r+0x22>
 80051e2:	bd38      	pop	{r3, r4, r5, pc}
 80051e4:	200002ac 	.word	0x200002ac

080051e8 <sbrk_aligned>:
 80051e8:	b570      	push	{r4, r5, r6, lr}
 80051ea:	4e0e      	ldr	r6, [pc, #56]	; (8005224 <sbrk_aligned+0x3c>)
 80051ec:	460c      	mov	r4, r1
 80051ee:	6831      	ldr	r1, [r6, #0]
 80051f0:	4605      	mov	r5, r0
 80051f2:	b911      	cbnz	r1, 80051fa <sbrk_aligned+0x12>
 80051f4:	f000 f88c 	bl	8005310 <_sbrk_r>
 80051f8:	6030      	str	r0, [r6, #0]
 80051fa:	4621      	mov	r1, r4
 80051fc:	4628      	mov	r0, r5
 80051fe:	f000 f887 	bl	8005310 <_sbrk_r>
 8005202:	1c43      	adds	r3, r0, #1
 8005204:	d00a      	beq.n	800521c <sbrk_aligned+0x34>
 8005206:	1cc4      	adds	r4, r0, #3
 8005208:	f024 0403 	bic.w	r4, r4, #3
 800520c:	42a0      	cmp	r0, r4
 800520e:	d007      	beq.n	8005220 <sbrk_aligned+0x38>
 8005210:	1a21      	subs	r1, r4, r0
 8005212:	4628      	mov	r0, r5
 8005214:	f000 f87c 	bl	8005310 <_sbrk_r>
 8005218:	3001      	adds	r0, #1
 800521a:	d101      	bne.n	8005220 <sbrk_aligned+0x38>
 800521c:	f04f 34ff 	mov.w	r4, #4294967295
 8005220:	4620      	mov	r0, r4
 8005222:	bd70      	pop	{r4, r5, r6, pc}
 8005224:	200002b0 	.word	0x200002b0

08005228 <_malloc_r>:
 8005228:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800522c:	1ccd      	adds	r5, r1, #3
 800522e:	f025 0503 	bic.w	r5, r5, #3
 8005232:	3508      	adds	r5, #8
 8005234:	2d0c      	cmp	r5, #12
 8005236:	bf38      	it	cc
 8005238:	250c      	movcc	r5, #12
 800523a:	2d00      	cmp	r5, #0
 800523c:	4607      	mov	r7, r0
 800523e:	db01      	blt.n	8005244 <_malloc_r+0x1c>
 8005240:	42a9      	cmp	r1, r5
 8005242:	d905      	bls.n	8005250 <_malloc_r+0x28>
 8005244:	230c      	movs	r3, #12
 8005246:	2600      	movs	r6, #0
 8005248:	603b      	str	r3, [r7, #0]
 800524a:	4630      	mov	r0, r6
 800524c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005250:	4e2e      	ldr	r6, [pc, #184]	; (800530c <_malloc_r+0xe4>)
 8005252:	f000 f8af 	bl	80053b4 <__malloc_lock>
 8005256:	6833      	ldr	r3, [r6, #0]
 8005258:	461c      	mov	r4, r3
 800525a:	bb34      	cbnz	r4, 80052aa <_malloc_r+0x82>
 800525c:	4629      	mov	r1, r5
 800525e:	4638      	mov	r0, r7
 8005260:	f7ff ffc2 	bl	80051e8 <sbrk_aligned>
 8005264:	1c43      	adds	r3, r0, #1
 8005266:	4604      	mov	r4, r0
 8005268:	d14d      	bne.n	8005306 <_malloc_r+0xde>
 800526a:	6834      	ldr	r4, [r6, #0]
 800526c:	4626      	mov	r6, r4
 800526e:	2e00      	cmp	r6, #0
 8005270:	d140      	bne.n	80052f4 <_malloc_r+0xcc>
 8005272:	6823      	ldr	r3, [r4, #0]
 8005274:	4631      	mov	r1, r6
 8005276:	4638      	mov	r0, r7
 8005278:	eb04 0803 	add.w	r8, r4, r3
 800527c:	f000 f848 	bl	8005310 <_sbrk_r>
 8005280:	4580      	cmp	r8, r0
 8005282:	d13a      	bne.n	80052fa <_malloc_r+0xd2>
 8005284:	6821      	ldr	r1, [r4, #0]
 8005286:	3503      	adds	r5, #3
 8005288:	1a6d      	subs	r5, r5, r1
 800528a:	f025 0503 	bic.w	r5, r5, #3
 800528e:	3508      	adds	r5, #8
 8005290:	2d0c      	cmp	r5, #12
 8005292:	bf38      	it	cc
 8005294:	250c      	movcc	r5, #12
 8005296:	4638      	mov	r0, r7
 8005298:	4629      	mov	r1, r5
 800529a:	f7ff ffa5 	bl	80051e8 <sbrk_aligned>
 800529e:	3001      	adds	r0, #1
 80052a0:	d02b      	beq.n	80052fa <_malloc_r+0xd2>
 80052a2:	6823      	ldr	r3, [r4, #0]
 80052a4:	442b      	add	r3, r5
 80052a6:	6023      	str	r3, [r4, #0]
 80052a8:	e00e      	b.n	80052c8 <_malloc_r+0xa0>
 80052aa:	6822      	ldr	r2, [r4, #0]
 80052ac:	1b52      	subs	r2, r2, r5
 80052ae:	d41e      	bmi.n	80052ee <_malloc_r+0xc6>
 80052b0:	2a0b      	cmp	r2, #11
 80052b2:	d916      	bls.n	80052e2 <_malloc_r+0xba>
 80052b4:	1961      	adds	r1, r4, r5
 80052b6:	42a3      	cmp	r3, r4
 80052b8:	6025      	str	r5, [r4, #0]
 80052ba:	bf18      	it	ne
 80052bc:	6059      	strne	r1, [r3, #4]
 80052be:	6863      	ldr	r3, [r4, #4]
 80052c0:	bf08      	it	eq
 80052c2:	6031      	streq	r1, [r6, #0]
 80052c4:	5162      	str	r2, [r4, r5]
 80052c6:	604b      	str	r3, [r1, #4]
 80052c8:	4638      	mov	r0, r7
 80052ca:	f104 060b 	add.w	r6, r4, #11
 80052ce:	f000 f877 	bl	80053c0 <__malloc_unlock>
 80052d2:	f026 0607 	bic.w	r6, r6, #7
 80052d6:	1d23      	adds	r3, r4, #4
 80052d8:	1af2      	subs	r2, r6, r3
 80052da:	d0b6      	beq.n	800524a <_malloc_r+0x22>
 80052dc:	1b9b      	subs	r3, r3, r6
 80052de:	50a3      	str	r3, [r4, r2]
 80052e0:	e7b3      	b.n	800524a <_malloc_r+0x22>
 80052e2:	6862      	ldr	r2, [r4, #4]
 80052e4:	42a3      	cmp	r3, r4
 80052e6:	bf0c      	ite	eq
 80052e8:	6032      	streq	r2, [r6, #0]
 80052ea:	605a      	strne	r2, [r3, #4]
 80052ec:	e7ec      	b.n	80052c8 <_malloc_r+0xa0>
 80052ee:	4623      	mov	r3, r4
 80052f0:	6864      	ldr	r4, [r4, #4]
 80052f2:	e7b2      	b.n	800525a <_malloc_r+0x32>
 80052f4:	4634      	mov	r4, r6
 80052f6:	6876      	ldr	r6, [r6, #4]
 80052f8:	e7b9      	b.n	800526e <_malloc_r+0x46>
 80052fa:	230c      	movs	r3, #12
 80052fc:	4638      	mov	r0, r7
 80052fe:	603b      	str	r3, [r7, #0]
 8005300:	f000 f85e 	bl	80053c0 <__malloc_unlock>
 8005304:	e7a1      	b.n	800524a <_malloc_r+0x22>
 8005306:	6025      	str	r5, [r4, #0]
 8005308:	e7de      	b.n	80052c8 <_malloc_r+0xa0>
 800530a:	bf00      	nop
 800530c:	200002ac 	.word	0x200002ac

08005310 <_sbrk_r>:
 8005310:	b538      	push	{r3, r4, r5, lr}
 8005312:	2300      	movs	r3, #0
 8005314:	4d05      	ldr	r5, [pc, #20]	; (800532c <_sbrk_r+0x1c>)
 8005316:	4604      	mov	r4, r0
 8005318:	4608      	mov	r0, r1
 800531a:	602b      	str	r3, [r5, #0]
 800531c:	f7fc f95e 	bl	80015dc <_sbrk>
 8005320:	1c43      	adds	r3, r0, #1
 8005322:	d102      	bne.n	800532a <_sbrk_r+0x1a>
 8005324:	682b      	ldr	r3, [r5, #0]
 8005326:	b103      	cbz	r3, 800532a <_sbrk_r+0x1a>
 8005328:	6023      	str	r3, [r4, #0]
 800532a:	bd38      	pop	{r3, r4, r5, pc}
 800532c:	200002b4 	.word	0x200002b4

08005330 <__assert_func>:
 8005330:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8005332:	4614      	mov	r4, r2
 8005334:	461a      	mov	r2, r3
 8005336:	4b09      	ldr	r3, [pc, #36]	; (800535c <__assert_func+0x2c>)
 8005338:	4605      	mov	r5, r0
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	68d8      	ldr	r0, [r3, #12]
 800533e:	b14c      	cbz	r4, 8005354 <__assert_func+0x24>
 8005340:	4b07      	ldr	r3, [pc, #28]	; (8005360 <__assert_func+0x30>)
 8005342:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8005346:	9100      	str	r1, [sp, #0]
 8005348:	462b      	mov	r3, r5
 800534a:	4906      	ldr	r1, [pc, #24]	; (8005364 <__assert_func+0x34>)
 800534c:	f000 f80e 	bl	800536c <fiprintf>
 8005350:	f000 fa62 	bl	8005818 <abort>
 8005354:	4b04      	ldr	r3, [pc, #16]	; (8005368 <__assert_func+0x38>)
 8005356:	461c      	mov	r4, r3
 8005358:	e7f3      	b.n	8005342 <__assert_func+0x12>
 800535a:	bf00      	nop
 800535c:	2000000c 	.word	0x2000000c
 8005360:	0800609c 	.word	0x0800609c
 8005364:	080060a9 	.word	0x080060a9
 8005368:	080060d7 	.word	0x080060d7

0800536c <fiprintf>:
 800536c:	b40e      	push	{r1, r2, r3}
 800536e:	b503      	push	{r0, r1, lr}
 8005370:	4601      	mov	r1, r0
 8005372:	ab03      	add	r3, sp, #12
 8005374:	4805      	ldr	r0, [pc, #20]	; (800538c <fiprintf+0x20>)
 8005376:	f853 2b04 	ldr.w	r2, [r3], #4
 800537a:	6800      	ldr	r0, [r0, #0]
 800537c:	9301      	str	r3, [sp, #4]
 800537e:	f000 f84d 	bl	800541c <_vfiprintf_r>
 8005382:	b002      	add	sp, #8
 8005384:	f85d eb04 	ldr.w	lr, [sp], #4
 8005388:	b003      	add	sp, #12
 800538a:	4770      	bx	lr
 800538c:	2000000c 	.word	0x2000000c

08005390 <__ascii_mbtowc>:
 8005390:	b082      	sub	sp, #8
 8005392:	b901      	cbnz	r1, 8005396 <__ascii_mbtowc+0x6>
 8005394:	a901      	add	r1, sp, #4
 8005396:	b142      	cbz	r2, 80053aa <__ascii_mbtowc+0x1a>
 8005398:	b14b      	cbz	r3, 80053ae <__ascii_mbtowc+0x1e>
 800539a:	7813      	ldrb	r3, [r2, #0]
 800539c:	600b      	str	r3, [r1, #0]
 800539e:	7812      	ldrb	r2, [r2, #0]
 80053a0:	1e10      	subs	r0, r2, #0
 80053a2:	bf18      	it	ne
 80053a4:	2001      	movne	r0, #1
 80053a6:	b002      	add	sp, #8
 80053a8:	4770      	bx	lr
 80053aa:	4610      	mov	r0, r2
 80053ac:	e7fb      	b.n	80053a6 <__ascii_mbtowc+0x16>
 80053ae:	f06f 0001 	mvn.w	r0, #1
 80053b2:	e7f8      	b.n	80053a6 <__ascii_mbtowc+0x16>

080053b4 <__malloc_lock>:
 80053b4:	4801      	ldr	r0, [pc, #4]	; (80053bc <__malloc_lock+0x8>)
 80053b6:	f000 bbeb 	b.w	8005b90 <__retarget_lock_acquire_recursive>
 80053ba:	bf00      	nop
 80053bc:	200002b8 	.word	0x200002b8

080053c0 <__malloc_unlock>:
 80053c0:	4801      	ldr	r0, [pc, #4]	; (80053c8 <__malloc_unlock+0x8>)
 80053c2:	f000 bbe6 	b.w	8005b92 <__retarget_lock_release_recursive>
 80053c6:	bf00      	nop
 80053c8:	200002b8 	.word	0x200002b8

080053cc <__sfputc_r>:
 80053cc:	6893      	ldr	r3, [r2, #8]
 80053ce:	b410      	push	{r4}
 80053d0:	3b01      	subs	r3, #1
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	6093      	str	r3, [r2, #8]
 80053d6:	da07      	bge.n	80053e8 <__sfputc_r+0x1c>
 80053d8:	6994      	ldr	r4, [r2, #24]
 80053da:	42a3      	cmp	r3, r4
 80053dc:	db01      	blt.n	80053e2 <__sfputc_r+0x16>
 80053de:	290a      	cmp	r1, #10
 80053e0:	d102      	bne.n	80053e8 <__sfputc_r+0x1c>
 80053e2:	bc10      	pop	{r4}
 80053e4:	f000 b94a 	b.w	800567c <__swbuf_r>
 80053e8:	6813      	ldr	r3, [r2, #0]
 80053ea:	1c58      	adds	r0, r3, #1
 80053ec:	6010      	str	r0, [r2, #0]
 80053ee:	7019      	strb	r1, [r3, #0]
 80053f0:	4608      	mov	r0, r1
 80053f2:	bc10      	pop	{r4}
 80053f4:	4770      	bx	lr

080053f6 <__sfputs_r>:
 80053f6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80053f8:	4606      	mov	r6, r0
 80053fa:	460f      	mov	r7, r1
 80053fc:	4614      	mov	r4, r2
 80053fe:	18d5      	adds	r5, r2, r3
 8005400:	42ac      	cmp	r4, r5
 8005402:	d101      	bne.n	8005408 <__sfputs_r+0x12>
 8005404:	2000      	movs	r0, #0
 8005406:	e007      	b.n	8005418 <__sfputs_r+0x22>
 8005408:	463a      	mov	r2, r7
 800540a:	4630      	mov	r0, r6
 800540c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005410:	f7ff ffdc 	bl	80053cc <__sfputc_r>
 8005414:	1c43      	adds	r3, r0, #1
 8005416:	d1f3      	bne.n	8005400 <__sfputs_r+0xa>
 8005418:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800541c <_vfiprintf_r>:
 800541c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005420:	460d      	mov	r5, r1
 8005422:	4614      	mov	r4, r2
 8005424:	4698      	mov	r8, r3
 8005426:	4606      	mov	r6, r0
 8005428:	b09d      	sub	sp, #116	; 0x74
 800542a:	b118      	cbz	r0, 8005434 <_vfiprintf_r+0x18>
 800542c:	6983      	ldr	r3, [r0, #24]
 800542e:	b90b      	cbnz	r3, 8005434 <_vfiprintf_r+0x18>
 8005430:	f000 fb10 	bl	8005a54 <__sinit>
 8005434:	4b89      	ldr	r3, [pc, #548]	; (800565c <_vfiprintf_r+0x240>)
 8005436:	429d      	cmp	r5, r3
 8005438:	d11b      	bne.n	8005472 <_vfiprintf_r+0x56>
 800543a:	6875      	ldr	r5, [r6, #4]
 800543c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800543e:	07d9      	lsls	r1, r3, #31
 8005440:	d405      	bmi.n	800544e <_vfiprintf_r+0x32>
 8005442:	89ab      	ldrh	r3, [r5, #12]
 8005444:	059a      	lsls	r2, r3, #22
 8005446:	d402      	bmi.n	800544e <_vfiprintf_r+0x32>
 8005448:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800544a:	f000 fba1 	bl	8005b90 <__retarget_lock_acquire_recursive>
 800544e:	89ab      	ldrh	r3, [r5, #12]
 8005450:	071b      	lsls	r3, r3, #28
 8005452:	d501      	bpl.n	8005458 <_vfiprintf_r+0x3c>
 8005454:	692b      	ldr	r3, [r5, #16]
 8005456:	b9eb      	cbnz	r3, 8005494 <_vfiprintf_r+0x78>
 8005458:	4629      	mov	r1, r5
 800545a:	4630      	mov	r0, r6
 800545c:	f000 f96e 	bl	800573c <__swsetup_r>
 8005460:	b1c0      	cbz	r0, 8005494 <_vfiprintf_r+0x78>
 8005462:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005464:	07dc      	lsls	r4, r3, #31
 8005466:	d50e      	bpl.n	8005486 <_vfiprintf_r+0x6a>
 8005468:	f04f 30ff 	mov.w	r0, #4294967295
 800546c:	b01d      	add	sp, #116	; 0x74
 800546e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005472:	4b7b      	ldr	r3, [pc, #492]	; (8005660 <_vfiprintf_r+0x244>)
 8005474:	429d      	cmp	r5, r3
 8005476:	d101      	bne.n	800547c <_vfiprintf_r+0x60>
 8005478:	68b5      	ldr	r5, [r6, #8]
 800547a:	e7df      	b.n	800543c <_vfiprintf_r+0x20>
 800547c:	4b79      	ldr	r3, [pc, #484]	; (8005664 <_vfiprintf_r+0x248>)
 800547e:	429d      	cmp	r5, r3
 8005480:	bf08      	it	eq
 8005482:	68f5      	ldreq	r5, [r6, #12]
 8005484:	e7da      	b.n	800543c <_vfiprintf_r+0x20>
 8005486:	89ab      	ldrh	r3, [r5, #12]
 8005488:	0598      	lsls	r0, r3, #22
 800548a:	d4ed      	bmi.n	8005468 <_vfiprintf_r+0x4c>
 800548c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800548e:	f000 fb80 	bl	8005b92 <__retarget_lock_release_recursive>
 8005492:	e7e9      	b.n	8005468 <_vfiprintf_r+0x4c>
 8005494:	2300      	movs	r3, #0
 8005496:	9309      	str	r3, [sp, #36]	; 0x24
 8005498:	2320      	movs	r3, #32
 800549a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800549e:	2330      	movs	r3, #48	; 0x30
 80054a0:	f04f 0901 	mov.w	r9, #1
 80054a4:	f8cd 800c 	str.w	r8, [sp, #12]
 80054a8:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8005668 <_vfiprintf_r+0x24c>
 80054ac:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80054b0:	4623      	mov	r3, r4
 80054b2:	469a      	mov	sl, r3
 80054b4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80054b8:	b10a      	cbz	r2, 80054be <_vfiprintf_r+0xa2>
 80054ba:	2a25      	cmp	r2, #37	; 0x25
 80054bc:	d1f9      	bne.n	80054b2 <_vfiprintf_r+0x96>
 80054be:	ebba 0b04 	subs.w	fp, sl, r4
 80054c2:	d00b      	beq.n	80054dc <_vfiprintf_r+0xc0>
 80054c4:	465b      	mov	r3, fp
 80054c6:	4622      	mov	r2, r4
 80054c8:	4629      	mov	r1, r5
 80054ca:	4630      	mov	r0, r6
 80054cc:	f7ff ff93 	bl	80053f6 <__sfputs_r>
 80054d0:	3001      	adds	r0, #1
 80054d2:	f000 80aa 	beq.w	800562a <_vfiprintf_r+0x20e>
 80054d6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80054d8:	445a      	add	r2, fp
 80054da:	9209      	str	r2, [sp, #36]	; 0x24
 80054dc:	f89a 3000 	ldrb.w	r3, [sl]
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	f000 80a2 	beq.w	800562a <_vfiprintf_r+0x20e>
 80054e6:	2300      	movs	r3, #0
 80054e8:	f04f 32ff 	mov.w	r2, #4294967295
 80054ec:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80054f0:	f10a 0a01 	add.w	sl, sl, #1
 80054f4:	9304      	str	r3, [sp, #16]
 80054f6:	9307      	str	r3, [sp, #28]
 80054f8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80054fc:	931a      	str	r3, [sp, #104]	; 0x68
 80054fe:	4654      	mov	r4, sl
 8005500:	2205      	movs	r2, #5
 8005502:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005506:	4858      	ldr	r0, [pc, #352]	; (8005668 <_vfiprintf_r+0x24c>)
 8005508:	f7ff fa74 	bl	80049f4 <memchr>
 800550c:	9a04      	ldr	r2, [sp, #16]
 800550e:	b9d8      	cbnz	r0, 8005548 <_vfiprintf_r+0x12c>
 8005510:	06d1      	lsls	r1, r2, #27
 8005512:	bf44      	itt	mi
 8005514:	2320      	movmi	r3, #32
 8005516:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800551a:	0713      	lsls	r3, r2, #28
 800551c:	bf44      	itt	mi
 800551e:	232b      	movmi	r3, #43	; 0x2b
 8005520:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005524:	f89a 3000 	ldrb.w	r3, [sl]
 8005528:	2b2a      	cmp	r3, #42	; 0x2a
 800552a:	d015      	beq.n	8005558 <_vfiprintf_r+0x13c>
 800552c:	4654      	mov	r4, sl
 800552e:	2000      	movs	r0, #0
 8005530:	f04f 0c0a 	mov.w	ip, #10
 8005534:	9a07      	ldr	r2, [sp, #28]
 8005536:	4621      	mov	r1, r4
 8005538:	f811 3b01 	ldrb.w	r3, [r1], #1
 800553c:	3b30      	subs	r3, #48	; 0x30
 800553e:	2b09      	cmp	r3, #9
 8005540:	d94e      	bls.n	80055e0 <_vfiprintf_r+0x1c4>
 8005542:	b1b0      	cbz	r0, 8005572 <_vfiprintf_r+0x156>
 8005544:	9207      	str	r2, [sp, #28]
 8005546:	e014      	b.n	8005572 <_vfiprintf_r+0x156>
 8005548:	eba0 0308 	sub.w	r3, r0, r8
 800554c:	fa09 f303 	lsl.w	r3, r9, r3
 8005550:	4313      	orrs	r3, r2
 8005552:	46a2      	mov	sl, r4
 8005554:	9304      	str	r3, [sp, #16]
 8005556:	e7d2      	b.n	80054fe <_vfiprintf_r+0xe2>
 8005558:	9b03      	ldr	r3, [sp, #12]
 800555a:	1d19      	adds	r1, r3, #4
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	9103      	str	r1, [sp, #12]
 8005560:	2b00      	cmp	r3, #0
 8005562:	bfbb      	ittet	lt
 8005564:	425b      	neglt	r3, r3
 8005566:	f042 0202 	orrlt.w	r2, r2, #2
 800556a:	9307      	strge	r3, [sp, #28]
 800556c:	9307      	strlt	r3, [sp, #28]
 800556e:	bfb8      	it	lt
 8005570:	9204      	strlt	r2, [sp, #16]
 8005572:	7823      	ldrb	r3, [r4, #0]
 8005574:	2b2e      	cmp	r3, #46	; 0x2e
 8005576:	d10c      	bne.n	8005592 <_vfiprintf_r+0x176>
 8005578:	7863      	ldrb	r3, [r4, #1]
 800557a:	2b2a      	cmp	r3, #42	; 0x2a
 800557c:	d135      	bne.n	80055ea <_vfiprintf_r+0x1ce>
 800557e:	9b03      	ldr	r3, [sp, #12]
 8005580:	3402      	adds	r4, #2
 8005582:	1d1a      	adds	r2, r3, #4
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	9203      	str	r2, [sp, #12]
 8005588:	2b00      	cmp	r3, #0
 800558a:	bfb8      	it	lt
 800558c:	f04f 33ff 	movlt.w	r3, #4294967295
 8005590:	9305      	str	r3, [sp, #20]
 8005592:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 800566c <_vfiprintf_r+0x250>
 8005596:	2203      	movs	r2, #3
 8005598:	4650      	mov	r0, sl
 800559a:	7821      	ldrb	r1, [r4, #0]
 800559c:	f7ff fa2a 	bl	80049f4 <memchr>
 80055a0:	b140      	cbz	r0, 80055b4 <_vfiprintf_r+0x198>
 80055a2:	2340      	movs	r3, #64	; 0x40
 80055a4:	eba0 000a 	sub.w	r0, r0, sl
 80055a8:	fa03 f000 	lsl.w	r0, r3, r0
 80055ac:	9b04      	ldr	r3, [sp, #16]
 80055ae:	3401      	adds	r4, #1
 80055b0:	4303      	orrs	r3, r0
 80055b2:	9304      	str	r3, [sp, #16]
 80055b4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80055b8:	2206      	movs	r2, #6
 80055ba:	482d      	ldr	r0, [pc, #180]	; (8005670 <_vfiprintf_r+0x254>)
 80055bc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80055c0:	f7ff fa18 	bl	80049f4 <memchr>
 80055c4:	2800      	cmp	r0, #0
 80055c6:	d03f      	beq.n	8005648 <_vfiprintf_r+0x22c>
 80055c8:	4b2a      	ldr	r3, [pc, #168]	; (8005674 <_vfiprintf_r+0x258>)
 80055ca:	bb1b      	cbnz	r3, 8005614 <_vfiprintf_r+0x1f8>
 80055cc:	9b03      	ldr	r3, [sp, #12]
 80055ce:	3307      	adds	r3, #7
 80055d0:	f023 0307 	bic.w	r3, r3, #7
 80055d4:	3308      	adds	r3, #8
 80055d6:	9303      	str	r3, [sp, #12]
 80055d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80055da:	443b      	add	r3, r7
 80055dc:	9309      	str	r3, [sp, #36]	; 0x24
 80055de:	e767      	b.n	80054b0 <_vfiprintf_r+0x94>
 80055e0:	460c      	mov	r4, r1
 80055e2:	2001      	movs	r0, #1
 80055e4:	fb0c 3202 	mla	r2, ip, r2, r3
 80055e8:	e7a5      	b.n	8005536 <_vfiprintf_r+0x11a>
 80055ea:	2300      	movs	r3, #0
 80055ec:	f04f 0c0a 	mov.w	ip, #10
 80055f0:	4619      	mov	r1, r3
 80055f2:	3401      	adds	r4, #1
 80055f4:	9305      	str	r3, [sp, #20]
 80055f6:	4620      	mov	r0, r4
 80055f8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80055fc:	3a30      	subs	r2, #48	; 0x30
 80055fe:	2a09      	cmp	r2, #9
 8005600:	d903      	bls.n	800560a <_vfiprintf_r+0x1ee>
 8005602:	2b00      	cmp	r3, #0
 8005604:	d0c5      	beq.n	8005592 <_vfiprintf_r+0x176>
 8005606:	9105      	str	r1, [sp, #20]
 8005608:	e7c3      	b.n	8005592 <_vfiprintf_r+0x176>
 800560a:	4604      	mov	r4, r0
 800560c:	2301      	movs	r3, #1
 800560e:	fb0c 2101 	mla	r1, ip, r1, r2
 8005612:	e7f0      	b.n	80055f6 <_vfiprintf_r+0x1da>
 8005614:	ab03      	add	r3, sp, #12
 8005616:	9300      	str	r3, [sp, #0]
 8005618:	462a      	mov	r2, r5
 800561a:	4630      	mov	r0, r6
 800561c:	4b16      	ldr	r3, [pc, #88]	; (8005678 <_vfiprintf_r+0x25c>)
 800561e:	a904      	add	r1, sp, #16
 8005620:	f7fd ff9e 	bl	8003560 <_printf_float>
 8005624:	4607      	mov	r7, r0
 8005626:	1c78      	adds	r0, r7, #1
 8005628:	d1d6      	bne.n	80055d8 <_vfiprintf_r+0x1bc>
 800562a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800562c:	07d9      	lsls	r1, r3, #31
 800562e:	d405      	bmi.n	800563c <_vfiprintf_r+0x220>
 8005630:	89ab      	ldrh	r3, [r5, #12]
 8005632:	059a      	lsls	r2, r3, #22
 8005634:	d402      	bmi.n	800563c <_vfiprintf_r+0x220>
 8005636:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005638:	f000 faab 	bl	8005b92 <__retarget_lock_release_recursive>
 800563c:	89ab      	ldrh	r3, [r5, #12]
 800563e:	065b      	lsls	r3, r3, #25
 8005640:	f53f af12 	bmi.w	8005468 <_vfiprintf_r+0x4c>
 8005644:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005646:	e711      	b.n	800546c <_vfiprintf_r+0x50>
 8005648:	ab03      	add	r3, sp, #12
 800564a:	9300      	str	r3, [sp, #0]
 800564c:	462a      	mov	r2, r5
 800564e:	4630      	mov	r0, r6
 8005650:	4b09      	ldr	r3, [pc, #36]	; (8005678 <_vfiprintf_r+0x25c>)
 8005652:	a904      	add	r1, sp, #16
 8005654:	f7fe fa20 	bl	8003a98 <_printf_i>
 8005658:	e7e4      	b.n	8005624 <_vfiprintf_r+0x208>
 800565a:	bf00      	nop
 800565c:	08006214 	.word	0x08006214
 8005660:	08006234 	.word	0x08006234
 8005664:	080061f4 	.word	0x080061f4
 8005668:	080060e2 	.word	0x080060e2
 800566c:	080060e8 	.word	0x080060e8
 8005670:	080060ec 	.word	0x080060ec
 8005674:	08003561 	.word	0x08003561
 8005678:	080053f7 	.word	0x080053f7

0800567c <__swbuf_r>:
 800567c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800567e:	460e      	mov	r6, r1
 8005680:	4614      	mov	r4, r2
 8005682:	4605      	mov	r5, r0
 8005684:	b118      	cbz	r0, 800568e <__swbuf_r+0x12>
 8005686:	6983      	ldr	r3, [r0, #24]
 8005688:	b90b      	cbnz	r3, 800568e <__swbuf_r+0x12>
 800568a:	f000 f9e3 	bl	8005a54 <__sinit>
 800568e:	4b21      	ldr	r3, [pc, #132]	; (8005714 <__swbuf_r+0x98>)
 8005690:	429c      	cmp	r4, r3
 8005692:	d12b      	bne.n	80056ec <__swbuf_r+0x70>
 8005694:	686c      	ldr	r4, [r5, #4]
 8005696:	69a3      	ldr	r3, [r4, #24]
 8005698:	60a3      	str	r3, [r4, #8]
 800569a:	89a3      	ldrh	r3, [r4, #12]
 800569c:	071a      	lsls	r2, r3, #28
 800569e:	d52f      	bpl.n	8005700 <__swbuf_r+0x84>
 80056a0:	6923      	ldr	r3, [r4, #16]
 80056a2:	b36b      	cbz	r3, 8005700 <__swbuf_r+0x84>
 80056a4:	6923      	ldr	r3, [r4, #16]
 80056a6:	6820      	ldr	r0, [r4, #0]
 80056a8:	b2f6      	uxtb	r6, r6
 80056aa:	1ac0      	subs	r0, r0, r3
 80056ac:	6963      	ldr	r3, [r4, #20]
 80056ae:	4637      	mov	r7, r6
 80056b0:	4283      	cmp	r3, r0
 80056b2:	dc04      	bgt.n	80056be <__swbuf_r+0x42>
 80056b4:	4621      	mov	r1, r4
 80056b6:	4628      	mov	r0, r5
 80056b8:	f000 f938 	bl	800592c <_fflush_r>
 80056bc:	bb30      	cbnz	r0, 800570c <__swbuf_r+0x90>
 80056be:	68a3      	ldr	r3, [r4, #8]
 80056c0:	3001      	adds	r0, #1
 80056c2:	3b01      	subs	r3, #1
 80056c4:	60a3      	str	r3, [r4, #8]
 80056c6:	6823      	ldr	r3, [r4, #0]
 80056c8:	1c5a      	adds	r2, r3, #1
 80056ca:	6022      	str	r2, [r4, #0]
 80056cc:	701e      	strb	r6, [r3, #0]
 80056ce:	6963      	ldr	r3, [r4, #20]
 80056d0:	4283      	cmp	r3, r0
 80056d2:	d004      	beq.n	80056de <__swbuf_r+0x62>
 80056d4:	89a3      	ldrh	r3, [r4, #12]
 80056d6:	07db      	lsls	r3, r3, #31
 80056d8:	d506      	bpl.n	80056e8 <__swbuf_r+0x6c>
 80056da:	2e0a      	cmp	r6, #10
 80056dc:	d104      	bne.n	80056e8 <__swbuf_r+0x6c>
 80056de:	4621      	mov	r1, r4
 80056e0:	4628      	mov	r0, r5
 80056e2:	f000 f923 	bl	800592c <_fflush_r>
 80056e6:	b988      	cbnz	r0, 800570c <__swbuf_r+0x90>
 80056e8:	4638      	mov	r0, r7
 80056ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80056ec:	4b0a      	ldr	r3, [pc, #40]	; (8005718 <__swbuf_r+0x9c>)
 80056ee:	429c      	cmp	r4, r3
 80056f0:	d101      	bne.n	80056f6 <__swbuf_r+0x7a>
 80056f2:	68ac      	ldr	r4, [r5, #8]
 80056f4:	e7cf      	b.n	8005696 <__swbuf_r+0x1a>
 80056f6:	4b09      	ldr	r3, [pc, #36]	; (800571c <__swbuf_r+0xa0>)
 80056f8:	429c      	cmp	r4, r3
 80056fa:	bf08      	it	eq
 80056fc:	68ec      	ldreq	r4, [r5, #12]
 80056fe:	e7ca      	b.n	8005696 <__swbuf_r+0x1a>
 8005700:	4621      	mov	r1, r4
 8005702:	4628      	mov	r0, r5
 8005704:	f000 f81a 	bl	800573c <__swsetup_r>
 8005708:	2800      	cmp	r0, #0
 800570a:	d0cb      	beq.n	80056a4 <__swbuf_r+0x28>
 800570c:	f04f 37ff 	mov.w	r7, #4294967295
 8005710:	e7ea      	b.n	80056e8 <__swbuf_r+0x6c>
 8005712:	bf00      	nop
 8005714:	08006214 	.word	0x08006214
 8005718:	08006234 	.word	0x08006234
 800571c:	080061f4 	.word	0x080061f4

08005720 <__ascii_wctomb>:
 8005720:	4603      	mov	r3, r0
 8005722:	4608      	mov	r0, r1
 8005724:	b141      	cbz	r1, 8005738 <__ascii_wctomb+0x18>
 8005726:	2aff      	cmp	r2, #255	; 0xff
 8005728:	d904      	bls.n	8005734 <__ascii_wctomb+0x14>
 800572a:	228a      	movs	r2, #138	; 0x8a
 800572c:	f04f 30ff 	mov.w	r0, #4294967295
 8005730:	601a      	str	r2, [r3, #0]
 8005732:	4770      	bx	lr
 8005734:	2001      	movs	r0, #1
 8005736:	700a      	strb	r2, [r1, #0]
 8005738:	4770      	bx	lr
	...

0800573c <__swsetup_r>:
 800573c:	4b32      	ldr	r3, [pc, #200]	; (8005808 <__swsetup_r+0xcc>)
 800573e:	b570      	push	{r4, r5, r6, lr}
 8005740:	681d      	ldr	r5, [r3, #0]
 8005742:	4606      	mov	r6, r0
 8005744:	460c      	mov	r4, r1
 8005746:	b125      	cbz	r5, 8005752 <__swsetup_r+0x16>
 8005748:	69ab      	ldr	r3, [r5, #24]
 800574a:	b913      	cbnz	r3, 8005752 <__swsetup_r+0x16>
 800574c:	4628      	mov	r0, r5
 800574e:	f000 f981 	bl	8005a54 <__sinit>
 8005752:	4b2e      	ldr	r3, [pc, #184]	; (800580c <__swsetup_r+0xd0>)
 8005754:	429c      	cmp	r4, r3
 8005756:	d10f      	bne.n	8005778 <__swsetup_r+0x3c>
 8005758:	686c      	ldr	r4, [r5, #4]
 800575a:	89a3      	ldrh	r3, [r4, #12]
 800575c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005760:	0719      	lsls	r1, r3, #28
 8005762:	d42c      	bmi.n	80057be <__swsetup_r+0x82>
 8005764:	06dd      	lsls	r5, r3, #27
 8005766:	d411      	bmi.n	800578c <__swsetup_r+0x50>
 8005768:	2309      	movs	r3, #9
 800576a:	6033      	str	r3, [r6, #0]
 800576c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8005770:	f04f 30ff 	mov.w	r0, #4294967295
 8005774:	81a3      	strh	r3, [r4, #12]
 8005776:	e03e      	b.n	80057f6 <__swsetup_r+0xba>
 8005778:	4b25      	ldr	r3, [pc, #148]	; (8005810 <__swsetup_r+0xd4>)
 800577a:	429c      	cmp	r4, r3
 800577c:	d101      	bne.n	8005782 <__swsetup_r+0x46>
 800577e:	68ac      	ldr	r4, [r5, #8]
 8005780:	e7eb      	b.n	800575a <__swsetup_r+0x1e>
 8005782:	4b24      	ldr	r3, [pc, #144]	; (8005814 <__swsetup_r+0xd8>)
 8005784:	429c      	cmp	r4, r3
 8005786:	bf08      	it	eq
 8005788:	68ec      	ldreq	r4, [r5, #12]
 800578a:	e7e6      	b.n	800575a <__swsetup_r+0x1e>
 800578c:	0758      	lsls	r0, r3, #29
 800578e:	d512      	bpl.n	80057b6 <__swsetup_r+0x7a>
 8005790:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005792:	b141      	cbz	r1, 80057a6 <__swsetup_r+0x6a>
 8005794:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005798:	4299      	cmp	r1, r3
 800579a:	d002      	beq.n	80057a2 <__swsetup_r+0x66>
 800579c:	4630      	mov	r0, r6
 800579e:	f7ff fcdb 	bl	8005158 <_free_r>
 80057a2:	2300      	movs	r3, #0
 80057a4:	6363      	str	r3, [r4, #52]	; 0x34
 80057a6:	89a3      	ldrh	r3, [r4, #12]
 80057a8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80057ac:	81a3      	strh	r3, [r4, #12]
 80057ae:	2300      	movs	r3, #0
 80057b0:	6063      	str	r3, [r4, #4]
 80057b2:	6923      	ldr	r3, [r4, #16]
 80057b4:	6023      	str	r3, [r4, #0]
 80057b6:	89a3      	ldrh	r3, [r4, #12]
 80057b8:	f043 0308 	orr.w	r3, r3, #8
 80057bc:	81a3      	strh	r3, [r4, #12]
 80057be:	6923      	ldr	r3, [r4, #16]
 80057c0:	b94b      	cbnz	r3, 80057d6 <__swsetup_r+0x9a>
 80057c2:	89a3      	ldrh	r3, [r4, #12]
 80057c4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80057c8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80057cc:	d003      	beq.n	80057d6 <__swsetup_r+0x9a>
 80057ce:	4621      	mov	r1, r4
 80057d0:	4630      	mov	r0, r6
 80057d2:	f000 fa05 	bl	8005be0 <__smakebuf_r>
 80057d6:	89a0      	ldrh	r0, [r4, #12]
 80057d8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80057dc:	f010 0301 	ands.w	r3, r0, #1
 80057e0:	d00a      	beq.n	80057f8 <__swsetup_r+0xbc>
 80057e2:	2300      	movs	r3, #0
 80057e4:	60a3      	str	r3, [r4, #8]
 80057e6:	6963      	ldr	r3, [r4, #20]
 80057e8:	425b      	negs	r3, r3
 80057ea:	61a3      	str	r3, [r4, #24]
 80057ec:	6923      	ldr	r3, [r4, #16]
 80057ee:	b943      	cbnz	r3, 8005802 <__swsetup_r+0xc6>
 80057f0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80057f4:	d1ba      	bne.n	800576c <__swsetup_r+0x30>
 80057f6:	bd70      	pop	{r4, r5, r6, pc}
 80057f8:	0781      	lsls	r1, r0, #30
 80057fa:	bf58      	it	pl
 80057fc:	6963      	ldrpl	r3, [r4, #20]
 80057fe:	60a3      	str	r3, [r4, #8]
 8005800:	e7f4      	b.n	80057ec <__swsetup_r+0xb0>
 8005802:	2000      	movs	r0, #0
 8005804:	e7f7      	b.n	80057f6 <__swsetup_r+0xba>
 8005806:	bf00      	nop
 8005808:	2000000c 	.word	0x2000000c
 800580c:	08006214 	.word	0x08006214
 8005810:	08006234 	.word	0x08006234
 8005814:	080061f4 	.word	0x080061f4

08005818 <abort>:
 8005818:	2006      	movs	r0, #6
 800581a:	b508      	push	{r3, lr}
 800581c:	f000 fa48 	bl	8005cb0 <raise>
 8005820:	2001      	movs	r0, #1
 8005822:	f7fb fe68 	bl	80014f6 <_exit>
	...

08005828 <__sflush_r>:
 8005828:	898a      	ldrh	r2, [r1, #12]
 800582a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800582c:	4605      	mov	r5, r0
 800582e:	0710      	lsls	r0, r2, #28
 8005830:	460c      	mov	r4, r1
 8005832:	d457      	bmi.n	80058e4 <__sflush_r+0xbc>
 8005834:	684b      	ldr	r3, [r1, #4]
 8005836:	2b00      	cmp	r3, #0
 8005838:	dc04      	bgt.n	8005844 <__sflush_r+0x1c>
 800583a:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800583c:	2b00      	cmp	r3, #0
 800583e:	dc01      	bgt.n	8005844 <__sflush_r+0x1c>
 8005840:	2000      	movs	r0, #0
 8005842:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005844:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005846:	2e00      	cmp	r6, #0
 8005848:	d0fa      	beq.n	8005840 <__sflush_r+0x18>
 800584a:	2300      	movs	r3, #0
 800584c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005850:	682f      	ldr	r7, [r5, #0]
 8005852:	602b      	str	r3, [r5, #0]
 8005854:	d032      	beq.n	80058bc <__sflush_r+0x94>
 8005856:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005858:	89a3      	ldrh	r3, [r4, #12]
 800585a:	075a      	lsls	r2, r3, #29
 800585c:	d505      	bpl.n	800586a <__sflush_r+0x42>
 800585e:	6863      	ldr	r3, [r4, #4]
 8005860:	1ac0      	subs	r0, r0, r3
 8005862:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005864:	b10b      	cbz	r3, 800586a <__sflush_r+0x42>
 8005866:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005868:	1ac0      	subs	r0, r0, r3
 800586a:	2300      	movs	r3, #0
 800586c:	4602      	mov	r2, r0
 800586e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005870:	4628      	mov	r0, r5
 8005872:	6a21      	ldr	r1, [r4, #32]
 8005874:	47b0      	blx	r6
 8005876:	1c43      	adds	r3, r0, #1
 8005878:	89a3      	ldrh	r3, [r4, #12]
 800587a:	d106      	bne.n	800588a <__sflush_r+0x62>
 800587c:	6829      	ldr	r1, [r5, #0]
 800587e:	291d      	cmp	r1, #29
 8005880:	d82c      	bhi.n	80058dc <__sflush_r+0xb4>
 8005882:	4a29      	ldr	r2, [pc, #164]	; (8005928 <__sflush_r+0x100>)
 8005884:	40ca      	lsrs	r2, r1
 8005886:	07d6      	lsls	r6, r2, #31
 8005888:	d528      	bpl.n	80058dc <__sflush_r+0xb4>
 800588a:	2200      	movs	r2, #0
 800588c:	6062      	str	r2, [r4, #4]
 800588e:	6922      	ldr	r2, [r4, #16]
 8005890:	04d9      	lsls	r1, r3, #19
 8005892:	6022      	str	r2, [r4, #0]
 8005894:	d504      	bpl.n	80058a0 <__sflush_r+0x78>
 8005896:	1c42      	adds	r2, r0, #1
 8005898:	d101      	bne.n	800589e <__sflush_r+0x76>
 800589a:	682b      	ldr	r3, [r5, #0]
 800589c:	b903      	cbnz	r3, 80058a0 <__sflush_r+0x78>
 800589e:	6560      	str	r0, [r4, #84]	; 0x54
 80058a0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80058a2:	602f      	str	r7, [r5, #0]
 80058a4:	2900      	cmp	r1, #0
 80058a6:	d0cb      	beq.n	8005840 <__sflush_r+0x18>
 80058a8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80058ac:	4299      	cmp	r1, r3
 80058ae:	d002      	beq.n	80058b6 <__sflush_r+0x8e>
 80058b0:	4628      	mov	r0, r5
 80058b2:	f7ff fc51 	bl	8005158 <_free_r>
 80058b6:	2000      	movs	r0, #0
 80058b8:	6360      	str	r0, [r4, #52]	; 0x34
 80058ba:	e7c2      	b.n	8005842 <__sflush_r+0x1a>
 80058bc:	6a21      	ldr	r1, [r4, #32]
 80058be:	2301      	movs	r3, #1
 80058c0:	4628      	mov	r0, r5
 80058c2:	47b0      	blx	r6
 80058c4:	1c41      	adds	r1, r0, #1
 80058c6:	d1c7      	bne.n	8005858 <__sflush_r+0x30>
 80058c8:	682b      	ldr	r3, [r5, #0]
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d0c4      	beq.n	8005858 <__sflush_r+0x30>
 80058ce:	2b1d      	cmp	r3, #29
 80058d0:	d001      	beq.n	80058d6 <__sflush_r+0xae>
 80058d2:	2b16      	cmp	r3, #22
 80058d4:	d101      	bne.n	80058da <__sflush_r+0xb2>
 80058d6:	602f      	str	r7, [r5, #0]
 80058d8:	e7b2      	b.n	8005840 <__sflush_r+0x18>
 80058da:	89a3      	ldrh	r3, [r4, #12]
 80058dc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80058e0:	81a3      	strh	r3, [r4, #12]
 80058e2:	e7ae      	b.n	8005842 <__sflush_r+0x1a>
 80058e4:	690f      	ldr	r7, [r1, #16]
 80058e6:	2f00      	cmp	r7, #0
 80058e8:	d0aa      	beq.n	8005840 <__sflush_r+0x18>
 80058ea:	0793      	lsls	r3, r2, #30
 80058ec:	bf18      	it	ne
 80058ee:	2300      	movne	r3, #0
 80058f0:	680e      	ldr	r6, [r1, #0]
 80058f2:	bf08      	it	eq
 80058f4:	694b      	ldreq	r3, [r1, #20]
 80058f6:	1bf6      	subs	r6, r6, r7
 80058f8:	600f      	str	r7, [r1, #0]
 80058fa:	608b      	str	r3, [r1, #8]
 80058fc:	2e00      	cmp	r6, #0
 80058fe:	dd9f      	ble.n	8005840 <__sflush_r+0x18>
 8005900:	4633      	mov	r3, r6
 8005902:	463a      	mov	r2, r7
 8005904:	4628      	mov	r0, r5
 8005906:	6a21      	ldr	r1, [r4, #32]
 8005908:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 800590c:	47e0      	blx	ip
 800590e:	2800      	cmp	r0, #0
 8005910:	dc06      	bgt.n	8005920 <__sflush_r+0xf8>
 8005912:	89a3      	ldrh	r3, [r4, #12]
 8005914:	f04f 30ff 	mov.w	r0, #4294967295
 8005918:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800591c:	81a3      	strh	r3, [r4, #12]
 800591e:	e790      	b.n	8005842 <__sflush_r+0x1a>
 8005920:	4407      	add	r7, r0
 8005922:	1a36      	subs	r6, r6, r0
 8005924:	e7ea      	b.n	80058fc <__sflush_r+0xd4>
 8005926:	bf00      	nop
 8005928:	20400001 	.word	0x20400001

0800592c <_fflush_r>:
 800592c:	b538      	push	{r3, r4, r5, lr}
 800592e:	690b      	ldr	r3, [r1, #16]
 8005930:	4605      	mov	r5, r0
 8005932:	460c      	mov	r4, r1
 8005934:	b913      	cbnz	r3, 800593c <_fflush_r+0x10>
 8005936:	2500      	movs	r5, #0
 8005938:	4628      	mov	r0, r5
 800593a:	bd38      	pop	{r3, r4, r5, pc}
 800593c:	b118      	cbz	r0, 8005946 <_fflush_r+0x1a>
 800593e:	6983      	ldr	r3, [r0, #24]
 8005940:	b90b      	cbnz	r3, 8005946 <_fflush_r+0x1a>
 8005942:	f000 f887 	bl	8005a54 <__sinit>
 8005946:	4b14      	ldr	r3, [pc, #80]	; (8005998 <_fflush_r+0x6c>)
 8005948:	429c      	cmp	r4, r3
 800594a:	d11b      	bne.n	8005984 <_fflush_r+0x58>
 800594c:	686c      	ldr	r4, [r5, #4]
 800594e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005952:	2b00      	cmp	r3, #0
 8005954:	d0ef      	beq.n	8005936 <_fflush_r+0xa>
 8005956:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005958:	07d0      	lsls	r0, r2, #31
 800595a:	d404      	bmi.n	8005966 <_fflush_r+0x3a>
 800595c:	0599      	lsls	r1, r3, #22
 800595e:	d402      	bmi.n	8005966 <_fflush_r+0x3a>
 8005960:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005962:	f000 f915 	bl	8005b90 <__retarget_lock_acquire_recursive>
 8005966:	4628      	mov	r0, r5
 8005968:	4621      	mov	r1, r4
 800596a:	f7ff ff5d 	bl	8005828 <__sflush_r>
 800596e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005970:	4605      	mov	r5, r0
 8005972:	07da      	lsls	r2, r3, #31
 8005974:	d4e0      	bmi.n	8005938 <_fflush_r+0xc>
 8005976:	89a3      	ldrh	r3, [r4, #12]
 8005978:	059b      	lsls	r3, r3, #22
 800597a:	d4dd      	bmi.n	8005938 <_fflush_r+0xc>
 800597c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800597e:	f000 f908 	bl	8005b92 <__retarget_lock_release_recursive>
 8005982:	e7d9      	b.n	8005938 <_fflush_r+0xc>
 8005984:	4b05      	ldr	r3, [pc, #20]	; (800599c <_fflush_r+0x70>)
 8005986:	429c      	cmp	r4, r3
 8005988:	d101      	bne.n	800598e <_fflush_r+0x62>
 800598a:	68ac      	ldr	r4, [r5, #8]
 800598c:	e7df      	b.n	800594e <_fflush_r+0x22>
 800598e:	4b04      	ldr	r3, [pc, #16]	; (80059a0 <_fflush_r+0x74>)
 8005990:	429c      	cmp	r4, r3
 8005992:	bf08      	it	eq
 8005994:	68ec      	ldreq	r4, [r5, #12]
 8005996:	e7da      	b.n	800594e <_fflush_r+0x22>
 8005998:	08006214 	.word	0x08006214
 800599c:	08006234 	.word	0x08006234
 80059a0:	080061f4 	.word	0x080061f4

080059a4 <std>:
 80059a4:	2300      	movs	r3, #0
 80059a6:	b510      	push	{r4, lr}
 80059a8:	4604      	mov	r4, r0
 80059aa:	e9c0 3300 	strd	r3, r3, [r0]
 80059ae:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80059b2:	6083      	str	r3, [r0, #8]
 80059b4:	8181      	strh	r1, [r0, #12]
 80059b6:	6643      	str	r3, [r0, #100]	; 0x64
 80059b8:	81c2      	strh	r2, [r0, #14]
 80059ba:	6183      	str	r3, [r0, #24]
 80059bc:	4619      	mov	r1, r3
 80059be:	2208      	movs	r2, #8
 80059c0:	305c      	adds	r0, #92	; 0x5c
 80059c2:	f7fd fd27 	bl	8003414 <memset>
 80059c6:	4b05      	ldr	r3, [pc, #20]	; (80059dc <std+0x38>)
 80059c8:	6224      	str	r4, [r4, #32]
 80059ca:	6263      	str	r3, [r4, #36]	; 0x24
 80059cc:	4b04      	ldr	r3, [pc, #16]	; (80059e0 <std+0x3c>)
 80059ce:	62a3      	str	r3, [r4, #40]	; 0x28
 80059d0:	4b04      	ldr	r3, [pc, #16]	; (80059e4 <std+0x40>)
 80059d2:	62e3      	str	r3, [r4, #44]	; 0x2c
 80059d4:	4b04      	ldr	r3, [pc, #16]	; (80059e8 <std+0x44>)
 80059d6:	6323      	str	r3, [r4, #48]	; 0x30
 80059d8:	bd10      	pop	{r4, pc}
 80059da:	bf00      	nop
 80059dc:	08005ce9 	.word	0x08005ce9
 80059e0:	08005d0b 	.word	0x08005d0b
 80059e4:	08005d43 	.word	0x08005d43
 80059e8:	08005d67 	.word	0x08005d67

080059ec <_cleanup_r>:
 80059ec:	4901      	ldr	r1, [pc, #4]	; (80059f4 <_cleanup_r+0x8>)
 80059ee:	f000 b8af 	b.w	8005b50 <_fwalk_reent>
 80059f2:	bf00      	nop
 80059f4:	0800592d 	.word	0x0800592d

080059f8 <__sfmoreglue>:
 80059f8:	2268      	movs	r2, #104	; 0x68
 80059fa:	b570      	push	{r4, r5, r6, lr}
 80059fc:	1e4d      	subs	r5, r1, #1
 80059fe:	4355      	muls	r5, r2
 8005a00:	460e      	mov	r6, r1
 8005a02:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8005a06:	f7ff fc0f 	bl	8005228 <_malloc_r>
 8005a0a:	4604      	mov	r4, r0
 8005a0c:	b140      	cbz	r0, 8005a20 <__sfmoreglue+0x28>
 8005a0e:	2100      	movs	r1, #0
 8005a10:	e9c0 1600 	strd	r1, r6, [r0]
 8005a14:	300c      	adds	r0, #12
 8005a16:	60a0      	str	r0, [r4, #8]
 8005a18:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8005a1c:	f7fd fcfa 	bl	8003414 <memset>
 8005a20:	4620      	mov	r0, r4
 8005a22:	bd70      	pop	{r4, r5, r6, pc}

08005a24 <__sfp_lock_acquire>:
 8005a24:	4801      	ldr	r0, [pc, #4]	; (8005a2c <__sfp_lock_acquire+0x8>)
 8005a26:	f000 b8b3 	b.w	8005b90 <__retarget_lock_acquire_recursive>
 8005a2a:	bf00      	nop
 8005a2c:	200002b9 	.word	0x200002b9

08005a30 <__sfp_lock_release>:
 8005a30:	4801      	ldr	r0, [pc, #4]	; (8005a38 <__sfp_lock_release+0x8>)
 8005a32:	f000 b8ae 	b.w	8005b92 <__retarget_lock_release_recursive>
 8005a36:	bf00      	nop
 8005a38:	200002b9 	.word	0x200002b9

08005a3c <__sinit_lock_acquire>:
 8005a3c:	4801      	ldr	r0, [pc, #4]	; (8005a44 <__sinit_lock_acquire+0x8>)
 8005a3e:	f000 b8a7 	b.w	8005b90 <__retarget_lock_acquire_recursive>
 8005a42:	bf00      	nop
 8005a44:	200002ba 	.word	0x200002ba

08005a48 <__sinit_lock_release>:
 8005a48:	4801      	ldr	r0, [pc, #4]	; (8005a50 <__sinit_lock_release+0x8>)
 8005a4a:	f000 b8a2 	b.w	8005b92 <__retarget_lock_release_recursive>
 8005a4e:	bf00      	nop
 8005a50:	200002ba 	.word	0x200002ba

08005a54 <__sinit>:
 8005a54:	b510      	push	{r4, lr}
 8005a56:	4604      	mov	r4, r0
 8005a58:	f7ff fff0 	bl	8005a3c <__sinit_lock_acquire>
 8005a5c:	69a3      	ldr	r3, [r4, #24]
 8005a5e:	b11b      	cbz	r3, 8005a68 <__sinit+0x14>
 8005a60:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005a64:	f7ff bff0 	b.w	8005a48 <__sinit_lock_release>
 8005a68:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8005a6c:	6523      	str	r3, [r4, #80]	; 0x50
 8005a6e:	4b13      	ldr	r3, [pc, #76]	; (8005abc <__sinit+0x68>)
 8005a70:	4a13      	ldr	r2, [pc, #76]	; (8005ac0 <__sinit+0x6c>)
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	62a2      	str	r2, [r4, #40]	; 0x28
 8005a76:	42a3      	cmp	r3, r4
 8005a78:	bf08      	it	eq
 8005a7a:	2301      	moveq	r3, #1
 8005a7c:	4620      	mov	r0, r4
 8005a7e:	bf08      	it	eq
 8005a80:	61a3      	streq	r3, [r4, #24]
 8005a82:	f000 f81f 	bl	8005ac4 <__sfp>
 8005a86:	6060      	str	r0, [r4, #4]
 8005a88:	4620      	mov	r0, r4
 8005a8a:	f000 f81b 	bl	8005ac4 <__sfp>
 8005a8e:	60a0      	str	r0, [r4, #8]
 8005a90:	4620      	mov	r0, r4
 8005a92:	f000 f817 	bl	8005ac4 <__sfp>
 8005a96:	2200      	movs	r2, #0
 8005a98:	2104      	movs	r1, #4
 8005a9a:	60e0      	str	r0, [r4, #12]
 8005a9c:	6860      	ldr	r0, [r4, #4]
 8005a9e:	f7ff ff81 	bl	80059a4 <std>
 8005aa2:	2201      	movs	r2, #1
 8005aa4:	2109      	movs	r1, #9
 8005aa6:	68a0      	ldr	r0, [r4, #8]
 8005aa8:	f7ff ff7c 	bl	80059a4 <std>
 8005aac:	2202      	movs	r2, #2
 8005aae:	2112      	movs	r1, #18
 8005ab0:	68e0      	ldr	r0, [r4, #12]
 8005ab2:	f7ff ff77 	bl	80059a4 <std>
 8005ab6:	2301      	movs	r3, #1
 8005ab8:	61a3      	str	r3, [r4, #24]
 8005aba:	e7d1      	b.n	8005a60 <__sinit+0xc>
 8005abc:	08005e7c 	.word	0x08005e7c
 8005ac0:	080059ed 	.word	0x080059ed

08005ac4 <__sfp>:
 8005ac4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005ac6:	4607      	mov	r7, r0
 8005ac8:	f7ff ffac 	bl	8005a24 <__sfp_lock_acquire>
 8005acc:	4b1e      	ldr	r3, [pc, #120]	; (8005b48 <__sfp+0x84>)
 8005ace:	681e      	ldr	r6, [r3, #0]
 8005ad0:	69b3      	ldr	r3, [r6, #24]
 8005ad2:	b913      	cbnz	r3, 8005ada <__sfp+0x16>
 8005ad4:	4630      	mov	r0, r6
 8005ad6:	f7ff ffbd 	bl	8005a54 <__sinit>
 8005ada:	3648      	adds	r6, #72	; 0x48
 8005adc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8005ae0:	3b01      	subs	r3, #1
 8005ae2:	d503      	bpl.n	8005aec <__sfp+0x28>
 8005ae4:	6833      	ldr	r3, [r6, #0]
 8005ae6:	b30b      	cbz	r3, 8005b2c <__sfp+0x68>
 8005ae8:	6836      	ldr	r6, [r6, #0]
 8005aea:	e7f7      	b.n	8005adc <__sfp+0x18>
 8005aec:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8005af0:	b9d5      	cbnz	r5, 8005b28 <__sfp+0x64>
 8005af2:	4b16      	ldr	r3, [pc, #88]	; (8005b4c <__sfp+0x88>)
 8005af4:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8005af8:	60e3      	str	r3, [r4, #12]
 8005afa:	6665      	str	r5, [r4, #100]	; 0x64
 8005afc:	f000 f847 	bl	8005b8e <__retarget_lock_init_recursive>
 8005b00:	f7ff ff96 	bl	8005a30 <__sfp_lock_release>
 8005b04:	2208      	movs	r2, #8
 8005b06:	4629      	mov	r1, r5
 8005b08:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8005b0c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8005b10:	6025      	str	r5, [r4, #0]
 8005b12:	61a5      	str	r5, [r4, #24]
 8005b14:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8005b18:	f7fd fc7c 	bl	8003414 <memset>
 8005b1c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8005b20:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8005b24:	4620      	mov	r0, r4
 8005b26:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005b28:	3468      	adds	r4, #104	; 0x68
 8005b2a:	e7d9      	b.n	8005ae0 <__sfp+0x1c>
 8005b2c:	2104      	movs	r1, #4
 8005b2e:	4638      	mov	r0, r7
 8005b30:	f7ff ff62 	bl	80059f8 <__sfmoreglue>
 8005b34:	4604      	mov	r4, r0
 8005b36:	6030      	str	r0, [r6, #0]
 8005b38:	2800      	cmp	r0, #0
 8005b3a:	d1d5      	bne.n	8005ae8 <__sfp+0x24>
 8005b3c:	f7ff ff78 	bl	8005a30 <__sfp_lock_release>
 8005b40:	230c      	movs	r3, #12
 8005b42:	603b      	str	r3, [r7, #0]
 8005b44:	e7ee      	b.n	8005b24 <__sfp+0x60>
 8005b46:	bf00      	nop
 8005b48:	08005e7c 	.word	0x08005e7c
 8005b4c:	ffff0001 	.word	0xffff0001

08005b50 <_fwalk_reent>:
 8005b50:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005b54:	4606      	mov	r6, r0
 8005b56:	4688      	mov	r8, r1
 8005b58:	2700      	movs	r7, #0
 8005b5a:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8005b5e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005b62:	f1b9 0901 	subs.w	r9, r9, #1
 8005b66:	d505      	bpl.n	8005b74 <_fwalk_reent+0x24>
 8005b68:	6824      	ldr	r4, [r4, #0]
 8005b6a:	2c00      	cmp	r4, #0
 8005b6c:	d1f7      	bne.n	8005b5e <_fwalk_reent+0xe>
 8005b6e:	4638      	mov	r0, r7
 8005b70:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005b74:	89ab      	ldrh	r3, [r5, #12]
 8005b76:	2b01      	cmp	r3, #1
 8005b78:	d907      	bls.n	8005b8a <_fwalk_reent+0x3a>
 8005b7a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005b7e:	3301      	adds	r3, #1
 8005b80:	d003      	beq.n	8005b8a <_fwalk_reent+0x3a>
 8005b82:	4629      	mov	r1, r5
 8005b84:	4630      	mov	r0, r6
 8005b86:	47c0      	blx	r8
 8005b88:	4307      	orrs	r7, r0
 8005b8a:	3568      	adds	r5, #104	; 0x68
 8005b8c:	e7e9      	b.n	8005b62 <_fwalk_reent+0x12>

08005b8e <__retarget_lock_init_recursive>:
 8005b8e:	4770      	bx	lr

08005b90 <__retarget_lock_acquire_recursive>:
 8005b90:	4770      	bx	lr

08005b92 <__retarget_lock_release_recursive>:
 8005b92:	4770      	bx	lr

08005b94 <__swhatbuf_r>:
 8005b94:	b570      	push	{r4, r5, r6, lr}
 8005b96:	460e      	mov	r6, r1
 8005b98:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005b9c:	4614      	mov	r4, r2
 8005b9e:	2900      	cmp	r1, #0
 8005ba0:	461d      	mov	r5, r3
 8005ba2:	b096      	sub	sp, #88	; 0x58
 8005ba4:	da08      	bge.n	8005bb8 <__swhatbuf_r+0x24>
 8005ba6:	2200      	movs	r2, #0
 8005ba8:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8005bac:	602a      	str	r2, [r5, #0]
 8005bae:	061a      	lsls	r2, r3, #24
 8005bb0:	d410      	bmi.n	8005bd4 <__swhatbuf_r+0x40>
 8005bb2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005bb6:	e00e      	b.n	8005bd6 <__swhatbuf_r+0x42>
 8005bb8:	466a      	mov	r2, sp
 8005bba:	f000 f8fb 	bl	8005db4 <_fstat_r>
 8005bbe:	2800      	cmp	r0, #0
 8005bc0:	dbf1      	blt.n	8005ba6 <__swhatbuf_r+0x12>
 8005bc2:	9a01      	ldr	r2, [sp, #4]
 8005bc4:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8005bc8:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8005bcc:	425a      	negs	r2, r3
 8005bce:	415a      	adcs	r2, r3
 8005bd0:	602a      	str	r2, [r5, #0]
 8005bd2:	e7ee      	b.n	8005bb2 <__swhatbuf_r+0x1e>
 8005bd4:	2340      	movs	r3, #64	; 0x40
 8005bd6:	2000      	movs	r0, #0
 8005bd8:	6023      	str	r3, [r4, #0]
 8005bda:	b016      	add	sp, #88	; 0x58
 8005bdc:	bd70      	pop	{r4, r5, r6, pc}
	...

08005be0 <__smakebuf_r>:
 8005be0:	898b      	ldrh	r3, [r1, #12]
 8005be2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005be4:	079d      	lsls	r5, r3, #30
 8005be6:	4606      	mov	r6, r0
 8005be8:	460c      	mov	r4, r1
 8005bea:	d507      	bpl.n	8005bfc <__smakebuf_r+0x1c>
 8005bec:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005bf0:	6023      	str	r3, [r4, #0]
 8005bf2:	6123      	str	r3, [r4, #16]
 8005bf4:	2301      	movs	r3, #1
 8005bf6:	6163      	str	r3, [r4, #20]
 8005bf8:	b002      	add	sp, #8
 8005bfa:	bd70      	pop	{r4, r5, r6, pc}
 8005bfc:	466a      	mov	r2, sp
 8005bfe:	ab01      	add	r3, sp, #4
 8005c00:	f7ff ffc8 	bl	8005b94 <__swhatbuf_r>
 8005c04:	9900      	ldr	r1, [sp, #0]
 8005c06:	4605      	mov	r5, r0
 8005c08:	4630      	mov	r0, r6
 8005c0a:	f7ff fb0d 	bl	8005228 <_malloc_r>
 8005c0e:	b948      	cbnz	r0, 8005c24 <__smakebuf_r+0x44>
 8005c10:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005c14:	059a      	lsls	r2, r3, #22
 8005c16:	d4ef      	bmi.n	8005bf8 <__smakebuf_r+0x18>
 8005c18:	f023 0303 	bic.w	r3, r3, #3
 8005c1c:	f043 0302 	orr.w	r3, r3, #2
 8005c20:	81a3      	strh	r3, [r4, #12]
 8005c22:	e7e3      	b.n	8005bec <__smakebuf_r+0xc>
 8005c24:	4b0d      	ldr	r3, [pc, #52]	; (8005c5c <__smakebuf_r+0x7c>)
 8005c26:	62b3      	str	r3, [r6, #40]	; 0x28
 8005c28:	89a3      	ldrh	r3, [r4, #12]
 8005c2a:	6020      	str	r0, [r4, #0]
 8005c2c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005c30:	81a3      	strh	r3, [r4, #12]
 8005c32:	9b00      	ldr	r3, [sp, #0]
 8005c34:	6120      	str	r0, [r4, #16]
 8005c36:	6163      	str	r3, [r4, #20]
 8005c38:	9b01      	ldr	r3, [sp, #4]
 8005c3a:	b15b      	cbz	r3, 8005c54 <__smakebuf_r+0x74>
 8005c3c:	4630      	mov	r0, r6
 8005c3e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005c42:	f000 f8c9 	bl	8005dd8 <_isatty_r>
 8005c46:	b128      	cbz	r0, 8005c54 <__smakebuf_r+0x74>
 8005c48:	89a3      	ldrh	r3, [r4, #12]
 8005c4a:	f023 0303 	bic.w	r3, r3, #3
 8005c4e:	f043 0301 	orr.w	r3, r3, #1
 8005c52:	81a3      	strh	r3, [r4, #12]
 8005c54:	89a0      	ldrh	r0, [r4, #12]
 8005c56:	4305      	orrs	r5, r0
 8005c58:	81a5      	strh	r5, [r4, #12]
 8005c5a:	e7cd      	b.n	8005bf8 <__smakebuf_r+0x18>
 8005c5c:	080059ed 	.word	0x080059ed

08005c60 <_raise_r>:
 8005c60:	291f      	cmp	r1, #31
 8005c62:	b538      	push	{r3, r4, r5, lr}
 8005c64:	4604      	mov	r4, r0
 8005c66:	460d      	mov	r5, r1
 8005c68:	d904      	bls.n	8005c74 <_raise_r+0x14>
 8005c6a:	2316      	movs	r3, #22
 8005c6c:	6003      	str	r3, [r0, #0]
 8005c6e:	f04f 30ff 	mov.w	r0, #4294967295
 8005c72:	bd38      	pop	{r3, r4, r5, pc}
 8005c74:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8005c76:	b112      	cbz	r2, 8005c7e <_raise_r+0x1e>
 8005c78:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8005c7c:	b94b      	cbnz	r3, 8005c92 <_raise_r+0x32>
 8005c7e:	4620      	mov	r0, r4
 8005c80:	f000 f830 	bl	8005ce4 <_getpid_r>
 8005c84:	462a      	mov	r2, r5
 8005c86:	4601      	mov	r1, r0
 8005c88:	4620      	mov	r0, r4
 8005c8a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005c8e:	f000 b817 	b.w	8005cc0 <_kill_r>
 8005c92:	2b01      	cmp	r3, #1
 8005c94:	d00a      	beq.n	8005cac <_raise_r+0x4c>
 8005c96:	1c59      	adds	r1, r3, #1
 8005c98:	d103      	bne.n	8005ca2 <_raise_r+0x42>
 8005c9a:	2316      	movs	r3, #22
 8005c9c:	6003      	str	r3, [r0, #0]
 8005c9e:	2001      	movs	r0, #1
 8005ca0:	e7e7      	b.n	8005c72 <_raise_r+0x12>
 8005ca2:	2400      	movs	r4, #0
 8005ca4:	4628      	mov	r0, r5
 8005ca6:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8005caa:	4798      	blx	r3
 8005cac:	2000      	movs	r0, #0
 8005cae:	e7e0      	b.n	8005c72 <_raise_r+0x12>

08005cb0 <raise>:
 8005cb0:	4b02      	ldr	r3, [pc, #8]	; (8005cbc <raise+0xc>)
 8005cb2:	4601      	mov	r1, r0
 8005cb4:	6818      	ldr	r0, [r3, #0]
 8005cb6:	f7ff bfd3 	b.w	8005c60 <_raise_r>
 8005cba:	bf00      	nop
 8005cbc:	2000000c 	.word	0x2000000c

08005cc0 <_kill_r>:
 8005cc0:	b538      	push	{r3, r4, r5, lr}
 8005cc2:	2300      	movs	r3, #0
 8005cc4:	4d06      	ldr	r5, [pc, #24]	; (8005ce0 <_kill_r+0x20>)
 8005cc6:	4604      	mov	r4, r0
 8005cc8:	4608      	mov	r0, r1
 8005cca:	4611      	mov	r1, r2
 8005ccc:	602b      	str	r3, [r5, #0]
 8005cce:	f7fb fc02 	bl	80014d6 <_kill>
 8005cd2:	1c43      	adds	r3, r0, #1
 8005cd4:	d102      	bne.n	8005cdc <_kill_r+0x1c>
 8005cd6:	682b      	ldr	r3, [r5, #0]
 8005cd8:	b103      	cbz	r3, 8005cdc <_kill_r+0x1c>
 8005cda:	6023      	str	r3, [r4, #0]
 8005cdc:	bd38      	pop	{r3, r4, r5, pc}
 8005cde:	bf00      	nop
 8005ce0:	200002b4 	.word	0x200002b4

08005ce4 <_getpid_r>:
 8005ce4:	f7fb bbf0 	b.w	80014c8 <_getpid>

08005ce8 <__sread>:
 8005ce8:	b510      	push	{r4, lr}
 8005cea:	460c      	mov	r4, r1
 8005cec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005cf0:	f000 f894 	bl	8005e1c <_read_r>
 8005cf4:	2800      	cmp	r0, #0
 8005cf6:	bfab      	itete	ge
 8005cf8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005cfa:	89a3      	ldrhlt	r3, [r4, #12]
 8005cfc:	181b      	addge	r3, r3, r0
 8005cfe:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005d02:	bfac      	ite	ge
 8005d04:	6563      	strge	r3, [r4, #84]	; 0x54
 8005d06:	81a3      	strhlt	r3, [r4, #12]
 8005d08:	bd10      	pop	{r4, pc}

08005d0a <__swrite>:
 8005d0a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005d0e:	461f      	mov	r7, r3
 8005d10:	898b      	ldrh	r3, [r1, #12]
 8005d12:	4605      	mov	r5, r0
 8005d14:	05db      	lsls	r3, r3, #23
 8005d16:	460c      	mov	r4, r1
 8005d18:	4616      	mov	r6, r2
 8005d1a:	d505      	bpl.n	8005d28 <__swrite+0x1e>
 8005d1c:	2302      	movs	r3, #2
 8005d1e:	2200      	movs	r2, #0
 8005d20:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005d24:	f000 f868 	bl	8005df8 <_lseek_r>
 8005d28:	89a3      	ldrh	r3, [r4, #12]
 8005d2a:	4632      	mov	r2, r6
 8005d2c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005d30:	81a3      	strh	r3, [r4, #12]
 8005d32:	4628      	mov	r0, r5
 8005d34:	463b      	mov	r3, r7
 8005d36:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005d3a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005d3e:	f000 b817 	b.w	8005d70 <_write_r>

08005d42 <__sseek>:
 8005d42:	b510      	push	{r4, lr}
 8005d44:	460c      	mov	r4, r1
 8005d46:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005d4a:	f000 f855 	bl	8005df8 <_lseek_r>
 8005d4e:	1c43      	adds	r3, r0, #1
 8005d50:	89a3      	ldrh	r3, [r4, #12]
 8005d52:	bf15      	itete	ne
 8005d54:	6560      	strne	r0, [r4, #84]	; 0x54
 8005d56:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005d5a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005d5e:	81a3      	strheq	r3, [r4, #12]
 8005d60:	bf18      	it	ne
 8005d62:	81a3      	strhne	r3, [r4, #12]
 8005d64:	bd10      	pop	{r4, pc}

08005d66 <__sclose>:
 8005d66:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005d6a:	f000 b813 	b.w	8005d94 <_close_r>
	...

08005d70 <_write_r>:
 8005d70:	b538      	push	{r3, r4, r5, lr}
 8005d72:	4604      	mov	r4, r0
 8005d74:	4608      	mov	r0, r1
 8005d76:	4611      	mov	r1, r2
 8005d78:	2200      	movs	r2, #0
 8005d7a:	4d05      	ldr	r5, [pc, #20]	; (8005d90 <_write_r+0x20>)
 8005d7c:	602a      	str	r2, [r5, #0]
 8005d7e:	461a      	mov	r2, r3
 8005d80:	f7fb fbe0 	bl	8001544 <_write>
 8005d84:	1c43      	adds	r3, r0, #1
 8005d86:	d102      	bne.n	8005d8e <_write_r+0x1e>
 8005d88:	682b      	ldr	r3, [r5, #0]
 8005d8a:	b103      	cbz	r3, 8005d8e <_write_r+0x1e>
 8005d8c:	6023      	str	r3, [r4, #0]
 8005d8e:	bd38      	pop	{r3, r4, r5, pc}
 8005d90:	200002b4 	.word	0x200002b4

08005d94 <_close_r>:
 8005d94:	b538      	push	{r3, r4, r5, lr}
 8005d96:	2300      	movs	r3, #0
 8005d98:	4d05      	ldr	r5, [pc, #20]	; (8005db0 <_close_r+0x1c>)
 8005d9a:	4604      	mov	r4, r0
 8005d9c:	4608      	mov	r0, r1
 8005d9e:	602b      	str	r3, [r5, #0]
 8005da0:	f7fb fbec 	bl	800157c <_close>
 8005da4:	1c43      	adds	r3, r0, #1
 8005da6:	d102      	bne.n	8005dae <_close_r+0x1a>
 8005da8:	682b      	ldr	r3, [r5, #0]
 8005daa:	b103      	cbz	r3, 8005dae <_close_r+0x1a>
 8005dac:	6023      	str	r3, [r4, #0]
 8005dae:	bd38      	pop	{r3, r4, r5, pc}
 8005db0:	200002b4 	.word	0x200002b4

08005db4 <_fstat_r>:
 8005db4:	b538      	push	{r3, r4, r5, lr}
 8005db6:	2300      	movs	r3, #0
 8005db8:	4d06      	ldr	r5, [pc, #24]	; (8005dd4 <_fstat_r+0x20>)
 8005dba:	4604      	mov	r4, r0
 8005dbc:	4608      	mov	r0, r1
 8005dbe:	4611      	mov	r1, r2
 8005dc0:	602b      	str	r3, [r5, #0]
 8005dc2:	f7fb fbe6 	bl	8001592 <_fstat>
 8005dc6:	1c43      	adds	r3, r0, #1
 8005dc8:	d102      	bne.n	8005dd0 <_fstat_r+0x1c>
 8005dca:	682b      	ldr	r3, [r5, #0]
 8005dcc:	b103      	cbz	r3, 8005dd0 <_fstat_r+0x1c>
 8005dce:	6023      	str	r3, [r4, #0]
 8005dd0:	bd38      	pop	{r3, r4, r5, pc}
 8005dd2:	bf00      	nop
 8005dd4:	200002b4 	.word	0x200002b4

08005dd8 <_isatty_r>:
 8005dd8:	b538      	push	{r3, r4, r5, lr}
 8005dda:	2300      	movs	r3, #0
 8005ddc:	4d05      	ldr	r5, [pc, #20]	; (8005df4 <_isatty_r+0x1c>)
 8005dde:	4604      	mov	r4, r0
 8005de0:	4608      	mov	r0, r1
 8005de2:	602b      	str	r3, [r5, #0]
 8005de4:	f7fb fbe4 	bl	80015b0 <_isatty>
 8005de8:	1c43      	adds	r3, r0, #1
 8005dea:	d102      	bne.n	8005df2 <_isatty_r+0x1a>
 8005dec:	682b      	ldr	r3, [r5, #0]
 8005dee:	b103      	cbz	r3, 8005df2 <_isatty_r+0x1a>
 8005df0:	6023      	str	r3, [r4, #0]
 8005df2:	bd38      	pop	{r3, r4, r5, pc}
 8005df4:	200002b4 	.word	0x200002b4

08005df8 <_lseek_r>:
 8005df8:	b538      	push	{r3, r4, r5, lr}
 8005dfa:	4604      	mov	r4, r0
 8005dfc:	4608      	mov	r0, r1
 8005dfe:	4611      	mov	r1, r2
 8005e00:	2200      	movs	r2, #0
 8005e02:	4d05      	ldr	r5, [pc, #20]	; (8005e18 <_lseek_r+0x20>)
 8005e04:	602a      	str	r2, [r5, #0]
 8005e06:	461a      	mov	r2, r3
 8005e08:	f7fb fbdc 	bl	80015c4 <_lseek>
 8005e0c:	1c43      	adds	r3, r0, #1
 8005e0e:	d102      	bne.n	8005e16 <_lseek_r+0x1e>
 8005e10:	682b      	ldr	r3, [r5, #0]
 8005e12:	b103      	cbz	r3, 8005e16 <_lseek_r+0x1e>
 8005e14:	6023      	str	r3, [r4, #0]
 8005e16:	bd38      	pop	{r3, r4, r5, pc}
 8005e18:	200002b4 	.word	0x200002b4

08005e1c <_read_r>:
 8005e1c:	b538      	push	{r3, r4, r5, lr}
 8005e1e:	4604      	mov	r4, r0
 8005e20:	4608      	mov	r0, r1
 8005e22:	4611      	mov	r1, r2
 8005e24:	2200      	movs	r2, #0
 8005e26:	4d05      	ldr	r5, [pc, #20]	; (8005e3c <_read_r+0x20>)
 8005e28:	602a      	str	r2, [r5, #0]
 8005e2a:	461a      	mov	r2, r3
 8005e2c:	f7fb fb6d 	bl	800150a <_read>
 8005e30:	1c43      	adds	r3, r0, #1
 8005e32:	d102      	bne.n	8005e3a <_read_r+0x1e>
 8005e34:	682b      	ldr	r3, [r5, #0]
 8005e36:	b103      	cbz	r3, 8005e3a <_read_r+0x1e>
 8005e38:	6023      	str	r3, [r4, #0]
 8005e3a:	bd38      	pop	{r3, r4, r5, pc}
 8005e3c:	200002b4 	.word	0x200002b4

08005e40 <_init>:
 8005e40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e42:	bf00      	nop
 8005e44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005e46:	bc08      	pop	{r3}
 8005e48:	469e      	mov	lr, r3
 8005e4a:	4770      	bx	lr

08005e4c <_fini>:
 8005e4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e4e:	bf00      	nop
 8005e50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005e52:	bc08      	pop	{r3}
 8005e54:	469e      	mov	lr, r3
 8005e56:	4770      	bx	lr
